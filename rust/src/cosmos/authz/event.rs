// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/authz/v1beta1/event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct EventGrant {
    // message fields
    pub msg_type_url: ::std::string::String,
    pub granter: ::std::string::String,
    pub grantee: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventGrant {
    fn default() -> &'a EventGrant {
        <EventGrant as ::protobuf::Message>::default_instance()
    }
}

impl EventGrant {
    pub fn new() -> EventGrant {
        ::std::default::Default::default()
    }

    // string msg_type_url = 2;


    pub fn get_msg_type_url(&self) -> &str {
        &self.msg_type_url
    }
    pub fn clear_msg_type_url(&mut self) {
        self.msg_type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_type_url(&mut self, v: ::std::string::String) {
        self.msg_type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.msg_type_url
    }

    // Take field
    pub fn take_msg_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_type_url, ::std::string::String::new())
    }

    // string granter = 3;


    pub fn get_granter(&self) -> &str {
        &self.granter
    }
    pub fn clear_granter(&mut self) {
        self.granter.clear();
    }

    // Param is passed by value, moved
    pub fn set_granter(&mut self, v: ::std::string::String) {
        self.granter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granter(&mut self) -> &mut ::std::string::String {
        &mut self.granter
    }

    // Take field
    pub fn take_granter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.granter, ::std::string::String::new())
    }

    // string grantee = 4;


    pub fn get_grantee(&self) -> &str {
        &self.grantee
    }
    pub fn clear_grantee(&mut self) {
        self.grantee.clear();
    }

    // Param is passed by value, moved
    pub fn set_grantee(&mut self, v: ::std::string::String) {
        self.grantee = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grantee(&mut self) -> &mut ::std::string::String {
        &mut self.grantee
    }

    // Take field
    pub fn take_grantee(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grantee, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventGrant {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_type_url)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.granter)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grantee)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.msg_type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg_type_url);
        }
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.grantee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.msg_type_url.is_empty() {
            os.write_string(2, &self.msg_type_url)?;
        }
        if !self.granter.is_empty() {
            os.write_string(3, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(4, &self.grantee)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventGrant {
        EventGrant::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_type_url",
                |m: &EventGrant| { &m.msg_type_url },
                |m: &mut EventGrant| { &mut m.msg_type_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "granter",
                |m: &EventGrant| { &m.granter },
                |m: &mut EventGrant| { &mut m.granter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grantee",
                |m: &EventGrant| { &m.grantee },
                |m: &mut EventGrant| { &mut m.grantee },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventGrant>(
                "EventGrant",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventGrant {
        static instance: ::protobuf::rt::LazyV2<EventGrant> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventGrant::new)
    }
}

impl ::protobuf::Clear for EventGrant {
    fn clear(&mut self) {
        self.msg_type_url.clear();
        self.granter.clear();
        self.grantee.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventGrant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventGrant {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EventRevoke {
    // message fields
    pub msg_type_url: ::std::string::String,
    pub granter: ::std::string::String,
    pub grantee: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventRevoke {
    fn default() -> &'a EventRevoke {
        <EventRevoke as ::protobuf::Message>::default_instance()
    }
}

impl EventRevoke {
    pub fn new() -> EventRevoke {
        ::std::default::Default::default()
    }

    // string msg_type_url = 2;


    pub fn get_msg_type_url(&self) -> &str {
        &self.msg_type_url
    }
    pub fn clear_msg_type_url(&mut self) {
        self.msg_type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_type_url(&mut self, v: ::std::string::String) {
        self.msg_type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.msg_type_url
    }

    // Take field
    pub fn take_msg_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_type_url, ::std::string::String::new())
    }

    // string granter = 3;


    pub fn get_granter(&self) -> &str {
        &self.granter
    }
    pub fn clear_granter(&mut self) {
        self.granter.clear();
    }

    // Param is passed by value, moved
    pub fn set_granter(&mut self, v: ::std::string::String) {
        self.granter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granter(&mut self) -> &mut ::std::string::String {
        &mut self.granter
    }

    // Take field
    pub fn take_granter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.granter, ::std::string::String::new())
    }

    // string grantee = 4;


    pub fn get_grantee(&self) -> &str {
        &self.grantee
    }
    pub fn clear_grantee(&mut self) {
        self.grantee.clear();
    }

    // Param is passed by value, moved
    pub fn set_grantee(&mut self, v: ::std::string::String) {
        self.grantee = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grantee(&mut self) -> &mut ::std::string::String {
        &mut self.grantee
    }

    // Take field
    pub fn take_grantee(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grantee, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventRevoke {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_type_url)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.granter)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grantee)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.msg_type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.msg_type_url);
        }
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.grantee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.msg_type_url.is_empty() {
            os.write_string(2, &self.msg_type_url)?;
        }
        if !self.granter.is_empty() {
            os.write_string(3, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(4, &self.grantee)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventRevoke {
        EventRevoke::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_type_url",
                |m: &EventRevoke| { &m.msg_type_url },
                |m: &mut EventRevoke| { &mut m.msg_type_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "granter",
                |m: &EventRevoke| { &m.granter },
                |m: &mut EventRevoke| { &mut m.granter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grantee",
                |m: &EventRevoke| { &m.grantee },
                |m: &mut EventRevoke| { &mut m.grantee },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EventRevoke>(
                "EventRevoke",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EventRevoke {
        static instance: ::protobuf::rt::LazyV2<EventRevoke> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventRevoke::new)
    }
}

impl ::protobuf::Clear for EventRevoke {
    fn clear(&mut self) {
        self.msg_type_url.clear();
        self.granter.clear();
        self.grantee.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EventRevoke {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EventRevoke {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20cosmos/authz/v1beta1/event.proto\x12\x14cosmos.authz.v1beta1\"b\n\
    \nEventGrant\x12\x20\n\x0cmsg_type_url\x18\x02\x20\x01(\tR\nmsgTypeUrl\
    \x12\x18\n\x07granter\x18\x03\x20\x01(\tR\x07granter\x12\x18\n\x07grante\
    e\x18\x04\x20\x01(\tR\x07grantee\"c\n\x0bEventRevoke\x12\x20\n\x0cmsg_ty\
    pe_url\x18\x02\x20\x01(\tR\nmsgTypeUrl\x12\x18\n\x07granter\x18\x03\x20\
    \x01(\tR\x07granter\x12\x18\n\x07grantee\x18\x04\x20\x01(\tR\x07granteeB\
    &Z$github.com/cosmos/cosmos-sdk/x/authzb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
