// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/authz/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MsgGrant {
    // message fields
    pub granter: ::std::string::String,
    pub grantee: ::std::string::String,
    pub grant: ::protobuf::SingularPtrField<super::authz::Grant>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgGrant {
    fn default() -> &'a MsgGrant {
        <MsgGrant as ::protobuf::Message>::default_instance()
    }
}

impl MsgGrant {
    pub fn new() -> MsgGrant {
        ::std::default::Default::default()
    }

    // string granter = 1;


    pub fn get_granter(&self) -> &str {
        &self.granter
    }
    pub fn clear_granter(&mut self) {
        self.granter.clear();
    }

    // Param is passed by value, moved
    pub fn set_granter(&mut self, v: ::std::string::String) {
        self.granter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granter(&mut self) -> &mut ::std::string::String {
        &mut self.granter
    }

    // Take field
    pub fn take_granter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.granter, ::std::string::String::new())
    }

    // string grantee = 2;


    pub fn get_grantee(&self) -> &str {
        &self.grantee
    }
    pub fn clear_grantee(&mut self) {
        self.grantee.clear();
    }

    // Param is passed by value, moved
    pub fn set_grantee(&mut self, v: ::std::string::String) {
        self.grantee = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grantee(&mut self) -> &mut ::std::string::String {
        &mut self.grantee
    }

    // Take field
    pub fn take_grantee(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grantee, ::std::string::String::new())
    }

    // .cosmos.authz.v1beta1.Grant grant = 3;


    pub fn get_grant(&self) -> &super::authz::Grant {
        self.grant.as_ref().unwrap_or_else(|| <super::authz::Grant as ::protobuf::Message>::default_instance())
    }
    pub fn clear_grant(&mut self) {
        self.grant.clear();
    }

    pub fn has_grant(&self) -> bool {
        self.grant.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grant(&mut self, v: super::authz::Grant) {
        self.grant = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grant(&mut self) -> &mut super::authz::Grant {
        if self.grant.is_none() {
            self.grant.set_default();
        }
        self.grant.as_mut().unwrap()
    }

    // Take field
    pub fn take_grant(&mut self) -> super::authz::Grant {
        self.grant.take().unwrap_or_else(|| super::authz::Grant::new())
    }
}

impl ::protobuf::Message for MsgGrant {
    fn is_initialized(&self) -> bool {
        for v in &self.grant {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.granter)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grantee)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.grant)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grantee);
        }
        if let Some(ref v) = self.grant.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(2, &self.grantee)?;
        }
        if let Some(ref v) = self.grant.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgGrant {
        MsgGrant::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "granter",
                |m: &MsgGrant| { &m.granter },
                |m: &mut MsgGrant| { &mut m.granter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grantee",
                |m: &MsgGrant| { &m.grantee },
                |m: &mut MsgGrant| { &mut m.grantee },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::authz::Grant>>(
                "grant",
                |m: &MsgGrant| { &m.grant },
                |m: &mut MsgGrant| { &mut m.grant },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgGrant>(
                "MsgGrant",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgGrant {
        static instance: ::protobuf::rt::LazyV2<MsgGrant> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgGrant::new)
    }
}

impl ::protobuf::Clear for MsgGrant {
    fn clear(&mut self) {
        self.granter.clear();
        self.grantee.clear();
        self.grant.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgGrant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgGrant {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgExecResponse {
    // message fields
    pub results: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgExecResponse {
    fn default() -> &'a MsgExecResponse {
        <MsgExecResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgExecResponse {
    pub fn new() -> MsgExecResponse {
        ::std::default::Default::default()
    }

    // repeated bytes results = 1;


    pub fn get_results(&self) -> &[::std::vec::Vec<u8>] {
        &self.results
    }
    pub fn clear_results(&mut self) {
        self.results.clear();
    }

    // Param is passed by value, moved
    pub fn set_results(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_results(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.results
    }

    // Take field
    pub fn take_results(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.results, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgExecResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.results)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.results {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.results {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgExecResponse {
        MsgExecResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "results",
                |m: &MsgExecResponse| { &m.results },
                |m: &mut MsgExecResponse| { &mut m.results },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgExecResponse>(
                "MsgExecResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgExecResponse {
        static instance: ::protobuf::rt::LazyV2<MsgExecResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgExecResponse::new)
    }
}

impl ::protobuf::Clear for MsgExecResponse {
    fn clear(&mut self) {
        self.results.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgExecResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgExecResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgExec {
    // message fields
    pub grantee: ::std::string::String,
    pub msgs: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgExec {
    fn default() -> &'a MsgExec {
        <MsgExec as ::protobuf::Message>::default_instance()
    }
}

impl MsgExec {
    pub fn new() -> MsgExec {
        ::std::default::Default::default()
    }

    // string grantee = 1;


    pub fn get_grantee(&self) -> &str {
        &self.grantee
    }
    pub fn clear_grantee(&mut self) {
        self.grantee.clear();
    }

    // Param is passed by value, moved
    pub fn set_grantee(&mut self, v: ::std::string::String) {
        self.grantee = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grantee(&mut self) -> &mut ::std::string::String {
        &mut self.grantee
    }

    // Take field
    pub fn take_grantee(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grantee, ::std::string::String::new())
    }

    // repeated .google.protobuf.Any msgs = 2;


    pub fn get_msgs(&self) -> &[::protobuf::well_known_types::Any] {
        &self.msgs
    }
    pub fn clear_msgs(&mut self) {
        self.msgs.clear();
    }

    // Param is passed by value, moved
    pub fn set_msgs(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>) {
        self.msgs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_msgs(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        &mut self.msgs
    }

    // Take field
    pub fn take_msgs(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.msgs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgExec {
    fn is_initialized(&self) -> bool {
        for v in &self.msgs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grantee)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.msgs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.grantee);
        }
        for value in &self.msgs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.grantee.is_empty() {
            os.write_string(1, &self.grantee)?;
        }
        for v in &self.msgs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgExec {
        MsgExec::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grantee",
                |m: &MsgExec| { &m.grantee },
                |m: &mut MsgExec| { &mut m.grantee },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "msgs",
                |m: &MsgExec| { &m.msgs },
                |m: &mut MsgExec| { &mut m.msgs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgExec>(
                "MsgExec",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgExec {
        static instance: ::protobuf::rt::LazyV2<MsgExec> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgExec::new)
    }
}

impl ::protobuf::Clear for MsgExec {
    fn clear(&mut self) {
        self.grantee.clear();
        self.msgs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgExec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgExec {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgGrantResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgGrantResponse {
    fn default() -> &'a MsgGrantResponse {
        <MsgGrantResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgGrantResponse {
    pub fn new() -> MsgGrantResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgGrantResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgGrantResponse {
        MsgGrantResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgGrantResponse>(
                "MsgGrantResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgGrantResponse {
        static instance: ::protobuf::rt::LazyV2<MsgGrantResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgGrantResponse::new)
    }
}

impl ::protobuf::Clear for MsgGrantResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgGrantResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgGrantResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgRevoke {
    // message fields
    pub granter: ::std::string::String,
    pub grantee: ::std::string::String,
    pub msg_type_url: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRevoke {
    fn default() -> &'a MsgRevoke {
        <MsgRevoke as ::protobuf::Message>::default_instance()
    }
}

impl MsgRevoke {
    pub fn new() -> MsgRevoke {
        ::std::default::Default::default()
    }

    // string granter = 1;


    pub fn get_granter(&self) -> &str {
        &self.granter
    }
    pub fn clear_granter(&mut self) {
        self.granter.clear();
    }

    // Param is passed by value, moved
    pub fn set_granter(&mut self, v: ::std::string::String) {
        self.granter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granter(&mut self) -> &mut ::std::string::String {
        &mut self.granter
    }

    // Take field
    pub fn take_granter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.granter, ::std::string::String::new())
    }

    // string grantee = 2;


    pub fn get_grantee(&self) -> &str {
        &self.grantee
    }
    pub fn clear_grantee(&mut self) {
        self.grantee.clear();
    }

    // Param is passed by value, moved
    pub fn set_grantee(&mut self, v: ::std::string::String) {
        self.grantee = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grantee(&mut self) -> &mut ::std::string::String {
        &mut self.grantee
    }

    // Take field
    pub fn take_grantee(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.grantee, ::std::string::String::new())
    }

    // string msg_type_url = 3;


    pub fn get_msg_type_url(&self) -> &str {
        &self.msg_type_url
    }
    pub fn clear_msg_type_url(&mut self) {
        self.msg_type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg_type_url(&mut self, v: ::std::string::String) {
        self.msg_type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.msg_type_url
    }

    // Take field
    pub fn take_msg_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.msg_type_url, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgRevoke {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.granter)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.grantee)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.msg_type_url)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.granter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.granter);
        }
        if !self.grantee.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.grantee);
        }
        if !self.msg_type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.msg_type_url);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.granter.is_empty() {
            os.write_string(1, &self.granter)?;
        }
        if !self.grantee.is_empty() {
            os.write_string(2, &self.grantee)?;
        }
        if !self.msg_type_url.is_empty() {
            os.write_string(3, &self.msg_type_url)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRevoke {
        MsgRevoke::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "granter",
                |m: &MsgRevoke| { &m.granter },
                |m: &mut MsgRevoke| { &mut m.granter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "grantee",
                |m: &MsgRevoke| { &m.grantee },
                |m: &mut MsgRevoke| { &mut m.grantee },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "msg_type_url",
                |m: &MsgRevoke| { &m.msg_type_url },
                |m: &mut MsgRevoke| { &mut m.msg_type_url },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgRevoke>(
                "MsgRevoke",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgRevoke {
        static instance: ::protobuf::rt::LazyV2<MsgRevoke> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRevoke::new)
    }
}

impl ::protobuf::Clear for MsgRevoke {
    fn clear(&mut self) {
        self.granter.clear();
        self.grantee.clear();
        self.msg_type_url.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgRevoke {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRevoke {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgRevokeResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRevokeResponse {
    fn default() -> &'a MsgRevokeResponse {
        <MsgRevokeResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRevokeResponse {
    pub fn new() -> MsgRevokeResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRevokeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRevokeResponse {
        MsgRevokeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgRevokeResponse>(
                "MsgRevokeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgRevokeResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRevokeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRevokeResponse::new)
    }
}

impl ::protobuf::Clear for MsgRevokeResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgRevokeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRevokeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dcosmos/authz/v1beta1/tx.proto\x12\x14cosmos.authz.v1beta1\x1a\x19c\
    osmos_proto/cosmos.proto\x1a\x14gogoproto/gogo.proto\x1a\x1fgoogle/proto\
    buf/timestamp.proto\x1a\x19google/protobuf/any.proto\x1a#cosmos/base/abc\
    i/v1beta1/abci.proto\x1a\x20cosmos/authz/v1beta1/authz.proto\"w\n\x08Msg\
    Grant\x12\x18\n\x07granter\x18\x01\x20\x01(\tR\x07granter\x12\x18\n\x07g\
    rantee\x18\x02\x20\x01(\tR\x07grantee\x127\n\x05grant\x18\x03\x20\x01(\
    \x0b2\x1b.cosmos.authz.v1beta1.GrantR\x05grantB\x04\xc8\xde\x1f\0\"+\n\
    \x0fMsgExecResponse\x12\x18\n\x07results\x18\x01\x20\x03(\x0cR\x07result\
    s\"o\n\x07MsgExec\x12\x18\n\x07grantee\x18\x01\x20\x01(\tR\x07grantee\
    \x12J\n\x04msgs\x18\x02\x20\x03(\x0b2\x14.google.protobuf.AnyR\x04msgsB\
    \x20\xca\xb4-\x1csdk.Msg,\x20authz.Authorization\"\x12\n\x10MsgGrantResp\
    onse\"a\n\tMsgRevoke\x12\x18\n\x07granter\x18\x01\x20\x01(\tR\x07granter\
    \x12\x18\n\x07grantee\x18\x02\x20\x01(\tR\x07grantee\x12\x20\n\x0cmsg_ty\
    pe_url\x18\x03\x20\x01(\tR\nmsgTypeUrl\"\x13\n\x11MsgRevokeResponse2\xf8\
    \x01\n\x03Msg\x12O\n\x05Grant\x12\x1e.cosmos.authz.v1beta1.MsgGrant\x1a&\
    .cosmos.authz.v1beta1.MsgGrantResponse\x12L\n\x04Exec\x12\x1d.cosmos.aut\
    hz.v1beta1.MsgExec\x1a%.cosmos.authz.v1beta1.MsgExecResponse\x12R\n\x06R\
    evoke\x12\x1f.cosmos.authz.v1beta1.MsgRevoke\x1a'.cosmos.authz.v1beta1.M\
    sgRevokeResponseB*Z$github.com/cosmos/cosmos-sdk/x/authz\xc8\xe1\x1e\0b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
