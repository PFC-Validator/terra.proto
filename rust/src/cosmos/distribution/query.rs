// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/distribution/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct QueryParamsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryParamsRequest>(
                "QueryParamsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryParamsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryParamsRequest::new)
    }
}

impl ::protobuf::Clear for QueryParamsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryParamsResponse {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::distribution::Params>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    // .cosmos.distribution.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::distribution::Params {
        self.params.as_ref().unwrap_or_else(|| <super::distribution::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::distribution::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::distribution::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::distribution::Params {
        self.params.take().unwrap_or_else(|| super::distribution::Params::new())
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::Params>>(
                "params",
                |m: &QueryParamsResponse| { &m.params },
                |m: &mut QueryParamsResponse| { &mut m.params },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryParamsResponse>(
                "QueryParamsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryParamsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryParamsResponse::new)
    }
}

impl ::protobuf::Clear for QueryParamsResponse {
    fn clear(&mut self) {
        self.params.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryValidatorOutstandingRewardsRequest {
    // message fields
    pub validator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryValidatorOutstandingRewardsRequest {
    fn default() -> &'a QueryValidatorOutstandingRewardsRequest {
        <QueryValidatorOutstandingRewardsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorOutstandingRewardsRequest {
    pub fn new() -> QueryValidatorOutstandingRewardsRequest {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryValidatorOutstandingRewardsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryValidatorOutstandingRewardsRequest {
        QueryValidatorOutstandingRewardsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &QueryValidatorOutstandingRewardsRequest| { &m.validator_address },
                |m: &mut QueryValidatorOutstandingRewardsRequest| { &mut m.validator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryValidatorOutstandingRewardsRequest>(
                "QueryValidatorOutstandingRewardsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryValidatorOutstandingRewardsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryValidatorOutstandingRewardsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryValidatorOutstandingRewardsRequest::new)
    }
}

impl ::protobuf::Clear for QueryValidatorOutstandingRewardsRequest {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryValidatorOutstandingRewardsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorOutstandingRewardsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryValidatorOutstandingRewardsResponse {
    // message fields
    pub rewards: ::protobuf::SingularPtrField<super::distribution::ValidatorOutstandingRewards>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryValidatorOutstandingRewardsResponse {
    fn default() -> &'a QueryValidatorOutstandingRewardsResponse {
        <QueryValidatorOutstandingRewardsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorOutstandingRewardsResponse {
    pub fn new() -> QueryValidatorOutstandingRewardsResponse {
        ::std::default::Default::default()
    }

    // .cosmos.distribution.v1beta1.ValidatorOutstandingRewards rewards = 1;


    pub fn get_rewards(&self) -> &super::distribution::ValidatorOutstandingRewards {
        self.rewards.as_ref().unwrap_or_else(|| <super::distribution::ValidatorOutstandingRewards as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    pub fn has_rewards(&self) -> bool {
        self.rewards.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: super::distribution::ValidatorOutstandingRewards) {
        self.rewards = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rewards(&mut self) -> &mut super::distribution::ValidatorOutstandingRewards {
        if self.rewards.is_none() {
            self.rewards.set_default();
        }
        self.rewards.as_mut().unwrap()
    }

    // Take field
    pub fn take_rewards(&mut self) -> super::distribution::ValidatorOutstandingRewards {
        self.rewards.take().unwrap_or_else(|| super::distribution::ValidatorOutstandingRewards::new())
    }
}

impl ::protobuf::Message for QueryValidatorOutstandingRewardsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rewards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.rewards.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.rewards.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryValidatorOutstandingRewardsResponse {
        QueryValidatorOutstandingRewardsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::ValidatorOutstandingRewards>>(
                "rewards",
                |m: &QueryValidatorOutstandingRewardsResponse| { &m.rewards },
                |m: &mut QueryValidatorOutstandingRewardsResponse| { &mut m.rewards },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryValidatorOutstandingRewardsResponse>(
                "QueryValidatorOutstandingRewardsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryValidatorOutstandingRewardsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryValidatorOutstandingRewardsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryValidatorOutstandingRewardsResponse::new)
    }
}

impl ::protobuf::Clear for QueryValidatorOutstandingRewardsResponse {
    fn clear(&mut self) {
        self.rewards.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryValidatorOutstandingRewardsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorOutstandingRewardsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryValidatorCommissionRequest {
    // message fields
    pub validator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryValidatorCommissionRequest {
    fn default() -> &'a QueryValidatorCommissionRequest {
        <QueryValidatorCommissionRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorCommissionRequest {
    pub fn new() -> QueryValidatorCommissionRequest {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryValidatorCommissionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryValidatorCommissionRequest {
        QueryValidatorCommissionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &QueryValidatorCommissionRequest| { &m.validator_address },
                |m: &mut QueryValidatorCommissionRequest| { &mut m.validator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryValidatorCommissionRequest>(
                "QueryValidatorCommissionRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryValidatorCommissionRequest {
        static instance: ::protobuf::rt::LazyV2<QueryValidatorCommissionRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryValidatorCommissionRequest::new)
    }
}

impl ::protobuf::Clear for QueryValidatorCommissionRequest {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryValidatorCommissionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorCommissionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryValidatorCommissionResponse {
    // message fields
    pub commission: ::protobuf::SingularPtrField<super::distribution::ValidatorAccumulatedCommission>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryValidatorCommissionResponse {
    fn default() -> &'a QueryValidatorCommissionResponse {
        <QueryValidatorCommissionResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorCommissionResponse {
    pub fn new() -> QueryValidatorCommissionResponse {
        ::std::default::Default::default()
    }

    // .cosmos.distribution.v1beta1.ValidatorAccumulatedCommission commission = 1;


    pub fn get_commission(&self) -> &super::distribution::ValidatorAccumulatedCommission {
        self.commission.as_ref().unwrap_or_else(|| <super::distribution::ValidatorAccumulatedCommission as ::protobuf::Message>::default_instance())
    }
    pub fn clear_commission(&mut self) {
        self.commission.clear();
    }

    pub fn has_commission(&self) -> bool {
        self.commission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commission(&mut self, v: super::distribution::ValidatorAccumulatedCommission) {
        self.commission = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commission(&mut self) -> &mut super::distribution::ValidatorAccumulatedCommission {
        if self.commission.is_none() {
            self.commission.set_default();
        }
        self.commission.as_mut().unwrap()
    }

    // Take field
    pub fn take_commission(&mut self) -> super::distribution::ValidatorAccumulatedCommission {
        self.commission.take().unwrap_or_else(|| super::distribution::ValidatorAccumulatedCommission::new())
    }
}

impl ::protobuf::Message for QueryValidatorCommissionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.commission {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.commission)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.commission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.commission.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryValidatorCommissionResponse {
        QueryValidatorCommissionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::ValidatorAccumulatedCommission>>(
                "commission",
                |m: &QueryValidatorCommissionResponse| { &m.commission },
                |m: &mut QueryValidatorCommissionResponse| { &mut m.commission },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryValidatorCommissionResponse>(
                "QueryValidatorCommissionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryValidatorCommissionResponse {
        static instance: ::protobuf::rt::LazyV2<QueryValidatorCommissionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryValidatorCommissionResponse::new)
    }
}

impl ::protobuf::Clear for QueryValidatorCommissionResponse {
    fn clear(&mut self) {
        self.commission.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryValidatorCommissionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorCommissionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryValidatorSlashesRequest {
    // message fields
    pub validator_address: ::std::string::String,
    pub starting_height: u64,
    pub ending_height: u64,
    pub pagination: ::protobuf::SingularPtrField<super::pagination::PageRequest>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryValidatorSlashesRequest {
    fn default() -> &'a QueryValidatorSlashesRequest {
        <QueryValidatorSlashesRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorSlashesRequest {
    pub fn new() -> QueryValidatorSlashesRequest {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // uint64 starting_height = 2;


    pub fn get_starting_height(&self) -> u64 {
        self.starting_height
    }
    pub fn clear_starting_height(&mut self) {
        self.starting_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_starting_height(&mut self, v: u64) {
        self.starting_height = v;
    }

    // uint64 ending_height = 3;


    pub fn get_ending_height(&self) -> u64 {
        self.ending_height
    }
    pub fn clear_ending_height(&mut self) {
        self.ending_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_ending_height(&mut self, v: u64) {
        self.ending_height = v;
    }

    // .cosmos.base.query.v1beta1.PageRequest pagination = 4;


    pub fn get_pagination(&self) -> &super::pagination::PageRequest {
        self.pagination.as_ref().unwrap_or_else(|| <super::pagination::PageRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pagination(&mut self) {
        self.pagination.clear();
    }

    pub fn has_pagination(&self) -> bool {
        self.pagination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pagination(&mut self, v: super::pagination::PageRequest) {
        self.pagination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pagination(&mut self) -> &mut super::pagination::PageRequest {
        if self.pagination.is_none() {
            self.pagination.set_default();
        }
        self.pagination.as_mut().unwrap()
    }

    // Take field
    pub fn take_pagination(&mut self) -> super::pagination::PageRequest {
        self.pagination.take().unwrap_or_else(|| super::pagination::PageRequest::new())
    }
}

impl ::protobuf::Message for QueryValidatorSlashesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.pagination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.starting_height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ending_height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pagination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if self.starting_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.starting_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ending_height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.ending_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if self.starting_height != 0 {
            os.write_uint64(2, self.starting_height)?;
        }
        if self.ending_height != 0 {
            os.write_uint64(3, self.ending_height)?;
        }
        if let Some(ref v) = self.pagination.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryValidatorSlashesRequest {
        QueryValidatorSlashesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &QueryValidatorSlashesRequest| { &m.validator_address },
                |m: &mut QueryValidatorSlashesRequest| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "starting_height",
                |m: &QueryValidatorSlashesRequest| { &m.starting_height },
                |m: &mut QueryValidatorSlashesRequest| { &mut m.starting_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ending_height",
                |m: &QueryValidatorSlashesRequest| { &m.ending_height },
                |m: &mut QueryValidatorSlashesRequest| { &mut m.ending_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pagination::PageRequest>>(
                "pagination",
                |m: &QueryValidatorSlashesRequest| { &m.pagination },
                |m: &mut QueryValidatorSlashesRequest| { &mut m.pagination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryValidatorSlashesRequest>(
                "QueryValidatorSlashesRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryValidatorSlashesRequest {
        static instance: ::protobuf::rt::LazyV2<QueryValidatorSlashesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryValidatorSlashesRequest::new)
    }
}

impl ::protobuf::Clear for QueryValidatorSlashesRequest {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.starting_height = 0;
        self.ending_height = 0;
        self.pagination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryValidatorSlashesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorSlashesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryValidatorSlashesResponse {
    // message fields
    pub slashes: ::protobuf::RepeatedField<super::distribution::ValidatorSlashEvent>,
    pub pagination: ::protobuf::SingularPtrField<super::pagination::PageResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryValidatorSlashesResponse {
    fn default() -> &'a QueryValidatorSlashesResponse {
        <QueryValidatorSlashesResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryValidatorSlashesResponse {
    pub fn new() -> QueryValidatorSlashesResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.distribution.v1beta1.ValidatorSlashEvent slashes = 1;


    pub fn get_slashes(&self) -> &[super::distribution::ValidatorSlashEvent] {
        &self.slashes
    }
    pub fn clear_slashes(&mut self) {
        self.slashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_slashes(&mut self, v: ::protobuf::RepeatedField<super::distribution::ValidatorSlashEvent>) {
        self.slashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_slashes(&mut self) -> &mut ::protobuf::RepeatedField<super::distribution::ValidatorSlashEvent> {
        &mut self.slashes
    }

    // Take field
    pub fn take_slashes(&mut self) -> ::protobuf::RepeatedField<super::distribution::ValidatorSlashEvent> {
        ::std::mem::replace(&mut self.slashes, ::protobuf::RepeatedField::new())
    }

    // .cosmos.base.query.v1beta1.PageResponse pagination = 2;


    pub fn get_pagination(&self) -> &super::pagination::PageResponse {
        self.pagination.as_ref().unwrap_or_else(|| <super::pagination::PageResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pagination(&mut self) {
        self.pagination.clear();
    }

    pub fn has_pagination(&self) -> bool {
        self.pagination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pagination(&mut self, v: super::pagination::PageResponse) {
        self.pagination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pagination(&mut self) -> &mut super::pagination::PageResponse {
        if self.pagination.is_none() {
            self.pagination.set_default();
        }
        self.pagination.as_mut().unwrap()
    }

    // Take field
    pub fn take_pagination(&mut self) -> super::pagination::PageResponse {
        self.pagination.take().unwrap_or_else(|| super::pagination::PageResponse::new())
    }
}

impl ::protobuf::Message for QueryValidatorSlashesResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.slashes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pagination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.slashes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pagination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.slashes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.slashes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryValidatorSlashesResponse {
        QueryValidatorSlashesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::ValidatorSlashEvent>>(
                "slashes",
                |m: &QueryValidatorSlashesResponse| { &m.slashes },
                |m: &mut QueryValidatorSlashesResponse| { &mut m.slashes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pagination::PageResponse>>(
                "pagination",
                |m: &QueryValidatorSlashesResponse| { &m.pagination },
                |m: &mut QueryValidatorSlashesResponse| { &mut m.pagination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryValidatorSlashesResponse>(
                "QueryValidatorSlashesResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryValidatorSlashesResponse {
        static instance: ::protobuf::rt::LazyV2<QueryValidatorSlashesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryValidatorSlashesResponse::new)
    }
}

impl ::protobuf::Clear for QueryValidatorSlashesResponse {
    fn clear(&mut self) {
        self.slashes.clear();
        self.pagination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryValidatorSlashesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryValidatorSlashesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDelegationRewardsRequest {
    // message fields
    pub delegator_address: ::std::string::String,
    pub validator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDelegationRewardsRequest {
    fn default() -> &'a QueryDelegationRewardsRequest {
        <QueryDelegationRewardsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegationRewardsRequest {
    pub fn new() -> QueryDelegationRewardsRequest {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string validator_address = 2;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryDelegationRewardsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDelegationRewardsRequest {
        QueryDelegationRewardsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &QueryDelegationRewardsRequest| { &m.delegator_address },
                |m: &mut QueryDelegationRewardsRequest| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &QueryDelegationRewardsRequest| { &m.validator_address },
                |m: &mut QueryDelegationRewardsRequest| { &mut m.validator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDelegationRewardsRequest>(
                "QueryDelegationRewardsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDelegationRewardsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryDelegationRewardsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDelegationRewardsRequest::new)
    }
}

impl ::protobuf::Clear for QueryDelegationRewardsRequest {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDelegationRewardsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegationRewardsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDelegationRewardsResponse {
    // message fields
    pub rewards: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDelegationRewardsResponse {
    fn default() -> &'a QueryDelegationRewardsResponse {
        <QueryDelegationRewardsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegationRewardsResponse {
    pub fn new() -> QueryDelegationRewardsResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin rewards = 1;


    pub fn get_rewards(&self) -> &[super::coin::DecCoin] {
        &self.rewards
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rewards(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.rewards
    }

    // Take field
    pub fn take_rewards(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.rewards, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryDelegationRewardsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rewards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rewards {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDelegationRewardsResponse {
        QueryDelegationRewardsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "rewards",
                |m: &QueryDelegationRewardsResponse| { &m.rewards },
                |m: &mut QueryDelegationRewardsResponse| { &mut m.rewards },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDelegationRewardsResponse>(
                "QueryDelegationRewardsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDelegationRewardsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryDelegationRewardsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDelegationRewardsResponse::new)
    }
}

impl ::protobuf::Clear for QueryDelegationRewardsResponse {
    fn clear(&mut self) {
        self.rewards.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDelegationRewardsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegationRewardsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDelegationTotalRewardsRequest {
    // message fields
    pub delegator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDelegationTotalRewardsRequest {
    fn default() -> &'a QueryDelegationTotalRewardsRequest {
        <QueryDelegationTotalRewardsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegationTotalRewardsRequest {
    pub fn new() -> QueryDelegationTotalRewardsRequest {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryDelegationTotalRewardsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDelegationTotalRewardsRequest {
        QueryDelegationTotalRewardsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &QueryDelegationTotalRewardsRequest| { &m.delegator_address },
                |m: &mut QueryDelegationTotalRewardsRequest| { &mut m.delegator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDelegationTotalRewardsRequest>(
                "QueryDelegationTotalRewardsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDelegationTotalRewardsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryDelegationTotalRewardsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDelegationTotalRewardsRequest::new)
    }
}

impl ::protobuf::Clear for QueryDelegationTotalRewardsRequest {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDelegationTotalRewardsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegationTotalRewardsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDelegationTotalRewardsResponse {
    // message fields
    pub rewards: ::protobuf::RepeatedField<super::distribution::DelegationDelegatorReward>,
    pub total: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDelegationTotalRewardsResponse {
    fn default() -> &'a QueryDelegationTotalRewardsResponse {
        <QueryDelegationTotalRewardsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegationTotalRewardsResponse {
    pub fn new() -> QueryDelegationTotalRewardsResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.distribution.v1beta1.DelegationDelegatorReward rewards = 1;


    pub fn get_rewards(&self) -> &[super::distribution::DelegationDelegatorReward] {
        &self.rewards
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: ::protobuf::RepeatedField<super::distribution::DelegationDelegatorReward>) {
        self.rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rewards(&mut self) -> &mut ::protobuf::RepeatedField<super::distribution::DelegationDelegatorReward> {
        &mut self.rewards
    }

    // Take field
    pub fn take_rewards(&mut self) -> ::protobuf::RepeatedField<super::distribution::DelegationDelegatorReward> {
        ::std::mem::replace(&mut self.rewards, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.base.v1beta1.DecCoin total = 2;


    pub fn get_total(&self) -> &[super::coin::DecCoin] {
        &self.total
    }
    pub fn clear_total(&mut self) {
        self.total.clear();
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.total = v;
    }

    // Mutable pointer to the field.
    pub fn mut_total(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.total
    }

    // Take field
    pub fn take_total(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.total, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryDelegationTotalRewardsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.total {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rewards)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.total)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.total {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rewards {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.total {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDelegationTotalRewardsResponse {
        QueryDelegationTotalRewardsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::DelegationDelegatorReward>>(
                "rewards",
                |m: &QueryDelegationTotalRewardsResponse| { &m.rewards },
                |m: &mut QueryDelegationTotalRewardsResponse| { &mut m.rewards },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "total",
                |m: &QueryDelegationTotalRewardsResponse| { &m.total },
                |m: &mut QueryDelegationTotalRewardsResponse| { &mut m.total },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDelegationTotalRewardsResponse>(
                "QueryDelegationTotalRewardsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDelegationTotalRewardsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryDelegationTotalRewardsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDelegationTotalRewardsResponse::new)
    }
}

impl ::protobuf::Clear for QueryDelegationTotalRewardsResponse {
    fn clear(&mut self) {
        self.rewards.clear();
        self.total.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDelegationTotalRewardsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegationTotalRewardsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDelegatorValidatorsRequest {
    // message fields
    pub delegator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorValidatorsRequest {
    fn default() -> &'a QueryDelegatorValidatorsRequest {
        <QueryDelegatorValidatorsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorValidatorsRequest {
    pub fn new() -> QueryDelegatorValidatorsRequest {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryDelegatorValidatorsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDelegatorValidatorsRequest {
        QueryDelegatorValidatorsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &QueryDelegatorValidatorsRequest| { &m.delegator_address },
                |m: &mut QueryDelegatorValidatorsRequest| { &mut m.delegator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDelegatorValidatorsRequest>(
                "QueryDelegatorValidatorsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDelegatorValidatorsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryDelegatorValidatorsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDelegatorValidatorsRequest::new)
    }
}

impl ::protobuf::Clear for QueryDelegatorValidatorsRequest {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDelegatorValidatorsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorValidatorsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDelegatorValidatorsResponse {
    // message fields
    pub validators: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorValidatorsResponse {
    fn default() -> &'a QueryDelegatorValidatorsResponse {
        <QueryDelegatorValidatorsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorValidatorsResponse {
    pub fn new() -> QueryDelegatorValidatorsResponse {
        ::std::default::Default::default()
    }

    // repeated string validators = 1;


    pub fn get_validators(&self) -> &[::std::string::String] {
        &self.validators
    }
    pub fn clear_validators(&mut self) {
        self.validators.clear();
    }

    // Param is passed by value, moved
    pub fn set_validators(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.validators = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validators(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.validators
    }

    // Take field
    pub fn take_validators(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.validators, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryDelegatorValidatorsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.validators)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.validators {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.validators {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDelegatorValidatorsResponse {
        QueryDelegatorValidatorsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validators",
                |m: &QueryDelegatorValidatorsResponse| { &m.validators },
                |m: &mut QueryDelegatorValidatorsResponse| { &mut m.validators },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDelegatorValidatorsResponse>(
                "QueryDelegatorValidatorsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDelegatorValidatorsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryDelegatorValidatorsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDelegatorValidatorsResponse::new)
    }
}

impl ::protobuf::Clear for QueryDelegatorValidatorsResponse {
    fn clear(&mut self) {
        self.validators.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDelegatorValidatorsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorValidatorsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDelegatorWithdrawAddressRequest {
    // message fields
    pub delegator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorWithdrawAddressRequest {
    fn default() -> &'a QueryDelegatorWithdrawAddressRequest {
        <QueryDelegatorWithdrawAddressRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorWithdrawAddressRequest {
    pub fn new() -> QueryDelegatorWithdrawAddressRequest {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryDelegatorWithdrawAddressRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDelegatorWithdrawAddressRequest {
        QueryDelegatorWithdrawAddressRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &QueryDelegatorWithdrawAddressRequest| { &m.delegator_address },
                |m: &mut QueryDelegatorWithdrawAddressRequest| { &mut m.delegator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDelegatorWithdrawAddressRequest>(
                "QueryDelegatorWithdrawAddressRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDelegatorWithdrawAddressRequest {
        static instance: ::protobuf::rt::LazyV2<QueryDelegatorWithdrawAddressRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDelegatorWithdrawAddressRequest::new)
    }
}

impl ::protobuf::Clear for QueryDelegatorWithdrawAddressRequest {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDelegatorWithdrawAddressRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorWithdrawAddressRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryDelegatorWithdrawAddressResponse {
    // message fields
    pub withdraw_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryDelegatorWithdrawAddressResponse {
    fn default() -> &'a QueryDelegatorWithdrawAddressResponse {
        <QueryDelegatorWithdrawAddressResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryDelegatorWithdrawAddressResponse {
    pub fn new() -> QueryDelegatorWithdrawAddressResponse {
        ::std::default::Default::default()
    }

    // string withdraw_address = 1;


    pub fn get_withdraw_address(&self) -> &str {
        &self.withdraw_address
    }
    pub fn clear_withdraw_address(&mut self) {
        self.withdraw_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_withdraw_address(&mut self, v: ::std::string::String) {
        self.withdraw_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_withdraw_address(&mut self) -> &mut ::std::string::String {
        &mut self.withdraw_address
    }

    // Take field
    pub fn take_withdraw_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.withdraw_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryDelegatorWithdrawAddressResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.withdraw_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.withdraw_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.withdraw_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.withdraw_address.is_empty() {
            os.write_string(1, &self.withdraw_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryDelegatorWithdrawAddressResponse {
        QueryDelegatorWithdrawAddressResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "withdraw_address",
                |m: &QueryDelegatorWithdrawAddressResponse| { &m.withdraw_address },
                |m: &mut QueryDelegatorWithdrawAddressResponse| { &mut m.withdraw_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryDelegatorWithdrawAddressResponse>(
                "QueryDelegatorWithdrawAddressResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryDelegatorWithdrawAddressResponse {
        static instance: ::protobuf::rt::LazyV2<QueryDelegatorWithdrawAddressResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryDelegatorWithdrawAddressResponse::new)
    }
}

impl ::protobuf::Clear for QueryDelegatorWithdrawAddressResponse {
    fn clear(&mut self) {
        self.withdraw_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryDelegatorWithdrawAddressResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryDelegatorWithdrawAddressResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryCommunityPoolRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryCommunityPoolRequest {
    fn default() -> &'a QueryCommunityPoolRequest {
        <QueryCommunityPoolRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryCommunityPoolRequest {
    pub fn new() -> QueryCommunityPoolRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryCommunityPoolRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryCommunityPoolRequest {
        QueryCommunityPoolRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryCommunityPoolRequest>(
                "QueryCommunityPoolRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryCommunityPoolRequest {
        static instance: ::protobuf::rt::LazyV2<QueryCommunityPoolRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryCommunityPoolRequest::new)
    }
}

impl ::protobuf::Clear for QueryCommunityPoolRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryCommunityPoolRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryCommunityPoolRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryCommunityPoolResponse {
    // message fields
    pub pool: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryCommunityPoolResponse {
    fn default() -> &'a QueryCommunityPoolResponse {
        <QueryCommunityPoolResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryCommunityPoolResponse {
    pub fn new() -> QueryCommunityPoolResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.DecCoin pool = 1;


    pub fn get_pool(&self) -> &[super::coin::DecCoin] {
        &self.pool
    }
    pub fn clear_pool(&mut self) {
        self.pool.clear();
    }

    // Param is passed by value, moved
    pub fn set_pool(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.pool = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pool(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.pool
    }

    // Take field
    pub fn take_pool(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.pool, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryCommunityPoolResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.pool {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pool)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.pool {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.pool {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryCommunityPoolResponse {
        QueryCommunityPoolResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "pool",
                |m: &QueryCommunityPoolResponse| { &m.pool },
                |m: &mut QueryCommunityPoolResponse| { &mut m.pool },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryCommunityPoolResponse>(
                "QueryCommunityPoolResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryCommunityPoolResponse {
        static instance: ::protobuf::rt::LazyV2<QueryCommunityPoolResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryCommunityPoolResponse::new)
    }
}

impl ::protobuf::Clear for QueryCommunityPoolResponse {
    fn clear(&mut self) {
        self.pool.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryCommunityPoolResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryCommunityPoolResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'cosmos/distribution/v1beta1/query.proto\x12\x1bcosmos.distribution.v1\
    beta1\x1a*cosmos/base/query/v1beta1/pagination.proto\x1a\x14gogoproto/go\
    go.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1ecosmos/base/v1beta1/\
    coin.proto\x1a.cosmos/distribution/v1beta1/distribution.proto\"\x14\n\
    \x12QueryParamsRequest\"X\n\x13QueryParamsResponse\x12A\n\x06params\x18\
    \x01\x20\x01(\x0b2#.cosmos.distribution.v1beta1.ParamsR\x06paramsB\x04\
    \xc8\xde\x1f\0\"V\n'QueryValidatorOutstandingRewardsRequest\x12+\n\x11va\
    lidator_address\x18\x01\x20\x01(\tR\x10validatorAddress\"\x84\x01\n(Quer\
    yValidatorOutstandingRewardsResponse\x12X\n\x07rewards\x18\x01\x20\x01(\
    \x0b28.cosmos.distribution.v1beta1.ValidatorOutstandingRewardsR\x07rewar\
    dsB\x04\xc8\xde\x1f\0\"N\n\x1fQueryValidatorCommissionRequest\x12+\n\x11\
    validator_address\x18\x01\x20\x01(\tR\x10validatorAddress\"\x85\x01\n\
    \x20QueryValidatorCommissionResponse\x12a\n\ncommission\x18\x01\x20\x01(\
    \x0b2;.cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionR\ncomm\
    issionB\x04\xc8\xde\x1f\0\"\xeb\x01\n\x1cQueryValidatorSlashesRequest\
    \x12+\n\x11validator_address\x18\x01\x20\x01(\tR\x10validatorAddress\x12\
    '\n\x0fstarting_height\x18\x02\x20\x01(\x04R\x0estartingHeight\x12#\n\re\
    nding_height\x18\x03\x20\x01(\x04R\x0cendingHeight\x12F\n\npagination\
    \x18\x04\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npaginati\
    on:\x08\x88\xa0\x1f\0\x98\xa0\x1f\x01\"\xba\x01\n\x1dQueryValidatorSlash\
    esResponse\x12P\n\x07slashes\x18\x01\x20\x03(\x0b20.cosmos.distribution.\
    v1beta1.ValidatorSlashEventR\x07slashesB\x04\xc8\xde\x1f\0\x12G\n\npagin\
    ation\x18\x02\x20\x01(\x0b2'.cosmos.base.query.v1beta1.PageResponseR\npa\
    gination\"\x83\x01\n\x1dQueryDelegationRewardsRequest\x12+\n\x11delegato\
    r_address\x18\x01\x20\x01(\tR\x10delegatorAddress\x12+\n\x11validator_ad\
    dress\x18\x02\x20\x01(\tR\x10validatorAddress:\x08\x88\xa0\x1f\0\xe8\xa0\
    \x1f\0\"\x8d\x01\n\x1eQueryDelegationRewardsResponse\x12k\n\x07rewards\
    \x18\x01\x20\x03(\x0b2\x1c.cosmos.base.v1beta1.DecCoinR\x07rewardsB3\xaa\
    \xdf\x1f+github.com/cosmos/cosmos-sdk/types.DecCoins\xc8\xde\x1f\0\"[\n\
    \"QueryDelegationTotalRewardsRequest\x12+\n\x11delegator_address\x18\x01\
    \x20\x01(\tR\x10delegatorAddress:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xe6\
    \x01\n#QueryDelegationTotalRewardsResponse\x12V\n\x07rewards\x18\x01\x20\
    \x03(\x0b26.cosmos.distribution.v1beta1.DelegationDelegatorRewardR\x07re\
    wardsB\x04\xc8\xde\x1f\0\x12g\n\x05total\x18\x02\x20\x03(\x0b2\x1c.cosmo\
    s.base.v1beta1.DecCoinR\x05totalB3\xaa\xdf\x1f+github.com/cosmos/cosmos-\
    sdk/types.DecCoins\xc8\xde\x1f\0\"X\n\x1fQueryDelegatorValidatorsRequest\
    \x12+\n\x11delegator_address\x18\x01\x20\x01(\tR\x10delegatorAddress:\
    \x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"L\n\x20QueryDelegatorValidatorsRespons\
    e\x12\x1e\n\nvalidators\x18\x01\x20\x03(\tR\nvalidators:\x08\x88\xa0\x1f\
    \0\xe8\xa0\x1f\0\"]\n$QueryDelegatorWithdrawAddressRequest\x12+\n\x11del\
    egator_address\x18\x01\x20\x01(\tR\x10delegatorAddress:\x08\x88\xa0\x1f\
    \0\xe8\xa0\x1f\0\"\\\n%QueryDelegatorWithdrawAddressResponse\x12)\n\x10w\
    ithdraw_address\x18\x01\x20\x01(\tR\x0fwithdrawAddress:\x08\x88\xa0\x1f\
    \0\xe8\xa0\x1f\0\"\x1b\n\x19QueryCommunityPoolRequest\"\x83\x01\n\x1aQue\
    ryCommunityPoolResponse\x12e\n\x04pool\x18\x01\x20\x03(\x0b2\x1c.cosmos.\
    base.v1beta1.DecCoinR\x04poolB3\xaa\xdf\x1f+github.com/cosmos/cosmos-sdk\
    /types.DecCoins\xc8\xde\x1f\02\xd8\x0f\n\x05Query\x12\x98\x01\n\x06Param\
    s\x12/.cosmos.distribution.v1beta1.QueryParamsRequest\x1a0.cosmos.distri\
    bution.v1beta1.QueryParamsResponse\"+\x82\xd3\xe4\x93\x02%\x12#/cosmos/d\
    istribution/v1beta1/params\x12\x83\x02\n\x1bValidatorOutstandingRewards\
    \x12D.cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsReques\
    t\x1aE.cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsRespo\
    nse\"W\x82\xd3\xe4\x93\x02Q\x12O/cosmos/distribution/v1beta1/validators/\
    {validator_address}/outstanding_rewards\x12\xe2\x01\n\x13ValidatorCommis\
    sion\x12<.cosmos.distribution.v1beta1.QueryValidatorCommissionRequest\
    \x1a=.cosmos.distribution.v1beta1.QueryValidatorCommissionResponse\"N\
    \x82\xd3\xe4\x93\x02H\x12F/cosmos/distribution/v1beta1/validators/{valid\
    ator_address}/commission\x12\xd6\x01\n\x10ValidatorSlashes\x129.cosmos.d\
    istribution.v1beta1.QueryValidatorSlashesRequest\x1a:.cosmos.distributio\
    n.v1beta1.QueryValidatorSlashesResponse\"K\x82\xd3\xe4\x93\x02E\x12C/cos\
    mos/distribution/v1beta1/validators/{validator_address}/slashes\x12\xed\
    \x01\n\x11DelegationRewards\x12:.cosmos.distribution.v1beta1.QueryDelega\
    tionRewardsRequest\x1a;.cosmos.distribution.v1beta1.QueryDelegationRewar\
    dsResponse\"_\x82\xd3\xe4\x93\x02Y\x12W/cosmos/distribution/v1beta1/dele\
    gators/{delegator_address}/rewards/{validator_address}\x12\xe8\x01\n\x16\
    DelegationTotalRewards\x12?.cosmos.distribution.v1beta1.QueryDelegationT\
    otalRewardsRequest\x1a@.cosmos.distribution.v1beta1.QueryDelegationTotal\
    RewardsResponse\"K\x82\xd3\xe4\x93\x02E\x12C/cosmos/distribution/v1beta1\
    /delegators/{delegator_address}/rewards\x12\xe2\x01\n\x13DelegatorValida\
    tors\x12<.cosmos.distribution.v1beta1.QueryDelegatorValidatorsRequest\
    \x1a=.cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse\"N\
    \x82\xd3\xe4\x93\x02H\x12F/cosmos/distribution/v1beta1/delegators/{deleg\
    ator_address}/validators\x12\xf7\x01\n\x18DelegatorWithdrawAddress\x12A.\
    cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressRequest\x1aB.co\
    smos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse\"T\x82\
    \xd3\xe4\x93\x02N\x12L/cosmos/distribution/v1beta1/delegators/{delegator\
    _address}/withdraw_address\x12\xb5\x01\n\rCommunityPool\x126.cosmos.dist\
    ribution.v1beta1.QueryCommunityPoolRequest\x1a7.cosmos.distribution.v1be\
    ta1.QueryCommunityPoolResponse\"3\x82\xd3\xe4\x93\x02-\x12+/cosmos/distr\
    ibution/v1beta1/community_poolB3Z1github.com/cosmos/cosmos-sdk/x/distrib\
    ution/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
