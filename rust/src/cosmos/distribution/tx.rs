// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/distribution/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MsgSetWithdrawAddress {
    // message fields
    pub delegator_address: ::std::string::String,
    pub withdraw_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSetWithdrawAddress {
    fn default() -> &'a MsgSetWithdrawAddress {
        <MsgSetWithdrawAddress as ::protobuf::Message>::default_instance()
    }
}

impl MsgSetWithdrawAddress {
    pub fn new() -> MsgSetWithdrawAddress {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string withdraw_address = 2;


    pub fn get_withdraw_address(&self) -> &str {
        &self.withdraw_address
    }
    pub fn clear_withdraw_address(&mut self) {
        self.withdraw_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_withdraw_address(&mut self, v: ::std::string::String) {
        self.withdraw_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_withdraw_address(&mut self) -> &mut ::std::string::String {
        &mut self.withdraw_address
    }

    // Take field
    pub fn take_withdraw_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.withdraw_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgSetWithdrawAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.withdraw_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.withdraw_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.withdraw_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.withdraw_address.is_empty() {
            os.write_string(2, &self.withdraw_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSetWithdrawAddress {
        MsgSetWithdrawAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &MsgSetWithdrawAddress| { &m.delegator_address },
                |m: &mut MsgSetWithdrawAddress| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "withdraw_address",
                |m: &MsgSetWithdrawAddress| { &m.withdraw_address },
                |m: &mut MsgSetWithdrawAddress| { &mut m.withdraw_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgSetWithdrawAddress>(
                "MsgSetWithdrawAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgSetWithdrawAddress {
        static instance: ::protobuf::rt::LazyV2<MsgSetWithdrawAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSetWithdrawAddress::new)
    }
}

impl ::protobuf::Clear for MsgSetWithdrawAddress {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.withdraw_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgSetWithdrawAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSetWithdrawAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgSetWithdrawAddressResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSetWithdrawAddressResponse {
    fn default() -> &'a MsgSetWithdrawAddressResponse {
        <MsgSetWithdrawAddressResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSetWithdrawAddressResponse {
    pub fn new() -> MsgSetWithdrawAddressResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgSetWithdrawAddressResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSetWithdrawAddressResponse {
        MsgSetWithdrawAddressResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgSetWithdrawAddressResponse>(
                "MsgSetWithdrawAddressResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgSetWithdrawAddressResponse {
        static instance: ::protobuf::rt::LazyV2<MsgSetWithdrawAddressResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSetWithdrawAddressResponse::new)
    }
}

impl ::protobuf::Clear for MsgSetWithdrawAddressResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgSetWithdrawAddressResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSetWithdrawAddressResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgWithdrawDelegatorReward {
    // message fields
    pub delegator_address: ::std::string::String,
    pub validator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawDelegatorReward {
    fn default() -> &'a MsgWithdrawDelegatorReward {
        <MsgWithdrawDelegatorReward as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawDelegatorReward {
    pub fn new() -> MsgWithdrawDelegatorReward {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string validator_address = 2;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgWithdrawDelegatorReward {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgWithdrawDelegatorReward {
        MsgWithdrawDelegatorReward::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &MsgWithdrawDelegatorReward| { &m.delegator_address },
                |m: &mut MsgWithdrawDelegatorReward| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &MsgWithdrawDelegatorReward| { &m.validator_address },
                |m: &mut MsgWithdrawDelegatorReward| { &mut m.validator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgWithdrawDelegatorReward>(
                "MsgWithdrawDelegatorReward",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgWithdrawDelegatorReward {
        static instance: ::protobuf::rt::LazyV2<MsgWithdrawDelegatorReward> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgWithdrawDelegatorReward::new)
    }
}

impl ::protobuf::Clear for MsgWithdrawDelegatorReward {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgWithdrawDelegatorReward {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawDelegatorReward {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgWithdrawDelegatorRewardResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawDelegatorRewardResponse {
    fn default() -> &'a MsgWithdrawDelegatorRewardResponse {
        <MsgWithdrawDelegatorRewardResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawDelegatorRewardResponse {
    pub fn new() -> MsgWithdrawDelegatorRewardResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgWithdrawDelegatorRewardResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgWithdrawDelegatorRewardResponse {
        MsgWithdrawDelegatorRewardResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgWithdrawDelegatorRewardResponse>(
                "MsgWithdrawDelegatorRewardResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgWithdrawDelegatorRewardResponse {
        static instance: ::protobuf::rt::LazyV2<MsgWithdrawDelegatorRewardResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgWithdrawDelegatorRewardResponse::new)
    }
}

impl ::protobuf::Clear for MsgWithdrawDelegatorRewardResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgWithdrawDelegatorRewardResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawDelegatorRewardResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgWithdrawValidatorCommission {
    // message fields
    pub validator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawValidatorCommission {
    fn default() -> &'a MsgWithdrawValidatorCommission {
        <MsgWithdrawValidatorCommission as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawValidatorCommission {
    pub fn new() -> MsgWithdrawValidatorCommission {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgWithdrawValidatorCommission {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgWithdrawValidatorCommission {
        MsgWithdrawValidatorCommission::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &MsgWithdrawValidatorCommission| { &m.validator_address },
                |m: &mut MsgWithdrawValidatorCommission| { &mut m.validator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgWithdrawValidatorCommission>(
                "MsgWithdrawValidatorCommission",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgWithdrawValidatorCommission {
        static instance: ::protobuf::rt::LazyV2<MsgWithdrawValidatorCommission> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgWithdrawValidatorCommission::new)
    }
}

impl ::protobuf::Clear for MsgWithdrawValidatorCommission {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgWithdrawValidatorCommission {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawValidatorCommission {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgWithdrawValidatorCommissionResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawValidatorCommissionResponse {
    fn default() -> &'a MsgWithdrawValidatorCommissionResponse {
        <MsgWithdrawValidatorCommissionResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawValidatorCommissionResponse {
    pub fn new() -> MsgWithdrawValidatorCommissionResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgWithdrawValidatorCommissionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgWithdrawValidatorCommissionResponse {
        MsgWithdrawValidatorCommissionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgWithdrawValidatorCommissionResponse>(
                "MsgWithdrawValidatorCommissionResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgWithdrawValidatorCommissionResponse {
        static instance: ::protobuf::rt::LazyV2<MsgWithdrawValidatorCommissionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgWithdrawValidatorCommissionResponse::new)
    }
}

impl ::protobuf::Clear for MsgWithdrawValidatorCommissionResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgWithdrawValidatorCommissionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawValidatorCommissionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgFundCommunityPool {
    // message fields
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    pub depositor: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgFundCommunityPool {
    fn default() -> &'a MsgFundCommunityPool {
        <MsgFundCommunityPool as ::protobuf::Message>::default_instance()
    }
}

impl MsgFundCommunityPool {
    pub fn new() -> MsgFundCommunityPool {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 1;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }

    // string depositor = 2;


    pub fn get_depositor(&self) -> &str {
        &self.depositor
    }
    pub fn clear_depositor(&mut self) {
        self.depositor.clear();
    }

    // Param is passed by value, moved
    pub fn set_depositor(&mut self, v: ::std::string::String) {
        self.depositor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_depositor(&mut self) -> &mut ::std::string::String {
        &mut self.depositor
    }

    // Take field
    pub fn take_depositor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.depositor, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgFundCommunityPool {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.depositor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.depositor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.depositor);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.amount {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.depositor.is_empty() {
            os.write_string(2, &self.depositor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgFundCommunityPool {
        MsgFundCommunityPool::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &MsgFundCommunityPool| { &m.amount },
                |m: &mut MsgFundCommunityPool| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "depositor",
                |m: &MsgFundCommunityPool| { &m.depositor },
                |m: &mut MsgFundCommunityPool| { &mut m.depositor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgFundCommunityPool>(
                "MsgFundCommunityPool",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgFundCommunityPool {
        static instance: ::protobuf::rt::LazyV2<MsgFundCommunityPool> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgFundCommunityPool::new)
    }
}

impl ::protobuf::Clear for MsgFundCommunityPool {
    fn clear(&mut self) {
        self.amount.clear();
        self.depositor.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgFundCommunityPool {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgFundCommunityPool {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgFundCommunityPoolResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgFundCommunityPoolResponse {
    fn default() -> &'a MsgFundCommunityPoolResponse {
        <MsgFundCommunityPoolResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgFundCommunityPoolResponse {
    pub fn new() -> MsgFundCommunityPoolResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgFundCommunityPoolResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgFundCommunityPoolResponse {
        MsgFundCommunityPoolResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgFundCommunityPoolResponse>(
                "MsgFundCommunityPoolResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgFundCommunityPoolResponse {
        static instance: ::protobuf::rt::LazyV2<MsgFundCommunityPoolResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgFundCommunityPoolResponse::new)
    }
}

impl ::protobuf::Clear for MsgFundCommunityPoolResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgFundCommunityPoolResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgFundCommunityPoolResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$cosmos/distribution/v1beta1/tx.proto\x12\x1bcosmos.distribution.v1bet\
    a1\x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\
    \xb4\x01\n\x15MsgSetWithdrawAddress\x12I\n\x11delegator_address\x18\x01\
    \x20\x01(\tR\x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_ad\
    dress\"\x12F\n\x10withdraw_address\x18\x02\x20\x01(\tR\x0fwithdrawAddres\
    sB\x1b\xf2\xde\x1f\x17yaml:\"withdraw_address\":\x08\x88\xa0\x1f\0\xe8\
    \xa0\x1f\0\"\x1f\n\x1dMsgSetWithdrawAddressResponse\"\xbc\x01\n\x1aMsgWi\
    thdrawDelegatorReward\x12I\n\x11delegator_address\x18\x01\x20\x01(\tR\
    \x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12I\
    \n\x11validator_address\x18\x02\x20\x01(\tR\x10validatorAddressB\x1c\xf2\
    \xde\x1f\x18yaml:\"validator_address\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\
    \"$\n\"MsgWithdrawDelegatorRewardResponse\"u\n\x1eMsgWithdrawValidatorCo\
    mmission\x12I\n\x11validator_address\x18\x01\x20\x01(\tR\x10validatorAdd\
    ressB\x1c\xf2\xde\x1f\x18yaml:\"validator_address\":\x08\x88\xa0\x1f\0\
    \xe8\xa0\x1f\0\"(\n&MsgWithdrawValidatorCommissionResponse\"\xa3\x01\n\
    \x14MsgFundCommunityPool\x12c\n\x06amount\x18\x01\x20\x03(\x0b2\x19.cosm\
    os.base.v1beta1.CoinR\x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-s\
    dk/types.Coins\xc8\xde\x1f\0\x12\x1c\n\tdepositor\x18\x02\x20\x01(\tR\td\
    epositor:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x1e\n\x1cMsgFundCommunityPoo\
    lResponse2\xc8\x04\n\x03Msg\x12\x84\x01\n\x12SetWithdrawAddress\x122.cos\
    mos.distribution.v1beta1.MsgSetWithdrawAddress\x1a:.cosmos.distribution.\
    v1beta1.MsgSetWithdrawAddressResponse\x12\x93\x01\n\x17WithdrawDelegator\
    Reward\x127.cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward\x1a?.\
    cosmos.distribution.v1beta1.MsgWithdrawDelegatorRewardResponse\x12\x9f\
    \x01\n\x1bWithdrawValidatorCommission\x12;.cosmos.distribution.v1beta1.M\
    sgWithdrawValidatorCommission\x1aC.cosmos.distribution.v1beta1.MsgWithdr\
    awValidatorCommissionResponse\x12\x81\x01\n\x11FundCommunityPool\x121.co\
    smos.distribution.v1beta1.MsgFundCommunityPool\x1a9.cosmos.distribution.\
    v1beta1.MsgFundCommunityPoolResponseB7Z1github.com/cosmos/cosmos-sdk/x/d\
    istribution/types\xa8\xe2\x1e\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
