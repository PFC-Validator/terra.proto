// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/distribution/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct DelegatorWithdrawInfo {
    // message fields
    pub delegator_address: ::std::string::String,
    pub withdraw_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DelegatorWithdrawInfo {
    fn default() -> &'a DelegatorWithdrawInfo {
        <DelegatorWithdrawInfo as ::protobuf::Message>::default_instance()
    }
}

impl DelegatorWithdrawInfo {
    pub fn new() -> DelegatorWithdrawInfo {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string withdraw_address = 2;


    pub fn get_withdraw_address(&self) -> &str {
        &self.withdraw_address
    }
    pub fn clear_withdraw_address(&mut self) {
        self.withdraw_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_withdraw_address(&mut self, v: ::std::string::String) {
        self.withdraw_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_withdraw_address(&mut self) -> &mut ::std::string::String {
        &mut self.withdraw_address
    }

    // Take field
    pub fn take_withdraw_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.withdraw_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DelegatorWithdrawInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.withdraw_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.withdraw_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.withdraw_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.withdraw_address.is_empty() {
            os.write_string(2, &self.withdraw_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DelegatorWithdrawInfo {
        DelegatorWithdrawInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &DelegatorWithdrawInfo| { &m.delegator_address },
                |m: &mut DelegatorWithdrawInfo| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "withdraw_address",
                |m: &DelegatorWithdrawInfo| { &m.withdraw_address },
                |m: &mut DelegatorWithdrawInfo| { &mut m.withdraw_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DelegatorWithdrawInfo>(
                "DelegatorWithdrawInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DelegatorWithdrawInfo {
        static instance: ::protobuf::rt::LazyV2<DelegatorWithdrawInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DelegatorWithdrawInfo::new)
    }
}

impl ::protobuf::Clear for DelegatorWithdrawInfo {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.withdraw_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DelegatorWithdrawInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelegatorWithdrawInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorOutstandingRewardsRecord {
    // message fields
    pub validator_address: ::std::string::String,
    pub outstanding_rewards: ::protobuf::RepeatedField<super::coin::DecCoin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorOutstandingRewardsRecord {
    fn default() -> &'a ValidatorOutstandingRewardsRecord {
        <ValidatorOutstandingRewardsRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorOutstandingRewardsRecord {
    pub fn new() -> ValidatorOutstandingRewardsRecord {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.DecCoin outstanding_rewards = 2;


    pub fn get_outstanding_rewards(&self) -> &[super::coin::DecCoin] {
        &self.outstanding_rewards
    }
    pub fn clear_outstanding_rewards(&mut self) {
        self.outstanding_rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_outstanding_rewards(&mut self, v: ::protobuf::RepeatedField<super::coin::DecCoin>) {
        self.outstanding_rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outstanding_rewards(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::DecCoin> {
        &mut self.outstanding_rewards
    }

    // Take field
    pub fn take_outstanding_rewards(&mut self) -> ::protobuf::RepeatedField<super::coin::DecCoin> {
        ::std::mem::replace(&mut self.outstanding_rewards, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorOutstandingRewardsRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.outstanding_rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outstanding_rewards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        for value in &self.outstanding_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        for v in &self.outstanding_rewards {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorOutstandingRewardsRecord {
        ValidatorOutstandingRewardsRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &ValidatorOutstandingRewardsRecord| { &m.validator_address },
                |m: &mut ValidatorOutstandingRewardsRecord| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::DecCoin>>(
                "outstanding_rewards",
                |m: &ValidatorOutstandingRewardsRecord| { &m.outstanding_rewards },
                |m: &mut ValidatorOutstandingRewardsRecord| { &mut m.outstanding_rewards },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorOutstandingRewardsRecord>(
                "ValidatorOutstandingRewardsRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorOutstandingRewardsRecord {
        static instance: ::protobuf::rt::LazyV2<ValidatorOutstandingRewardsRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorOutstandingRewardsRecord::new)
    }
}

impl ::protobuf::Clear for ValidatorOutstandingRewardsRecord {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.outstanding_rewards.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorOutstandingRewardsRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorOutstandingRewardsRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorAccumulatedCommissionRecord {
    // message fields
    pub validator_address: ::std::string::String,
    pub accumulated: ::protobuf::SingularPtrField<super::distribution::ValidatorAccumulatedCommission>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorAccumulatedCommissionRecord {
    fn default() -> &'a ValidatorAccumulatedCommissionRecord {
        <ValidatorAccumulatedCommissionRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorAccumulatedCommissionRecord {
    pub fn new() -> ValidatorAccumulatedCommissionRecord {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // .cosmos.distribution.v1beta1.ValidatorAccumulatedCommission accumulated = 2;


    pub fn get_accumulated(&self) -> &super::distribution::ValidatorAccumulatedCommission {
        self.accumulated.as_ref().unwrap_or_else(|| <super::distribution::ValidatorAccumulatedCommission as ::protobuf::Message>::default_instance())
    }
    pub fn clear_accumulated(&mut self) {
        self.accumulated.clear();
    }

    pub fn has_accumulated(&self) -> bool {
        self.accumulated.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accumulated(&mut self, v: super::distribution::ValidatorAccumulatedCommission) {
        self.accumulated = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accumulated(&mut self) -> &mut super::distribution::ValidatorAccumulatedCommission {
        if self.accumulated.is_none() {
            self.accumulated.set_default();
        }
        self.accumulated.as_mut().unwrap()
    }

    // Take field
    pub fn take_accumulated(&mut self) -> super::distribution::ValidatorAccumulatedCommission {
        self.accumulated.take().unwrap_or_else(|| super::distribution::ValidatorAccumulatedCommission::new())
    }
}

impl ::protobuf::Message for ValidatorAccumulatedCommissionRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.accumulated {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accumulated)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if let Some(ref v) = self.accumulated.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if let Some(ref v) = self.accumulated.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorAccumulatedCommissionRecord {
        ValidatorAccumulatedCommissionRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &ValidatorAccumulatedCommissionRecord| { &m.validator_address },
                |m: &mut ValidatorAccumulatedCommissionRecord| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::ValidatorAccumulatedCommission>>(
                "accumulated",
                |m: &ValidatorAccumulatedCommissionRecord| { &m.accumulated },
                |m: &mut ValidatorAccumulatedCommissionRecord| { &mut m.accumulated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorAccumulatedCommissionRecord>(
                "ValidatorAccumulatedCommissionRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorAccumulatedCommissionRecord {
        static instance: ::protobuf::rt::LazyV2<ValidatorAccumulatedCommissionRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorAccumulatedCommissionRecord::new)
    }
}

impl ::protobuf::Clear for ValidatorAccumulatedCommissionRecord {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.accumulated.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorAccumulatedCommissionRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorAccumulatedCommissionRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorHistoricalRewardsRecord {
    // message fields
    pub validator_address: ::std::string::String,
    pub period: u64,
    pub rewards: ::protobuf::SingularPtrField<super::distribution::ValidatorHistoricalRewards>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorHistoricalRewardsRecord {
    fn default() -> &'a ValidatorHistoricalRewardsRecord {
        <ValidatorHistoricalRewardsRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorHistoricalRewardsRecord {
    pub fn new() -> ValidatorHistoricalRewardsRecord {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // uint64 period = 2;


    pub fn get_period(&self) -> u64 {
        self.period
    }
    pub fn clear_period(&mut self) {
        self.period = 0;
    }

    // Param is passed by value, moved
    pub fn set_period(&mut self, v: u64) {
        self.period = v;
    }

    // .cosmos.distribution.v1beta1.ValidatorHistoricalRewards rewards = 3;


    pub fn get_rewards(&self) -> &super::distribution::ValidatorHistoricalRewards {
        self.rewards.as_ref().unwrap_or_else(|| <super::distribution::ValidatorHistoricalRewards as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    pub fn has_rewards(&self) -> bool {
        self.rewards.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: super::distribution::ValidatorHistoricalRewards) {
        self.rewards = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rewards(&mut self) -> &mut super::distribution::ValidatorHistoricalRewards {
        if self.rewards.is_none() {
            self.rewards.set_default();
        }
        self.rewards.as_mut().unwrap()
    }

    // Take field
    pub fn take_rewards(&mut self) -> super::distribution::ValidatorHistoricalRewards {
        self.rewards.take().unwrap_or_else(|| super::distribution::ValidatorHistoricalRewards::new())
    }
}

impl ::protobuf::Message for ValidatorHistoricalRewardsRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.period = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rewards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if self.period != 0 {
            my_size += ::protobuf::rt::value_size(2, self.period, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.rewards.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if self.period != 0 {
            os.write_uint64(2, self.period)?;
        }
        if let Some(ref v) = self.rewards.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorHistoricalRewardsRecord {
        ValidatorHistoricalRewardsRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &ValidatorHistoricalRewardsRecord| { &m.validator_address },
                |m: &mut ValidatorHistoricalRewardsRecord| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "period",
                |m: &ValidatorHistoricalRewardsRecord| { &m.period },
                |m: &mut ValidatorHistoricalRewardsRecord| { &mut m.period },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::ValidatorHistoricalRewards>>(
                "rewards",
                |m: &ValidatorHistoricalRewardsRecord| { &m.rewards },
                |m: &mut ValidatorHistoricalRewardsRecord| { &mut m.rewards },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorHistoricalRewardsRecord>(
                "ValidatorHistoricalRewardsRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorHistoricalRewardsRecord {
        static instance: ::protobuf::rt::LazyV2<ValidatorHistoricalRewardsRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorHistoricalRewardsRecord::new)
    }
}

impl ::protobuf::Clear for ValidatorHistoricalRewardsRecord {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.period = 0;
        self.rewards.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorHistoricalRewardsRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorHistoricalRewardsRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorCurrentRewardsRecord {
    // message fields
    pub validator_address: ::std::string::String,
    pub rewards: ::protobuf::SingularPtrField<super::distribution::ValidatorCurrentRewards>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorCurrentRewardsRecord {
    fn default() -> &'a ValidatorCurrentRewardsRecord {
        <ValidatorCurrentRewardsRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorCurrentRewardsRecord {
    pub fn new() -> ValidatorCurrentRewardsRecord {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // .cosmos.distribution.v1beta1.ValidatorCurrentRewards rewards = 2;


    pub fn get_rewards(&self) -> &super::distribution::ValidatorCurrentRewards {
        self.rewards.as_ref().unwrap_or_else(|| <super::distribution::ValidatorCurrentRewards as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rewards(&mut self) {
        self.rewards.clear();
    }

    pub fn has_rewards(&self) -> bool {
        self.rewards.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rewards(&mut self, v: super::distribution::ValidatorCurrentRewards) {
        self.rewards = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rewards(&mut self) -> &mut super::distribution::ValidatorCurrentRewards {
        if self.rewards.is_none() {
            self.rewards.set_default();
        }
        self.rewards.as_mut().unwrap()
    }

    // Take field
    pub fn take_rewards(&mut self) -> super::distribution::ValidatorCurrentRewards {
        self.rewards.take().unwrap_or_else(|| super::distribution::ValidatorCurrentRewards::new())
    }
}

impl ::protobuf::Message for ValidatorCurrentRewardsRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rewards)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if let Some(ref v) = self.rewards.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if let Some(ref v) = self.rewards.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorCurrentRewardsRecord {
        ValidatorCurrentRewardsRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &ValidatorCurrentRewardsRecord| { &m.validator_address },
                |m: &mut ValidatorCurrentRewardsRecord| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::ValidatorCurrentRewards>>(
                "rewards",
                |m: &ValidatorCurrentRewardsRecord| { &m.rewards },
                |m: &mut ValidatorCurrentRewardsRecord| { &mut m.rewards },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorCurrentRewardsRecord>(
                "ValidatorCurrentRewardsRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorCurrentRewardsRecord {
        static instance: ::protobuf::rt::LazyV2<ValidatorCurrentRewardsRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorCurrentRewardsRecord::new)
    }
}

impl ::protobuf::Clear for ValidatorCurrentRewardsRecord {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.rewards.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorCurrentRewardsRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorCurrentRewardsRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DelegatorStartingInfoRecord {
    // message fields
    pub delegator_address: ::std::string::String,
    pub validator_address: ::std::string::String,
    pub starting_info: ::protobuf::SingularPtrField<super::distribution::DelegatorStartingInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DelegatorStartingInfoRecord {
    fn default() -> &'a DelegatorStartingInfoRecord {
        <DelegatorStartingInfoRecord as ::protobuf::Message>::default_instance()
    }
}

impl DelegatorStartingInfoRecord {
    pub fn new() -> DelegatorStartingInfoRecord {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string validator_address = 2;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // .cosmos.distribution.v1beta1.DelegatorStartingInfo starting_info = 3;


    pub fn get_starting_info(&self) -> &super::distribution::DelegatorStartingInfo {
        self.starting_info.as_ref().unwrap_or_else(|| <super::distribution::DelegatorStartingInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_starting_info(&mut self) {
        self.starting_info.clear();
    }

    pub fn has_starting_info(&self) -> bool {
        self.starting_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_starting_info(&mut self, v: super::distribution::DelegatorStartingInfo) {
        self.starting_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_starting_info(&mut self) -> &mut super::distribution::DelegatorStartingInfo {
        if self.starting_info.is_none() {
            self.starting_info.set_default();
        }
        self.starting_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_starting_info(&mut self) -> super::distribution::DelegatorStartingInfo {
        self.starting_info.take().unwrap_or_else(|| super::distribution::DelegatorStartingInfo::new())
    }
}

impl ::protobuf::Message for DelegatorStartingInfoRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.starting_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.starting_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if let Some(ref v) = self.starting_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if let Some(ref v) = self.starting_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DelegatorStartingInfoRecord {
        DelegatorStartingInfoRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &DelegatorStartingInfoRecord| { &m.delegator_address },
                |m: &mut DelegatorStartingInfoRecord| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &DelegatorStartingInfoRecord| { &m.validator_address },
                |m: &mut DelegatorStartingInfoRecord| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::DelegatorStartingInfo>>(
                "starting_info",
                |m: &DelegatorStartingInfoRecord| { &m.starting_info },
                |m: &mut DelegatorStartingInfoRecord| { &mut m.starting_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DelegatorStartingInfoRecord>(
                "DelegatorStartingInfoRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DelegatorStartingInfoRecord {
        static instance: ::protobuf::rt::LazyV2<DelegatorStartingInfoRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DelegatorStartingInfoRecord::new)
    }
}

impl ::protobuf::Clear for DelegatorStartingInfoRecord {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.starting_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DelegatorStartingInfoRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelegatorStartingInfoRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorSlashEventRecord {
    // message fields
    pub validator_address: ::std::string::String,
    pub height: u64,
    pub period: u64,
    pub validator_slash_event: ::protobuf::SingularPtrField<super::distribution::ValidatorSlashEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorSlashEventRecord {
    fn default() -> &'a ValidatorSlashEventRecord {
        <ValidatorSlashEventRecord as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorSlashEventRecord {
    pub fn new() -> ValidatorSlashEventRecord {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // uint64 height = 2;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // uint64 period = 3;


    pub fn get_period(&self) -> u64 {
        self.period
    }
    pub fn clear_period(&mut self) {
        self.period = 0;
    }

    // Param is passed by value, moved
    pub fn set_period(&mut self, v: u64) {
        self.period = v;
    }

    // .cosmos.distribution.v1beta1.ValidatorSlashEvent validator_slash_event = 4;


    pub fn get_validator_slash_event(&self) -> &super::distribution::ValidatorSlashEvent {
        self.validator_slash_event.as_ref().unwrap_or_else(|| <super::distribution::ValidatorSlashEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_validator_slash_event(&mut self) {
        self.validator_slash_event.clear();
    }

    pub fn has_validator_slash_event(&self) -> bool {
        self.validator_slash_event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validator_slash_event(&mut self, v: super::distribution::ValidatorSlashEvent) {
        self.validator_slash_event = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_slash_event(&mut self) -> &mut super::distribution::ValidatorSlashEvent {
        if self.validator_slash_event.is_none() {
            self.validator_slash_event.set_default();
        }
        self.validator_slash_event.as_mut().unwrap()
    }

    // Take field
    pub fn take_validator_slash_event(&mut self) -> super::distribution::ValidatorSlashEvent {
        self.validator_slash_event.take().unwrap_or_else(|| super::distribution::ValidatorSlashEvent::new())
    }
}

impl ::protobuf::Message for ValidatorSlashEventRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.validator_slash_event {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.period = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validator_slash_event)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.period != 0 {
            my_size += ::protobuf::rt::value_size(3, self.period, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.validator_slash_event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        if self.period != 0 {
            os.write_uint64(3, self.period)?;
        }
        if let Some(ref v) = self.validator_slash_event.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorSlashEventRecord {
        ValidatorSlashEventRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &ValidatorSlashEventRecord| { &m.validator_address },
                |m: &mut ValidatorSlashEventRecord| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &ValidatorSlashEventRecord| { &m.height },
                |m: &mut ValidatorSlashEventRecord| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "period",
                |m: &ValidatorSlashEventRecord| { &m.period },
                |m: &mut ValidatorSlashEventRecord| { &mut m.period },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::ValidatorSlashEvent>>(
                "validator_slash_event",
                |m: &ValidatorSlashEventRecord| { &m.validator_slash_event },
                |m: &mut ValidatorSlashEventRecord| { &mut m.validator_slash_event },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorSlashEventRecord>(
                "ValidatorSlashEventRecord",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorSlashEventRecord {
        static instance: ::protobuf::rt::LazyV2<ValidatorSlashEventRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorSlashEventRecord::new)
    }
}

impl ::protobuf::Clear for ValidatorSlashEventRecord {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.height = 0;
        self.period = 0;
        self.validator_slash_event.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorSlashEventRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorSlashEventRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::distribution::Params>,
    pub fee_pool: ::protobuf::SingularPtrField<super::distribution::FeePool>,
    pub delegator_withdraw_infos: ::protobuf::RepeatedField<DelegatorWithdrawInfo>,
    pub previous_proposer: ::std::string::String,
    pub outstanding_rewards: ::protobuf::RepeatedField<ValidatorOutstandingRewardsRecord>,
    pub validator_accumulated_commissions: ::protobuf::RepeatedField<ValidatorAccumulatedCommissionRecord>,
    pub validator_historical_rewards: ::protobuf::RepeatedField<ValidatorHistoricalRewardsRecord>,
    pub validator_current_rewards: ::protobuf::RepeatedField<ValidatorCurrentRewardsRecord>,
    pub delegator_starting_infos: ::protobuf::RepeatedField<DelegatorStartingInfoRecord>,
    pub validator_slash_events: ::protobuf::RepeatedField<ValidatorSlashEventRecord>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .cosmos.distribution.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::distribution::Params {
        self.params.as_ref().unwrap_or_else(|| <super::distribution::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::distribution::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::distribution::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::distribution::Params {
        self.params.take().unwrap_or_else(|| super::distribution::Params::new())
    }

    // .cosmos.distribution.v1beta1.FeePool fee_pool = 2;


    pub fn get_fee_pool(&self) -> &super::distribution::FeePool {
        self.fee_pool.as_ref().unwrap_or_else(|| <super::distribution::FeePool as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fee_pool(&mut self) {
        self.fee_pool.clear();
    }

    pub fn has_fee_pool(&self) -> bool {
        self.fee_pool.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee_pool(&mut self, v: super::distribution::FeePool) {
        self.fee_pool = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_pool(&mut self) -> &mut super::distribution::FeePool {
        if self.fee_pool.is_none() {
            self.fee_pool.set_default();
        }
        self.fee_pool.as_mut().unwrap()
    }

    // Take field
    pub fn take_fee_pool(&mut self) -> super::distribution::FeePool {
        self.fee_pool.take().unwrap_or_else(|| super::distribution::FeePool::new())
    }

    // repeated .cosmos.distribution.v1beta1.DelegatorWithdrawInfo delegator_withdraw_infos = 3;


    pub fn get_delegator_withdraw_infos(&self) -> &[DelegatorWithdrawInfo] {
        &self.delegator_withdraw_infos
    }
    pub fn clear_delegator_withdraw_infos(&mut self) {
        self.delegator_withdraw_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_withdraw_infos(&mut self, v: ::protobuf::RepeatedField<DelegatorWithdrawInfo>) {
        self.delegator_withdraw_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_delegator_withdraw_infos(&mut self) -> &mut ::protobuf::RepeatedField<DelegatorWithdrawInfo> {
        &mut self.delegator_withdraw_infos
    }

    // Take field
    pub fn take_delegator_withdraw_infos(&mut self) -> ::protobuf::RepeatedField<DelegatorWithdrawInfo> {
        ::std::mem::replace(&mut self.delegator_withdraw_infos, ::protobuf::RepeatedField::new())
    }

    // string previous_proposer = 4;


    pub fn get_previous_proposer(&self) -> &str {
        &self.previous_proposer
    }
    pub fn clear_previous_proposer(&mut self) {
        self.previous_proposer.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_proposer(&mut self, v: ::std::string::String) {
        self.previous_proposer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_proposer(&mut self) -> &mut ::std::string::String {
        &mut self.previous_proposer
    }

    // Take field
    pub fn take_previous_proposer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.previous_proposer, ::std::string::String::new())
    }

    // repeated .cosmos.distribution.v1beta1.ValidatorOutstandingRewardsRecord outstanding_rewards = 5;


    pub fn get_outstanding_rewards(&self) -> &[ValidatorOutstandingRewardsRecord] {
        &self.outstanding_rewards
    }
    pub fn clear_outstanding_rewards(&mut self) {
        self.outstanding_rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_outstanding_rewards(&mut self, v: ::protobuf::RepeatedField<ValidatorOutstandingRewardsRecord>) {
        self.outstanding_rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outstanding_rewards(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorOutstandingRewardsRecord> {
        &mut self.outstanding_rewards
    }

    // Take field
    pub fn take_outstanding_rewards(&mut self) -> ::protobuf::RepeatedField<ValidatorOutstandingRewardsRecord> {
        ::std::mem::replace(&mut self.outstanding_rewards, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.distribution.v1beta1.ValidatorAccumulatedCommissionRecord validator_accumulated_commissions = 6;


    pub fn get_validator_accumulated_commissions(&self) -> &[ValidatorAccumulatedCommissionRecord] {
        &self.validator_accumulated_commissions
    }
    pub fn clear_validator_accumulated_commissions(&mut self) {
        self.validator_accumulated_commissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_accumulated_commissions(&mut self, v: ::protobuf::RepeatedField<ValidatorAccumulatedCommissionRecord>) {
        self.validator_accumulated_commissions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validator_accumulated_commissions(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorAccumulatedCommissionRecord> {
        &mut self.validator_accumulated_commissions
    }

    // Take field
    pub fn take_validator_accumulated_commissions(&mut self) -> ::protobuf::RepeatedField<ValidatorAccumulatedCommissionRecord> {
        ::std::mem::replace(&mut self.validator_accumulated_commissions, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.distribution.v1beta1.ValidatorHistoricalRewardsRecord validator_historical_rewards = 7;


    pub fn get_validator_historical_rewards(&self) -> &[ValidatorHistoricalRewardsRecord] {
        &self.validator_historical_rewards
    }
    pub fn clear_validator_historical_rewards(&mut self) {
        self.validator_historical_rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_historical_rewards(&mut self, v: ::protobuf::RepeatedField<ValidatorHistoricalRewardsRecord>) {
        self.validator_historical_rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validator_historical_rewards(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorHistoricalRewardsRecord> {
        &mut self.validator_historical_rewards
    }

    // Take field
    pub fn take_validator_historical_rewards(&mut self) -> ::protobuf::RepeatedField<ValidatorHistoricalRewardsRecord> {
        ::std::mem::replace(&mut self.validator_historical_rewards, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecord validator_current_rewards = 8;


    pub fn get_validator_current_rewards(&self) -> &[ValidatorCurrentRewardsRecord] {
        &self.validator_current_rewards
    }
    pub fn clear_validator_current_rewards(&mut self) {
        self.validator_current_rewards.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_current_rewards(&mut self, v: ::protobuf::RepeatedField<ValidatorCurrentRewardsRecord>) {
        self.validator_current_rewards = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validator_current_rewards(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorCurrentRewardsRecord> {
        &mut self.validator_current_rewards
    }

    // Take field
    pub fn take_validator_current_rewards(&mut self) -> ::protobuf::RepeatedField<ValidatorCurrentRewardsRecord> {
        ::std::mem::replace(&mut self.validator_current_rewards, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.distribution.v1beta1.DelegatorStartingInfoRecord delegator_starting_infos = 9;


    pub fn get_delegator_starting_infos(&self) -> &[DelegatorStartingInfoRecord] {
        &self.delegator_starting_infos
    }
    pub fn clear_delegator_starting_infos(&mut self) {
        self.delegator_starting_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_starting_infos(&mut self, v: ::protobuf::RepeatedField<DelegatorStartingInfoRecord>) {
        self.delegator_starting_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_delegator_starting_infos(&mut self) -> &mut ::protobuf::RepeatedField<DelegatorStartingInfoRecord> {
        &mut self.delegator_starting_infos
    }

    // Take field
    pub fn take_delegator_starting_infos(&mut self) -> ::protobuf::RepeatedField<DelegatorStartingInfoRecord> {
        ::std::mem::replace(&mut self.delegator_starting_infos, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.distribution.v1beta1.ValidatorSlashEventRecord validator_slash_events = 10;


    pub fn get_validator_slash_events(&self) -> &[ValidatorSlashEventRecord] {
        &self.validator_slash_events
    }
    pub fn clear_validator_slash_events(&mut self) {
        self.validator_slash_events.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_slash_events(&mut self, v: ::protobuf::RepeatedField<ValidatorSlashEventRecord>) {
        self.validator_slash_events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validator_slash_events(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorSlashEventRecord> {
        &mut self.validator_slash_events
    }

    // Take field
    pub fn take_validator_slash_events(&mut self) -> ::protobuf::RepeatedField<ValidatorSlashEventRecord> {
        ::std::mem::replace(&mut self.validator_slash_events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.fee_pool {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delegator_withdraw_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outstanding_rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validator_accumulated_commissions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validator_historical_rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validator_current_rewards {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delegator_starting_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validator_slash_events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fee_pool)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.delegator_withdraw_infos)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.previous_proposer)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.outstanding_rewards)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validator_accumulated_commissions)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validator_historical_rewards)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validator_current_rewards)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.delegator_starting_infos)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validator_slash_events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.fee_pool.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.delegator_withdraw_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.previous_proposer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.previous_proposer);
        }
        for value in &self.outstanding_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.validator_accumulated_commissions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.validator_historical_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.validator_current_rewards {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.delegator_starting_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.validator_slash_events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.fee_pool.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.delegator_withdraw_infos {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.previous_proposer.is_empty() {
            os.write_string(4, &self.previous_proposer)?;
        }
        for v in &self.outstanding_rewards {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.validator_accumulated_commissions {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.validator_historical_rewards {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.validator_current_rewards {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.delegator_starting_infos {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.validator_slash_events {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::Params>>(
                "params",
                |m: &GenesisState| { &m.params },
                |m: &mut GenesisState| { &mut m.params },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::distribution::FeePool>>(
                "fee_pool",
                |m: &GenesisState| { &m.fee_pool },
                |m: &mut GenesisState| { &mut m.fee_pool },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DelegatorWithdrawInfo>>(
                "delegator_withdraw_infos",
                |m: &GenesisState| { &m.delegator_withdraw_infos },
                |m: &mut GenesisState| { &mut m.delegator_withdraw_infos },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "previous_proposer",
                |m: &GenesisState| { &m.previous_proposer },
                |m: &mut GenesisState| { &mut m.previous_proposer },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorOutstandingRewardsRecord>>(
                "outstanding_rewards",
                |m: &GenesisState| { &m.outstanding_rewards },
                |m: &mut GenesisState| { &mut m.outstanding_rewards },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorAccumulatedCommissionRecord>>(
                "validator_accumulated_commissions",
                |m: &GenesisState| { &m.validator_accumulated_commissions },
                |m: &mut GenesisState| { &mut m.validator_accumulated_commissions },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorHistoricalRewardsRecord>>(
                "validator_historical_rewards",
                |m: &GenesisState| { &m.validator_historical_rewards },
                |m: &mut GenesisState| { &mut m.validator_historical_rewards },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorCurrentRewardsRecord>>(
                "validator_current_rewards",
                |m: &GenesisState| { &m.validator_current_rewards },
                |m: &mut GenesisState| { &mut m.validator_current_rewards },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DelegatorStartingInfoRecord>>(
                "delegator_starting_infos",
                |m: &GenesisState| { &m.delegator_starting_infos },
                |m: &mut GenesisState| { &mut m.delegator_starting_infos },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorSlashEventRecord>>(
                "validator_slash_events",
                |m: &GenesisState| { &m.validator_slash_events },
                |m: &mut GenesisState| { &mut m.validator_slash_events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenesisState>(
                "GenesisState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.fee_pool.clear();
        self.delegator_withdraw_infos.clear();
        self.previous_proposer.clear();
        self.outstanding_rewards.clear();
        self.validator_accumulated_commissions.clear();
        self.validator_historical_rewards.clear();
        self.validator_current_rewards.clear();
        self.delegator_starting_infos.clear();
        self.validator_slash_events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)cosmos/distribution/v1beta1/genesis.proto\x12\x1bcosmos.distribution.\
    v1beta1\x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.prot\
    o\x1a.cosmos/distribution/v1beta1/distribution.proto\"\xb4\x01\n\x15Dele\
    gatorWithdrawInfo\x12I\n\x11delegator_address\x18\x01\x20\x01(\tR\x10del\
    egatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12F\n\x10w\
    ithdraw_address\x18\x02\x20\x01(\tR\x0fwithdrawAddressB\x1b\xf2\xde\x1f\
    \x17yaml:\"withdraw_address\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x9b\x02\
    \n!ValidatorOutstandingRewardsRecord\x12I\n\x11validator_address\x18\x01\
    \x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_ad\
    dress\"\x12\xa0\x01\n\x13outstanding_rewards\x18\x02\x20\x03(\x0b2\x1c.c\
    osmos.base.v1beta1.DecCoinR\x12outstandingRewardsBQ\xaa\xdf\x1f+github.c\
    om/cosmos/cosmos-sdk/types.DecCoins\xc8\xde\x1f\0\xf2\xde\x1f\x1ayaml:\"\
    outstanding_rewards\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xf6\x01\n$Valid\
    atorAccumulatedCommissionRecord\x12I\n\x11validator_address\x18\x01\x20\
    \x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_addres\
    s\"\x12y\n\x0baccumulated\x18\x02\x20\x01(\x0b2;.cosmos.distribution.v1b\
    eta1.ValidatorAccumulatedCommissionR\x0baccumulatedB\x1a\xf2\xde\x1f\x12\
    yaml:\"accumulated\"\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\
    \xfa\x01\n\x20ValidatorHistoricalRewardsRecord\x12I\n\x11validator_addre\
    ss\x18\x01\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"va\
    lidator_address\"\x12\x16\n\x06period\x18\x02\x20\x01(\x04R\x06period\
    \x12i\n\x07rewards\x18\x03\x20\x01(\x0b27.cosmos.distribution.v1beta1.Va\
    lidatorHistoricalRewardsR\x07rewardsB\x16\xf2\xde\x1f\x0eyaml:\"rewards\
    \"\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xdc\x01\n\x1dValidat\
    orCurrentRewardsRecord\x12I\n\x11validator_address\x18\x01\x20\x01(\tR\
    \x10validatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_address\"\x12f\
    \n\x07rewards\x18\x02\x20\x01(\x0b24.cosmos.distribution.v1beta1.Validat\
    orCurrentRewardsR\x07rewardsB\x16\xf2\xde\x1f\x0eyaml:\"rewards\"\xc8\
    \xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\xb4\x02\n\x1bDelegatorStar\
    tingInfoRecord\x12I\n\x11delegator_address\x18\x01\x20\x01(\tR\x10delega\
    torAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12I\n\x11vali\
    dator_address\x18\x02\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\
    \x18yaml:\"validator_address\"\x12u\n\rstarting_info\x18\x03\x20\x01(\
    \x0b22.cosmos.distribution.v1beta1.DelegatorStartingInfoR\x0cstartingInf\
    oB\x1c\xf2\xde\x1f\x14yaml:\"starting_info\"\xc8\xde\x1f\0:\x08\x88\xa0\
    \x1f\0\xe8\xa0\x1f\0\"\x9c\x02\n\x19ValidatorSlashEventRecord\x12I\n\x11\
    validator_address\x18\x01\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\
    \x1f\x18yaml:\"validator_address\"\x12\x16\n\x06height\x18\x02\x20\x01(\
    \x04R\x06height\x12\x16\n\x06period\x18\x03\x20\x01(\x04R\x06period\x12z\
    \n\x15validator_slash_event\x18\x04\x20\x01(\x0b20.cosmos.distribution.v\
    1beta1.ValidatorSlashEventR\x13validatorSlashEventB\x14\xf2\xde\x1f\x0cy\
    aml:\"event\"\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x87\x0b\n\
    \x0cGenesisState\x12R\n\x06params\x18\x01\x20\x01(\x0b2#.cosmos.distribu\
    tion.v1beta1.ParamsR\x06paramsB\x15\xf2\xde\x1f\ryaml:\"params\"\xc8\xde\
    \x1f\0\x12X\n\x08fee_pool\x18\x02\x20\x01(\x0b2$.cosmos.distribution.v1b\
    eta1.FeePoolR\x07feePoolB\x17\xf2\xde\x1f\x0fyaml:\"fee_pool\"\xc8\xde\
    \x1f\0\x12\x95\x01\n\x18delegator_withdraw_infos\x18\x03\x20\x03(\x0b22.\
    cosmos.distribution.v1beta1.DelegatorWithdrawInfoR\x16delegatorWithdrawI\
    nfosB'\xf2\xde\x1f\x1fyaml:\"delegator_withdraw_infos\"\xc8\xde\x1f\0\
    \x12I\n\x11previous_proposer\x18\x04\x20\x01(\tR\x10previousProposerB\
    \x1c\xf2\xde\x1f\x18yaml:\"previous_proposer\"\x12\x93\x01\n\x13outstand\
    ing_rewards\x18\x05\x20\x03(\x0b2>.cosmos.distribution.v1beta1.Validator\
    OutstandingRewardsRecordR\x12outstandingRewardsB\"\xf2\xde\x1f\x1ayaml:\
    \"outstanding_rewards\"\xc8\xde\x1f\0\x12\xbf\x01\n!validator_accumulate\
    d_commissions\x18\x06\x20\x03(\x0b2A.cosmos.distribution.v1beta1.Validat\
    orAccumulatedCommissionRecordR\x1fvalidatorAccumulatedCommissionsB0\xf2\
    \xde\x1f(yaml:\"validator_accumulated_commissions\"\xc8\xde\x1f\0\x12\
    \xac\x01\n\x1cvalidator_historical_rewards\x18\x07\x20\x03(\x0b2=.cosmos\
    .distribution.v1beta1.ValidatorHistoricalRewardsRecordR\x1avalidatorHist\
    oricalRewardsB+\xf2\xde\x1f#yaml:\"validator_historical_rewards\"\xc8\
    \xde\x1f\0\x12\xa0\x01\n\x19validator_current_rewards\x18\x08\x20\x03(\
    \x0b2:.cosmos.distribution.v1beta1.ValidatorCurrentRewardsRecordR\x17val\
    idatorCurrentRewardsB(\xf2\xde\x1f\x20yaml:\"validator_current_rewards\"\
    \xc8\xde\x1f\0\x12\x9b\x01\n\x18delegator_starting_infos\x18\t\x20\x03(\
    \x0b28.cosmos.distribution.v1beta1.DelegatorStartingInfoRecordR\x16deleg\
    atorStartingInfosB'\xf2\xde\x1f\x1fyaml:\"delegator_starting_infos\"\xc8\
    \xde\x1f\0\x12\x93\x01\n\x16validator_slash_events\x18\n\x20\x03(\x0b26.\
    cosmos.distribution.v1beta1.ValidatorSlashEventRecordR\x14validatorSlash\
    EventsB%\xf2\xde\x1f\x1dyaml:\"validator_slash_events\"\xc8\xde\x1f\0:\
    \x08\x88\xa0\x1f\0\xe8\xa0\x1f\0B7Z1github.com/cosmos/cosmos-sdk/x/distr\
    ibution/types\xa8\xe2\x1e\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
