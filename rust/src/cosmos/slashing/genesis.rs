// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/slashing/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::slashing::Params>,
    pub signing_infos: ::protobuf::RepeatedField<SigningInfo>,
    pub missed_blocks: ::protobuf::RepeatedField<ValidatorMissedBlocks>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .cosmos.slashing.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::slashing::Params {
        self.params.as_ref().unwrap_or_else(|| <super::slashing::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::slashing::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::slashing::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::slashing::Params {
        self.params.take().unwrap_or_else(|| super::slashing::Params::new())
    }

    // repeated .cosmos.slashing.v1beta1.SigningInfo signing_infos = 2;


    pub fn get_signing_infos(&self) -> &[SigningInfo] {
        &self.signing_infos
    }
    pub fn clear_signing_infos(&mut self) {
        self.signing_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_signing_infos(&mut self, v: ::protobuf::RepeatedField<SigningInfo>) {
        self.signing_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signing_infos(&mut self) -> &mut ::protobuf::RepeatedField<SigningInfo> {
        &mut self.signing_infos
    }

    // Take field
    pub fn take_signing_infos(&mut self) -> ::protobuf::RepeatedField<SigningInfo> {
        ::std::mem::replace(&mut self.signing_infos, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.slashing.v1beta1.ValidatorMissedBlocks missed_blocks = 3;


    pub fn get_missed_blocks(&self) -> &[ValidatorMissedBlocks] {
        &self.missed_blocks
    }
    pub fn clear_missed_blocks(&mut self) {
        self.missed_blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_missed_blocks(&mut self, v: ::protobuf::RepeatedField<ValidatorMissedBlocks>) {
        self.missed_blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_missed_blocks(&mut self) -> &mut ::protobuf::RepeatedField<ValidatorMissedBlocks> {
        &mut self.missed_blocks
    }

    // Take field
    pub fn take_missed_blocks(&mut self) -> ::protobuf::RepeatedField<ValidatorMissedBlocks> {
        ::std::mem::replace(&mut self.missed_blocks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signing_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.missed_blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signing_infos)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.missed_blocks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.signing_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.missed_blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.signing_infos {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.missed_blocks {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::slashing::Params>>(
                "params",
                |m: &GenesisState| { &m.params },
                |m: &mut GenesisState| { &mut m.params },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SigningInfo>>(
                "signing_infos",
                |m: &GenesisState| { &m.signing_infos },
                |m: &mut GenesisState| { &mut m.signing_infos },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorMissedBlocks>>(
                "missed_blocks",
                |m: &GenesisState| { &m.missed_blocks },
                |m: &mut GenesisState| { &mut m.missed_blocks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenesisState>(
                "GenesisState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.signing_infos.clear();
        self.missed_blocks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SigningInfo {
    // message fields
    pub address: ::std::string::String,
    pub validator_signing_info: ::protobuf::SingularPtrField<super::slashing::ValidatorSigningInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SigningInfo {
    fn default() -> &'a SigningInfo {
        <SigningInfo as ::protobuf::Message>::default_instance()
    }
}

impl SigningInfo {
    pub fn new() -> SigningInfo {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .cosmos.slashing.v1beta1.ValidatorSigningInfo validator_signing_info = 2;


    pub fn get_validator_signing_info(&self) -> &super::slashing::ValidatorSigningInfo {
        self.validator_signing_info.as_ref().unwrap_or_else(|| <super::slashing::ValidatorSigningInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_validator_signing_info(&mut self) {
        self.validator_signing_info.clear();
    }

    pub fn has_validator_signing_info(&self) -> bool {
        self.validator_signing_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validator_signing_info(&mut self, v: super::slashing::ValidatorSigningInfo) {
        self.validator_signing_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_signing_info(&mut self) -> &mut super::slashing::ValidatorSigningInfo {
        if self.validator_signing_info.is_none() {
            self.validator_signing_info.set_default();
        }
        self.validator_signing_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_validator_signing_info(&mut self) -> super::slashing::ValidatorSigningInfo {
        self.validator_signing_info.take().unwrap_or_else(|| super::slashing::ValidatorSigningInfo::new())
    }
}

impl ::protobuf::Message for SigningInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.validator_signing_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validator_signing_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(ref v) = self.validator_signing_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(ref v) = self.validator_signing_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SigningInfo {
        SigningInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &SigningInfo| { &m.address },
                |m: &mut SigningInfo| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::slashing::ValidatorSigningInfo>>(
                "validator_signing_info",
                |m: &SigningInfo| { &m.validator_signing_info },
                |m: &mut SigningInfo| { &mut m.validator_signing_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SigningInfo>(
                "SigningInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SigningInfo {
        static instance: ::protobuf::rt::LazyV2<SigningInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SigningInfo::new)
    }
}

impl ::protobuf::Clear for SigningInfo {
    fn clear(&mut self) {
        self.address.clear();
        self.validator_signing_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SigningInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SigningInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorMissedBlocks {
    // message fields
    pub address: ::std::string::String,
    pub missed_blocks: ::protobuf::RepeatedField<MissedBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorMissedBlocks {
    fn default() -> &'a ValidatorMissedBlocks {
        <ValidatorMissedBlocks as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorMissedBlocks {
    pub fn new() -> ValidatorMissedBlocks {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // repeated .cosmos.slashing.v1beta1.MissedBlock missed_blocks = 2;


    pub fn get_missed_blocks(&self) -> &[MissedBlock] {
        &self.missed_blocks
    }
    pub fn clear_missed_blocks(&mut self) {
        self.missed_blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_missed_blocks(&mut self, v: ::protobuf::RepeatedField<MissedBlock>) {
        self.missed_blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_missed_blocks(&mut self) -> &mut ::protobuf::RepeatedField<MissedBlock> {
        &mut self.missed_blocks
    }

    // Take field
    pub fn take_missed_blocks(&mut self) -> ::protobuf::RepeatedField<MissedBlock> {
        ::std::mem::replace(&mut self.missed_blocks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorMissedBlocks {
    fn is_initialized(&self) -> bool {
        for v in &self.missed_blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.missed_blocks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        for value in &self.missed_blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        for v in &self.missed_blocks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorMissedBlocks {
        ValidatorMissedBlocks::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &ValidatorMissedBlocks| { &m.address },
                |m: &mut ValidatorMissedBlocks| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MissedBlock>>(
                "missed_blocks",
                |m: &ValidatorMissedBlocks| { &m.missed_blocks },
                |m: &mut ValidatorMissedBlocks| { &mut m.missed_blocks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorMissedBlocks>(
                "ValidatorMissedBlocks",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorMissedBlocks {
        static instance: ::protobuf::rt::LazyV2<ValidatorMissedBlocks> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorMissedBlocks::new)
    }
}

impl ::protobuf::Clear for ValidatorMissedBlocks {
    fn clear(&mut self) {
        self.address.clear();
        self.missed_blocks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorMissedBlocks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorMissedBlocks {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MissedBlock {
    // message fields
    pub index: i64,
    pub missed: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MissedBlock {
    fn default() -> &'a MissedBlock {
        <MissedBlock as ::protobuf::Message>::default_instance()
    }
}

impl MissedBlock {
    pub fn new() -> MissedBlock {
        ::std::default::Default::default()
    }

    // int64 index = 1;


    pub fn get_index(&self) -> i64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i64) {
        self.index = v;
    }

    // bool missed = 2;


    pub fn get_missed(&self) -> bool {
        self.missed
    }
    pub fn clear_missed(&mut self) {
        self.missed = false;
    }

    // Param is passed by value, moved
    pub fn set_missed(&mut self, v: bool) {
        self.missed = v;
    }
}

impl ::protobuf::Message for MissedBlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.missed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.missed != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_int64(1, self.index)?;
        }
        if self.missed != false {
            os.write_bool(2, self.missed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MissedBlock {
        MissedBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "index",
                |m: &MissedBlock| { &m.index },
                |m: &mut MissedBlock| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "missed",
                |m: &MissedBlock| { &m.missed },
                |m: &mut MissedBlock| { &mut m.missed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MissedBlock>(
                "MissedBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MissedBlock {
        static instance: ::protobuf::rt::LazyV2<MissedBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MissedBlock::new)
    }
}

impl ::protobuf::Clear for MissedBlock {
    fn clear(&mut self) {
        self.index = 0;
        self.missed = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MissedBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MissedBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%cosmos/slashing/v1beta1/genesis.proto\x12\x17cosmos.slashing.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a&cosmos/slashing/v1beta1/slashing.proto\
    \"\xa9\x02\n\x0cGenesisState\x12=\n\x06params\x18\x01\x20\x01(\x0b2\x1f.\
    cosmos.slashing.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\x1f\0\x12g\n\rsig\
    ning_infos\x18\x02\x20\x03(\x0b2$.cosmos.slashing.v1beta1.SigningInfoR\
    \x0csigningInfosB\x1c\xf2\xde\x1f\x14yaml:\"signing_infos\"\xc8\xde\x1f\
    \0\x12q\n\rmissed_blocks\x18\x03\x20\x03(\x0b2..cosmos.slashing.v1beta1.\
    ValidatorMissedBlocksR\x0cmissedBlocksB\x1c\xf2\xde\x1f\x14yaml:\"missed\
    _blocks\"\xc8\xde\x1f\0\"\xb4\x01\n\x0bSigningInfo\x12\x18\n\x07address\
    \x18\x01\x20\x01(\tR\x07address\x12\x8a\x01\n\x16validator_signing_info\
    \x18\x02\x20\x01(\x0b2-.cosmos.slashing.v1beta1.ValidatorSigningInfoR\
    \x14validatorSigningInfoB%\xf2\xde\x1f\x1dyaml:\"validator_signing_info\
    \"\xc8\xde\x1f\0\"\x9a\x01\n\x15ValidatorMissedBlocks\x12\x18\n\x07addre\
    ss\x18\x01\x20\x01(\tR\x07address\x12g\n\rmissed_blocks\x18\x02\x20\x03(\
    \x0b2$.cosmos.slashing.v1beta1.MissedBlockR\x0cmissedBlocksB\x1c\xf2\xde\
    \x1f\x14yaml:\"missed_blocks\"\xc8\xde\x1f\0\";\n\x0bMissedBlock\x12\x14\
    \n\x05index\x18\x01\x20\x01(\x03R\x05index\x12\x16\n\x06missed\x18\x02\
    \x20\x01(\x08R\x06missedB/Z-github.com/cosmos/cosmos-sdk/x/slashing/type\
    sb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
