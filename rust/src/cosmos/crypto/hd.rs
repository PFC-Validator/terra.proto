// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/crypto/hd/v1/hd.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct BIP44Params {
    // message fields
    pub purpose: u32,
    pub coin_type: u32,
    pub account: u32,
    pub change: bool,
    pub address_index: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BIP44Params {
    fn default() -> &'a BIP44Params {
        <BIP44Params as ::protobuf::Message>::default_instance()
    }
}

impl BIP44Params {
    pub fn new() -> BIP44Params {
        ::std::default::Default::default()
    }

    // uint32 purpose = 1;


    pub fn get_purpose(&self) -> u32 {
        self.purpose
    }
    pub fn clear_purpose(&mut self) {
        self.purpose = 0;
    }

    // Param is passed by value, moved
    pub fn set_purpose(&mut self, v: u32) {
        self.purpose = v;
    }

    // uint32 coin_type = 2;


    pub fn get_coin_type(&self) -> u32 {
        self.coin_type
    }
    pub fn clear_coin_type(&mut self) {
        self.coin_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_coin_type(&mut self, v: u32) {
        self.coin_type = v;
    }

    // uint32 account = 3;


    pub fn get_account(&self) -> u32 {
        self.account
    }
    pub fn clear_account(&mut self) {
        self.account = 0;
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: u32) {
        self.account = v;
    }

    // bool change = 4;


    pub fn get_change(&self) -> bool {
        self.change
    }
    pub fn clear_change(&mut self) {
        self.change = false;
    }

    // Param is passed by value, moved
    pub fn set_change(&mut self, v: bool) {
        self.change = v;
    }

    // uint32 address_index = 5;


    pub fn get_address_index(&self) -> u32 {
        self.address_index
    }
    pub fn clear_address_index(&mut self) {
        self.address_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_address_index(&mut self, v: u32) {
        self.address_index = v;
    }
}

impl ::protobuf::Message for BIP44Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.purpose = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.coin_type = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.account = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.change = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.address_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.purpose != 0 {
            my_size += ::protobuf::rt::value_size(1, self.purpose, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.coin_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.coin_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.account != 0 {
            my_size += ::protobuf::rt::value_size(3, self.account, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.change != false {
            my_size += 2;
        }
        if self.address_index != 0 {
            my_size += ::protobuf::rt::value_size(5, self.address_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.purpose != 0 {
            os.write_uint32(1, self.purpose)?;
        }
        if self.coin_type != 0 {
            os.write_uint32(2, self.coin_type)?;
        }
        if self.account != 0 {
            os.write_uint32(3, self.account)?;
        }
        if self.change != false {
            os.write_bool(4, self.change)?;
        }
        if self.address_index != 0 {
            os.write_uint32(5, self.address_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BIP44Params {
        BIP44Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "purpose",
                |m: &BIP44Params| { &m.purpose },
                |m: &mut BIP44Params| { &mut m.purpose },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "coin_type",
                |m: &BIP44Params| { &m.coin_type },
                |m: &mut BIP44Params| { &mut m.coin_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "account",
                |m: &BIP44Params| { &m.account },
                |m: &mut BIP44Params| { &mut m.account },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "change",
                |m: &BIP44Params| { &m.change },
                |m: &mut BIP44Params| { &mut m.change },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "address_index",
                |m: &BIP44Params| { &m.address_index },
                |m: &mut BIP44Params| { &mut m.address_index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BIP44Params>(
                "BIP44Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BIP44Params {
        static instance: ::protobuf::rt::LazyV2<BIP44Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BIP44Params::new)
    }
}

impl ::protobuf::Clear for BIP44Params {
    fn clear(&mut self) {
        self.purpose = 0;
        self.coin_type = 0;
        self.account = 0;
        self.change = false;
        self.address_index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BIP44Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BIP44Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ccosmos/crypto/hd/v1/hd.proto\x12\x13cosmos.crypto.hd.v1\x1a\x14gog\
    oproto/gogo.proto\"\xa1\x01\n\x0bBIP44Params\x12\x18\n\x07purpose\x18\
    \x01\x20\x01(\rR\x07purpose\x12\x1b\n\tcoin_type\x18\x02\x20\x01(\rR\x08\
    coinType\x12\x18\n\x07account\x18\x03\x20\x01(\rR\x07account\x12\x16\n\
    \x06change\x18\x04\x20\x01(\x08R\x06change\x12#\n\raddress_index\x18\x05\
    \x20\x01(\rR\x0caddressIndex:\x04\x98\xa0\x1f\0B,Z&github.com/cosmos/cos\
    mos-sdk/crypto/hd\xc8\xe1\x1e\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
