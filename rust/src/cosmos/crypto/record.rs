// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/crypto/keyring/v1/record.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct Record {
    // message fields
    pub name: ::std::string::String,
    pub pub_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // message oneof groups
    pub item: ::std::option::Option<Record_oneof_item>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record {
    fn default() -> &'a Record {
        <Record as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Record_oneof_item {
    local(Record_Local),
    ledger(Record_Ledger),
    multi(Record_Multi),
    offline(Record_Offline),
}

impl Record {
    pub fn new() -> Record {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Any pub_key = 2;


    pub fn get_pub_key(&self) -> &::protobuf::well_known_types::Any {
        self.pub_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.pub_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // .cosmos.crypto.keyring.v1.Record.Local local = 3;


    pub fn get_local(&self) -> &Record_Local {
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::local(ref v)) => v,
            _ => <Record_Local as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_local(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_local(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::local(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_local(&mut self, v: Record_Local) {
        self.item = ::std::option::Option::Some(Record_oneof_item::local(v))
    }

    // Mutable pointer to the field.
    pub fn mut_local(&mut self) -> &mut Record_Local {
        if let ::std::option::Option::Some(Record_oneof_item::local(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(Record_oneof_item::local(Record_Local::new()));
        }
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::local(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_local(&mut self) -> Record_Local {
        if self.has_local() {
            match self.item.take() {
                ::std::option::Option::Some(Record_oneof_item::local(v)) => v,
                _ => panic!(),
            }
        } else {
            Record_Local::new()
        }
    }

    // .cosmos.crypto.keyring.v1.Record.Ledger ledger = 4;


    pub fn get_ledger(&self) -> &Record_Ledger {
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::ledger(ref v)) => v,
            _ => <Record_Ledger as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ledger(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_ledger(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::ledger(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ledger(&mut self, v: Record_Ledger) {
        self.item = ::std::option::Option::Some(Record_oneof_item::ledger(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ledger(&mut self) -> &mut Record_Ledger {
        if let ::std::option::Option::Some(Record_oneof_item::ledger(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(Record_oneof_item::ledger(Record_Ledger::new()));
        }
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::ledger(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ledger(&mut self) -> Record_Ledger {
        if self.has_ledger() {
            match self.item.take() {
                ::std::option::Option::Some(Record_oneof_item::ledger(v)) => v,
                _ => panic!(),
            }
        } else {
            Record_Ledger::new()
        }
    }

    // .cosmos.crypto.keyring.v1.Record.Multi multi = 5;


    pub fn get_multi(&self) -> &Record_Multi {
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::multi(ref v)) => v,
            _ => <Record_Multi as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_multi(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_multi(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::multi(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_multi(&mut self, v: Record_Multi) {
        self.item = ::std::option::Option::Some(Record_oneof_item::multi(v))
    }

    // Mutable pointer to the field.
    pub fn mut_multi(&mut self) -> &mut Record_Multi {
        if let ::std::option::Option::Some(Record_oneof_item::multi(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(Record_oneof_item::multi(Record_Multi::new()));
        }
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::multi(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_multi(&mut self) -> Record_Multi {
        if self.has_multi() {
            match self.item.take() {
                ::std::option::Option::Some(Record_oneof_item::multi(v)) => v,
                _ => panic!(),
            }
        } else {
            Record_Multi::new()
        }
    }

    // .cosmos.crypto.keyring.v1.Record.Offline offline = 6;


    pub fn get_offline(&self) -> &Record_Offline {
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::offline(ref v)) => v,
            _ => <Record_Offline as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_offline(&mut self) {
        self.item = ::std::option::Option::None;
    }

    pub fn has_offline(&self) -> bool {
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::offline(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_offline(&mut self, v: Record_Offline) {
        self.item = ::std::option::Option::Some(Record_oneof_item::offline(v))
    }

    // Mutable pointer to the field.
    pub fn mut_offline(&mut self) -> &mut Record_Offline {
        if let ::std::option::Option::Some(Record_oneof_item::offline(_)) = self.item {
        } else {
            self.item = ::std::option::Option::Some(Record_oneof_item::offline(Record_Offline::new()));
        }
        match self.item {
            ::std::option::Option::Some(Record_oneof_item::offline(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_offline(&mut self) -> Record_Offline {
        if self.has_offline() {
            match self.item.take() {
                ::std::option::Option::Some(Record_oneof_item::offline(v)) => v,
                _ => panic!(),
            }
        } else {
            Record_Offline::new()
        }
    }
}

impl ::protobuf::Message for Record {
    fn is_initialized(&self) -> bool {
        for v in &self.pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Record_oneof_item::local(ref v)) = self.item {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Record_oneof_item::ledger(ref v)) = self.item {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Record_oneof_item::multi(ref v)) = self.item {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Record_oneof_item::offline(ref v)) = self.item {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pub_key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.item = ::std::option::Option::Some(Record_oneof_item::local(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.item = ::std::option::Option::Some(Record_oneof_item::ledger(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.item = ::std::option::Option::Some(Record_oneof_item::multi(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.item = ::std::option::Option::Some(Record_oneof_item::offline(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.item {
            match v {
                &Record_oneof_item::local(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Record_oneof_item::ledger(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Record_oneof_item::multi(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Record_oneof_item::offline(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.item {
            match v {
                &Record_oneof_item::local(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Record_oneof_item::ledger(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Record_oneof_item::multi(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Record_oneof_item::offline(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record {
        Record::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Record| { &m.name },
                |m: &mut Record| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "pub_key",
                |m: &Record| { &m.pub_key },
                |m: &mut Record| { &mut m.pub_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Record_Local>(
                "local",
                Record::has_local,
                Record::get_local,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Record_Ledger>(
                "ledger",
                Record::has_ledger,
                Record::get_ledger,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Record_Multi>(
                "multi",
                Record::has_multi,
                Record::get_multi,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Record_Offline>(
                "offline",
                Record::has_offline,
                Record::get_offline,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Record>(
                "Record",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Record {
        static instance: ::protobuf::rt::LazyV2<Record> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Record::new)
    }
}

impl ::protobuf::Clear for Record {
    fn clear(&mut self) {
        self.name.clear();
        self.pub_key.clear();
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.item = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Record_Local {
    // message fields
    pub priv_key: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub priv_key_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record_Local {
    fn default() -> &'a Record_Local {
        <Record_Local as ::protobuf::Message>::default_instance()
    }
}

impl Record_Local {
    pub fn new() -> Record_Local {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any priv_key = 1;


    pub fn get_priv_key(&self) -> &::protobuf::well_known_types::Any {
        self.priv_key.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_priv_key(&mut self) {
        self.priv_key.clear();
    }

    pub fn has_priv_key(&self) -> bool {
        self.priv_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priv_key(&mut self, v: ::protobuf::well_known_types::Any) {
        self.priv_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_priv_key(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.priv_key.is_none() {
            self.priv_key.set_default();
        }
        self.priv_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_priv_key(&mut self) -> ::protobuf::well_known_types::Any {
        self.priv_key.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // string priv_key_type = 2;


    pub fn get_priv_key_type(&self) -> &str {
        &self.priv_key_type
    }
    pub fn clear_priv_key_type(&mut self) {
        self.priv_key_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_priv_key_type(&mut self, v: ::std::string::String) {
        self.priv_key_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_priv_key_type(&mut self) -> &mut ::std::string::String {
        &mut self.priv_key_type
    }

    // Take field
    pub fn take_priv_key_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.priv_key_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Record_Local {
    fn is_initialized(&self) -> bool {
        for v in &self.priv_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.priv_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.priv_key_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.priv_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.priv_key_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.priv_key_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.priv_key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.priv_key_type.is_empty() {
            os.write_string(2, &self.priv_key_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record_Local {
        Record_Local::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "priv_key",
                |m: &Record_Local| { &m.priv_key },
                |m: &mut Record_Local| { &mut m.priv_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "priv_key_type",
                |m: &Record_Local| { &m.priv_key_type },
                |m: &mut Record_Local| { &mut m.priv_key_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Record_Local>(
                "Record.Local",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Record_Local {
        static instance: ::protobuf::rt::LazyV2<Record_Local> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Record_Local::new)
    }
}

impl ::protobuf::Clear for Record_Local {
    fn clear(&mut self) {
        self.priv_key.clear();
        self.priv_key_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record_Local {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record_Local {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Record_Ledger {
    // message fields
    pub path: ::protobuf::SingularPtrField<super::hd::BIP44Params>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record_Ledger {
    fn default() -> &'a Record_Ledger {
        <Record_Ledger as ::protobuf::Message>::default_instance()
    }
}

impl Record_Ledger {
    pub fn new() -> Record_Ledger {
        ::std::default::Default::default()
    }

    // .cosmos.crypto.hd.v1.BIP44Params path = 1;


    pub fn get_path(&self) -> &super::hd::BIP44Params {
        self.path.as_ref().unwrap_or_else(|| <super::hd::BIP44Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    pub fn has_path(&self) -> bool {
        self.path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: super::hd::BIP44Params) {
        self.path = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut super::hd::BIP44Params {
        if self.path.is_none() {
            self.path.set_default();
        }
        self.path.as_mut().unwrap()
    }

    // Take field
    pub fn take_path(&mut self) -> super::hd::BIP44Params {
        self.path.take().unwrap_or_else(|| super::hd::BIP44Params::new())
    }
}

impl ::protobuf::Message for Record_Ledger {
    fn is_initialized(&self) -> bool {
        for v in &self.path {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.path.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.path.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record_Ledger {
        Record_Ledger::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hd::BIP44Params>>(
                "path",
                |m: &Record_Ledger| { &m.path },
                |m: &mut Record_Ledger| { &mut m.path },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Record_Ledger>(
                "Record.Ledger",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Record_Ledger {
        static instance: ::protobuf::rt::LazyV2<Record_Ledger> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Record_Ledger::new)
    }
}

impl ::protobuf::Clear for Record_Ledger {
    fn clear(&mut self) {
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record_Ledger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record_Ledger {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Record_Multi {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record_Multi {
    fn default() -> &'a Record_Multi {
        <Record_Multi as ::protobuf::Message>::default_instance()
    }
}

impl Record_Multi {
    pub fn new() -> Record_Multi {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Record_Multi {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record_Multi {
        Record_Multi::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Record_Multi>(
                "Record.Multi",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Record_Multi {
        static instance: ::protobuf::rt::LazyV2<Record_Multi> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Record_Multi::new)
    }
}

impl ::protobuf::Clear for Record_Multi {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record_Multi {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record_Multi {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Record_Offline {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record_Offline {
    fn default() -> &'a Record_Offline {
        <Record_Offline as ::protobuf::Message>::default_instance()
    }
}

impl Record_Offline {
    pub fn new() -> Record_Offline {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Record_Offline {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record_Offline {
        Record_Offline::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Record_Offline>(
                "Record.Offline",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Record_Offline {
        static instance: ::protobuf::rt::LazyV2<Record_Offline> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Record_Offline::new)
    }
}

impl ::protobuf::Clear for Record_Offline {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record_Offline {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record_Offline {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%cosmos/crypto/keyring/v1/record.proto\x12\x18cosmos.crypto.keyring.v1\
    \x1a\x14gogoproto/gogo.proto\x1a\x19google/protobuf/any.proto\x1a\x1ccos\
    mos/crypto/hd/v1/hd.proto\"\x8e\x04\n\x06Record\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\x12-\n\x07pub_key\x18\x02\x20\x01(\x0b2\x14.goo\
    gle.protobuf.AnyR\x06pubKey\x12>\n\x05local\x18\x03\x20\x01(\x0b2&.cosmo\
    s.crypto.keyring.v1.Record.LocalH\0R\x05local\x12A\n\x06ledger\x18\x04\
    \x20\x01(\x0b2'.cosmos.crypto.keyring.v1.Record.LedgerH\0R\x06ledger\x12\
    >\n\x05multi\x18\x05\x20\x01(\x0b2&.cosmos.crypto.keyring.v1.Record.Mult\
    iH\0R\x05multi\x12D\n\x07offline\x18\x06\x20\x01(\x0b2(.cosmos.crypto.ke\
    yring.v1.Record.OfflineH\0R\x07offline\x1a\\\n\x05Local\x12/\n\x08priv_k\
    ey\x18\x01\x20\x01(\x0b2\x14.google.protobuf.AnyR\x07privKey\x12\"\n\rpr\
    iv_key_type\x18\x02\x20\x01(\tR\x0bprivKeyType\x1a>\n\x06Ledger\x124\n\
    \x04path\x18\x01\x20\x01(\x0b2\x20.cosmos.crypto.hd.v1.BIP44ParamsR\x04p\
    ath\x1a\x07\n\x05Multi\x1a\t\n\x07OfflineB\x06\n\x04itemB1Z+github.com/c\
    osmos/cosmos-sdk/crypto/keyring\xc8\xe1\x1e\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
