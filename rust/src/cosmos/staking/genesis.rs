// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/staking/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::staking::Params>,
    pub last_total_power: ::std::vec::Vec<u8>,
    pub last_validator_powers: ::protobuf::RepeatedField<LastValidatorPower>,
    pub validators: ::protobuf::RepeatedField<super::staking::Validator>,
    pub delegations: ::protobuf::RepeatedField<super::staking::Delegation>,
    pub unbonding_delegations: ::protobuf::RepeatedField<super::staking::UnbondingDelegation>,
    pub redelegations: ::protobuf::RepeatedField<super::staking::Redelegation>,
    pub exported: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .cosmos.staking.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::staking::Params {
        self.params.as_ref().unwrap_or_else(|| <super::staking::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::staking::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::staking::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::staking::Params {
        self.params.take().unwrap_or_else(|| super::staking::Params::new())
    }

    // bytes last_total_power = 2;


    pub fn get_last_total_power(&self) -> &[u8] {
        &self.last_total_power
    }
    pub fn clear_last_total_power(&mut self) {
        self.last_total_power.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_total_power(&mut self, v: ::std::vec::Vec<u8>) {
        self.last_total_power = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_total_power(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.last_total_power
    }

    // Take field
    pub fn take_last_total_power(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.last_total_power, ::std::vec::Vec::new())
    }

    // repeated .cosmos.staking.v1beta1.LastValidatorPower last_validator_powers = 3;


    pub fn get_last_validator_powers(&self) -> &[LastValidatorPower] {
        &self.last_validator_powers
    }
    pub fn clear_last_validator_powers(&mut self) {
        self.last_validator_powers.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_validator_powers(&mut self, v: ::protobuf::RepeatedField<LastValidatorPower>) {
        self.last_validator_powers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_last_validator_powers(&mut self) -> &mut ::protobuf::RepeatedField<LastValidatorPower> {
        &mut self.last_validator_powers
    }

    // Take field
    pub fn take_last_validator_powers(&mut self) -> ::protobuf::RepeatedField<LastValidatorPower> {
        ::std::mem::replace(&mut self.last_validator_powers, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.staking.v1beta1.Validator validators = 4;


    pub fn get_validators(&self) -> &[super::staking::Validator] {
        &self.validators
    }
    pub fn clear_validators(&mut self) {
        self.validators.clear();
    }

    // Param is passed by value, moved
    pub fn set_validators(&mut self, v: ::protobuf::RepeatedField<super::staking::Validator>) {
        self.validators = v;
    }

    // Mutable pointer to the field.
    pub fn mut_validators(&mut self) -> &mut ::protobuf::RepeatedField<super::staking::Validator> {
        &mut self.validators
    }

    // Take field
    pub fn take_validators(&mut self) -> ::protobuf::RepeatedField<super::staking::Validator> {
        ::std::mem::replace(&mut self.validators, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.staking.v1beta1.Delegation delegations = 5;


    pub fn get_delegations(&self) -> &[super::staking::Delegation] {
        &self.delegations
    }
    pub fn clear_delegations(&mut self) {
        self.delegations.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegations(&mut self, v: ::protobuf::RepeatedField<super::staking::Delegation>) {
        self.delegations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_delegations(&mut self) -> &mut ::protobuf::RepeatedField<super::staking::Delegation> {
        &mut self.delegations
    }

    // Take field
    pub fn take_delegations(&mut self) -> ::protobuf::RepeatedField<super::staking::Delegation> {
        ::std::mem::replace(&mut self.delegations, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.staking.v1beta1.UnbondingDelegation unbonding_delegations = 6;


    pub fn get_unbonding_delegations(&self) -> &[super::staking::UnbondingDelegation] {
        &self.unbonding_delegations
    }
    pub fn clear_unbonding_delegations(&mut self) {
        self.unbonding_delegations.clear();
    }

    // Param is passed by value, moved
    pub fn set_unbonding_delegations(&mut self, v: ::protobuf::RepeatedField<super::staking::UnbondingDelegation>) {
        self.unbonding_delegations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unbonding_delegations(&mut self) -> &mut ::protobuf::RepeatedField<super::staking::UnbondingDelegation> {
        &mut self.unbonding_delegations
    }

    // Take field
    pub fn take_unbonding_delegations(&mut self) -> ::protobuf::RepeatedField<super::staking::UnbondingDelegation> {
        ::std::mem::replace(&mut self.unbonding_delegations, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.staking.v1beta1.Redelegation redelegations = 7;


    pub fn get_redelegations(&self) -> &[super::staking::Redelegation] {
        &self.redelegations
    }
    pub fn clear_redelegations(&mut self) {
        self.redelegations.clear();
    }

    // Param is passed by value, moved
    pub fn set_redelegations(&mut self, v: ::protobuf::RepeatedField<super::staking::Redelegation>) {
        self.redelegations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_redelegations(&mut self) -> &mut ::protobuf::RepeatedField<super::staking::Redelegation> {
        &mut self.redelegations
    }

    // Take field
    pub fn take_redelegations(&mut self) -> ::protobuf::RepeatedField<super::staking::Redelegation> {
        ::std::mem::replace(&mut self.redelegations, ::protobuf::RepeatedField::new())
    }

    // bool exported = 8;


    pub fn get_exported(&self) -> bool {
        self.exported
    }
    pub fn clear_exported(&mut self) {
        self.exported = false;
    }

    // Param is passed by value, moved
    pub fn set_exported(&mut self, v: bool) {
        self.exported = v;
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_validator_powers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validators {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delegations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unbonding_delegations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.redelegations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.last_total_power)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.last_validator_powers)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.validators)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.delegations)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unbonding_delegations)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.redelegations)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.exported = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.last_total_power.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.last_total_power);
        }
        for value in &self.last_validator_powers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.validators {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.delegations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.unbonding_delegations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.redelegations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.exported != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.last_total_power.is_empty() {
            os.write_bytes(2, &self.last_total_power)?;
        }
        for v in &self.last_validator_powers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.validators {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.delegations {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.unbonding_delegations {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.redelegations {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.exported != false {
            os.write_bool(8, self.exported)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::staking::Params>>(
                "params",
                |m: &GenesisState| { &m.params },
                |m: &mut GenesisState| { &mut m.params },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "last_total_power",
                |m: &GenesisState| { &m.last_total_power },
                |m: &mut GenesisState| { &mut m.last_total_power },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LastValidatorPower>>(
                "last_validator_powers",
                |m: &GenesisState| { &m.last_validator_powers },
                |m: &mut GenesisState| { &mut m.last_validator_powers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::staking::Validator>>(
                "validators",
                |m: &GenesisState| { &m.validators },
                |m: &mut GenesisState| { &mut m.validators },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::staking::Delegation>>(
                "delegations",
                |m: &GenesisState| { &m.delegations },
                |m: &mut GenesisState| { &mut m.delegations },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::staking::UnbondingDelegation>>(
                "unbonding_delegations",
                |m: &GenesisState| { &m.unbonding_delegations },
                |m: &mut GenesisState| { &mut m.unbonding_delegations },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::staking::Redelegation>>(
                "redelegations",
                |m: &GenesisState| { &m.redelegations },
                |m: &mut GenesisState| { &mut m.redelegations },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "exported",
                |m: &GenesisState| { &m.exported },
                |m: &mut GenesisState| { &mut m.exported },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenesisState>(
                "GenesisState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.last_total_power.clear();
        self.last_validator_powers.clear();
        self.validators.clear();
        self.delegations.clear();
        self.unbonding_delegations.clear();
        self.redelegations.clear();
        self.exported = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LastValidatorPower {
    // message fields
    pub address: ::std::string::String,
    pub power: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LastValidatorPower {
    fn default() -> &'a LastValidatorPower {
        <LastValidatorPower as ::protobuf::Message>::default_instance()
    }
}

impl LastValidatorPower {
    pub fn new() -> LastValidatorPower {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // int64 power = 2;


    pub fn get_power(&self) -> i64 {
        self.power
    }
    pub fn clear_power(&mut self) {
        self.power = 0;
    }

    // Param is passed by value, moved
    pub fn set_power(&mut self, v: i64) {
        self.power = v;
    }
}

impl ::protobuf::Message for LastValidatorPower {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.power = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if self.power != 0 {
            my_size += ::protobuf::rt::value_size(2, self.power, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if self.power != 0 {
            os.write_int64(2, self.power)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LastValidatorPower {
        LastValidatorPower::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &LastValidatorPower| { &m.address },
                |m: &mut LastValidatorPower| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "power",
                |m: &LastValidatorPower| { &m.power },
                |m: &mut LastValidatorPower| { &mut m.power },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LastValidatorPower>(
                "LastValidatorPower",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LastValidatorPower {
        static instance: ::protobuf::rt::LazyV2<LastValidatorPower> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LastValidatorPower::new)
    }
}

impl ::protobuf::Clear for LastValidatorPower {
    fn clear(&mut self) {
        self.address.clear();
        self.power = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LastValidatorPower {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LastValidatorPower {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$cosmos/staking/v1beta1/genesis.proto\x12\x16cosmos.staking.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a$cosmos/staking/v1beta1/staking.proto\"\
    \xd4\x05\n\x0cGenesisState\x12<\n\x06params\x18\x01\x20\x01(\x0b2\x1e.co\
    smos.staking.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\x1f\0\x12s\n\x10last\
    _total_power\x18\x02\x20\x01(\x0cR\x0elastTotalPowerBI\xf2\xde\x1f\x17ya\
    ml:\"last_total_power\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.I\
    nt\xc8\xde\x1f\0\x12\x84\x01\n\x15last_validator_powers\x18\x03\x20\x03(\
    \x0b2*.cosmos.staking.v1beta1.LastValidatorPowerR\x13lastValidatorPowers\
    B$\xf2\xde\x1f\x1cyaml:\"last_validator_powers\"\xc8\xde\x1f\0\x12G\n\nv\
    alidators\x18\x04\x20\x03(\x0b2!.cosmos.staking.v1beta1.ValidatorR\nvali\
    datorsB\x04\xc8\xde\x1f\0\x12J\n\x0bdelegations\x18\x05\x20\x03(\x0b2\".\
    cosmos.staking.v1beta1.DelegationR\x0bdelegationsB\x04\xc8\xde\x1f\0\x12\
    \x86\x01\n\x15unbonding_delegations\x18\x06\x20\x03(\x0b2+.cosmos.stakin\
    g.v1beta1.UnbondingDelegationR\x14unbondingDelegationsB$\xf2\xde\x1f\x1c\
    yaml:\"unbonding_delegations\"\xc8\xde\x1f\0\x12P\n\rredelegations\x18\
    \x07\x20\x03(\x0b2$.cosmos.staking.v1beta1.RedelegationR\rredelegationsB\
    \x04\xc8\xde\x1f\0\x12\x1a\n\x08exported\x18\x08\x20\x01(\x08R\x08export\
    ed\"N\n\x12LastValidatorPower\x12\x18\n\x07address\x18\x01\x20\x01(\tR\
    \x07address\x12\x14\n\x05power\x18\x02\x20\x01(\x03R\x05power:\x08\x88\
    \xa0\x1f\0\xe8\xa0\x1f\0B.Z,github.com/cosmos/cosmos-sdk/x/staking/types\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
