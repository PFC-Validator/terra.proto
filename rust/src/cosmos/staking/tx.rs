// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/staking/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MsgCreateValidator {
    // message fields
    pub description: ::protobuf::SingularPtrField<super::staking::Description>,
    pub commission: ::protobuf::SingularPtrField<super::staking::CommissionRates>,
    pub min_self_delegation: ::std::string::String,
    pub delegator_address: ::std::string::String,
    pub validator_address: ::std::string::String,
    pub pubkey: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub value: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateValidator {
    fn default() -> &'a MsgCreateValidator {
        <MsgCreateValidator as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateValidator {
    pub fn new() -> MsgCreateValidator {
        ::std::default::Default::default()
    }

    // .cosmos.staking.v1beta1.Description description = 1;


    pub fn get_description(&self) -> &super::staking::Description {
        self.description.as_ref().unwrap_or_else(|| <super::staking::Description as ::protobuf::Message>::default_instance())
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    pub fn has_description(&self) -> bool {
        self.description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: super::staking::Description) {
        self.description = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut super::staking::Description {
        if self.description.is_none() {
            self.description.set_default();
        }
        self.description.as_mut().unwrap()
    }

    // Take field
    pub fn take_description(&mut self) -> super::staking::Description {
        self.description.take().unwrap_or_else(|| super::staking::Description::new())
    }

    // .cosmos.staking.v1beta1.CommissionRates commission = 2;


    pub fn get_commission(&self) -> &super::staking::CommissionRates {
        self.commission.as_ref().unwrap_or_else(|| <super::staking::CommissionRates as ::protobuf::Message>::default_instance())
    }
    pub fn clear_commission(&mut self) {
        self.commission.clear();
    }

    pub fn has_commission(&self) -> bool {
        self.commission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commission(&mut self, v: super::staking::CommissionRates) {
        self.commission = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commission(&mut self) -> &mut super::staking::CommissionRates {
        if self.commission.is_none() {
            self.commission.set_default();
        }
        self.commission.as_mut().unwrap()
    }

    // Take field
    pub fn take_commission(&mut self) -> super::staking::CommissionRates {
        self.commission.take().unwrap_or_else(|| super::staking::CommissionRates::new())
    }

    // string min_self_delegation = 3;


    pub fn get_min_self_delegation(&self) -> &str {
        &self.min_self_delegation
    }
    pub fn clear_min_self_delegation(&mut self) {
        self.min_self_delegation.clear();
    }

    // Param is passed by value, moved
    pub fn set_min_self_delegation(&mut self, v: ::std::string::String) {
        self.min_self_delegation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_self_delegation(&mut self) -> &mut ::std::string::String {
        &mut self.min_self_delegation
    }

    // Take field
    pub fn take_min_self_delegation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.min_self_delegation, ::std::string::String::new())
    }

    // string delegator_address = 4;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string validator_address = 5;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // .google.protobuf.Any pubkey = 6;


    pub fn get_pubkey(&self) -> &::protobuf::well_known_types::Any {
        self.pubkey.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pubkey(&mut self) {
        self.pubkey.clear();
    }

    pub fn has_pubkey(&self) -> bool {
        self.pubkey.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pubkey(&mut self, v: ::protobuf::well_known_types::Any) {
        self.pubkey = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pubkey(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.pubkey.is_none() {
            self.pubkey.set_default();
        }
        self.pubkey.as_mut().unwrap()
    }

    // Take field
    pub fn take_pubkey(&mut self) -> ::protobuf::well_known_types::Any {
        self.pubkey.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // .cosmos.base.v1beta1.Coin value = 7;


    pub fn get_value(&self) -> &super::coin::Coin {
        self.value.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::coin::Coin) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::coin::Coin {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::coin::Coin {
        self.value.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for MsgCreateValidator {
    fn is_initialized(&self) -> bool {
        for v in &self.description {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.commission {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pubkey {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.description)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.commission)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.min_self_delegation)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pubkey)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.description.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.commission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.min_self_delegation.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.min_self_delegation);
        }
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.validator_address);
        }
        if let Some(ref v) = self.pubkey.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.description.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.commission.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.min_self_delegation.is_empty() {
            os.write_string(3, &self.min_self_delegation)?;
        }
        if !self.delegator_address.is_empty() {
            os.write_string(4, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(5, &self.validator_address)?;
        }
        if let Some(ref v) = self.pubkey.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateValidator {
        MsgCreateValidator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::staking::Description>>(
                "description",
                |m: &MsgCreateValidator| { &m.description },
                |m: &mut MsgCreateValidator| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::staking::CommissionRates>>(
                "commission",
                |m: &MsgCreateValidator| { &m.commission },
                |m: &mut MsgCreateValidator| { &mut m.commission },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "min_self_delegation",
                |m: &MsgCreateValidator| { &m.min_self_delegation },
                |m: &mut MsgCreateValidator| { &mut m.min_self_delegation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &MsgCreateValidator| { &m.delegator_address },
                |m: &mut MsgCreateValidator| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &MsgCreateValidator| { &m.validator_address },
                |m: &mut MsgCreateValidator| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "pubkey",
                |m: &MsgCreateValidator| { &m.pubkey },
                |m: &mut MsgCreateValidator| { &mut m.pubkey },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "value",
                |m: &MsgCreateValidator| { &m.value },
                |m: &mut MsgCreateValidator| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgCreateValidator>(
                "MsgCreateValidator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgCreateValidator {
        static instance: ::protobuf::rt::LazyV2<MsgCreateValidator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateValidator::new)
    }
}

impl ::protobuf::Clear for MsgCreateValidator {
    fn clear(&mut self) {
        self.description.clear();
        self.commission.clear();
        self.min_self_delegation.clear();
        self.delegator_address.clear();
        self.validator_address.clear();
        self.pubkey.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgCreateValidator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateValidator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgCreateValidatorResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateValidatorResponse {
    fn default() -> &'a MsgCreateValidatorResponse {
        <MsgCreateValidatorResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateValidatorResponse {
    pub fn new() -> MsgCreateValidatorResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgCreateValidatorResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateValidatorResponse {
        MsgCreateValidatorResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgCreateValidatorResponse>(
                "MsgCreateValidatorResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgCreateValidatorResponse {
        static instance: ::protobuf::rt::LazyV2<MsgCreateValidatorResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateValidatorResponse::new)
    }
}

impl ::protobuf::Clear for MsgCreateValidatorResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgCreateValidatorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateValidatorResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgEditValidator {
    // message fields
    pub description: ::protobuf::SingularPtrField<super::staking::Description>,
    pub validator_address: ::std::string::String,
    pub commission_rate: ::std::string::String,
    pub min_self_delegation: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgEditValidator {
    fn default() -> &'a MsgEditValidator {
        <MsgEditValidator as ::protobuf::Message>::default_instance()
    }
}

impl MsgEditValidator {
    pub fn new() -> MsgEditValidator {
        ::std::default::Default::default()
    }

    // .cosmos.staking.v1beta1.Description description = 1;


    pub fn get_description(&self) -> &super::staking::Description {
        self.description.as_ref().unwrap_or_else(|| <super::staking::Description as ::protobuf::Message>::default_instance())
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    pub fn has_description(&self) -> bool {
        self.description.is_some()
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: super::staking::Description) {
        self.description = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut super::staking::Description {
        if self.description.is_none() {
            self.description.set_default();
        }
        self.description.as_mut().unwrap()
    }

    // Take field
    pub fn take_description(&mut self) -> super::staking::Description {
        self.description.take().unwrap_or_else(|| super::staking::Description::new())
    }

    // string validator_address = 2;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // string commission_rate = 3;


    pub fn get_commission_rate(&self) -> &str {
        &self.commission_rate
    }
    pub fn clear_commission_rate(&mut self) {
        self.commission_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_commission_rate(&mut self, v: ::std::string::String) {
        self.commission_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commission_rate(&mut self) -> &mut ::std::string::String {
        &mut self.commission_rate
    }

    // Take field
    pub fn take_commission_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.commission_rate, ::std::string::String::new())
    }

    // string min_self_delegation = 4;


    pub fn get_min_self_delegation(&self) -> &str {
        &self.min_self_delegation
    }
    pub fn clear_min_self_delegation(&mut self) {
        self.min_self_delegation.clear();
    }

    // Param is passed by value, moved
    pub fn set_min_self_delegation(&mut self, v: ::std::string::String) {
        self.min_self_delegation = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_self_delegation(&mut self) -> &mut ::std::string::String {
        &mut self.min_self_delegation
    }

    // Take field
    pub fn take_min_self_delegation(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.min_self_delegation, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgEditValidator {
    fn is_initialized(&self) -> bool {
        for v in &self.description {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.description)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.commission_rate)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.min_self_delegation)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.description.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if !self.commission_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.commission_rate);
        }
        if !self.min_self_delegation.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.min_self_delegation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.description.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if !self.commission_rate.is_empty() {
            os.write_string(3, &self.commission_rate)?;
        }
        if !self.min_self_delegation.is_empty() {
            os.write_string(4, &self.min_self_delegation)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgEditValidator {
        MsgEditValidator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::staking::Description>>(
                "description",
                |m: &MsgEditValidator| { &m.description },
                |m: &mut MsgEditValidator| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &MsgEditValidator| { &m.validator_address },
                |m: &mut MsgEditValidator| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "commission_rate",
                |m: &MsgEditValidator| { &m.commission_rate },
                |m: &mut MsgEditValidator| { &mut m.commission_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "min_self_delegation",
                |m: &MsgEditValidator| { &m.min_self_delegation },
                |m: &mut MsgEditValidator| { &mut m.min_self_delegation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgEditValidator>(
                "MsgEditValidator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgEditValidator {
        static instance: ::protobuf::rt::LazyV2<MsgEditValidator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgEditValidator::new)
    }
}

impl ::protobuf::Clear for MsgEditValidator {
    fn clear(&mut self) {
        self.description.clear();
        self.validator_address.clear();
        self.commission_rate.clear();
        self.min_self_delegation.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgEditValidator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgEditValidator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgEditValidatorResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgEditValidatorResponse {
    fn default() -> &'a MsgEditValidatorResponse {
        <MsgEditValidatorResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgEditValidatorResponse {
    pub fn new() -> MsgEditValidatorResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgEditValidatorResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgEditValidatorResponse {
        MsgEditValidatorResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgEditValidatorResponse>(
                "MsgEditValidatorResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgEditValidatorResponse {
        static instance: ::protobuf::rt::LazyV2<MsgEditValidatorResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgEditValidatorResponse::new)
    }
}

impl ::protobuf::Clear for MsgEditValidatorResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgEditValidatorResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgEditValidatorResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDelegate {
    // message fields
    pub delegator_address: ::std::string::String,
    pub validator_address: ::std::string::String,
    pub amount: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDelegate {
    fn default() -> &'a MsgDelegate {
        <MsgDelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegate {
    pub fn new() -> MsgDelegate {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string validator_address = 2;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin amount = 3;


    pub fn get_amount(&self) -> &super::coin::Coin {
        self.amount.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: super::coin::Coin) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut super::coin::Coin {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> super::coin::Coin {
        self.amount.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for MsgDelegate {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDelegate {
        MsgDelegate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &MsgDelegate| { &m.delegator_address },
                |m: &mut MsgDelegate| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &MsgDelegate| { &m.validator_address },
                |m: &mut MsgDelegate| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &MsgDelegate| { &m.amount },
                |m: &mut MsgDelegate| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDelegate>(
                "MsgDelegate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDelegate {
        static instance: ::protobuf::rt::LazyV2<MsgDelegate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDelegate::new)
    }
}

impl ::protobuf::Clear for MsgDelegate {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDelegateResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDelegateResponse {
    fn default() -> &'a MsgDelegateResponse {
        <MsgDelegateResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegateResponse {
    pub fn new() -> MsgDelegateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgDelegateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDelegateResponse {
        MsgDelegateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDelegateResponse>(
                "MsgDelegateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDelegateResponse {
        static instance: ::protobuf::rt::LazyV2<MsgDelegateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDelegateResponse::new)
    }
}

impl ::protobuf::Clear for MsgDelegateResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDelegateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgBeginRedelegate {
    // message fields
    pub delegator_address: ::std::string::String,
    pub validator_src_address: ::std::string::String,
    pub validator_dst_address: ::std::string::String,
    pub amount: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgBeginRedelegate {
    fn default() -> &'a MsgBeginRedelegate {
        <MsgBeginRedelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgBeginRedelegate {
    pub fn new() -> MsgBeginRedelegate {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string validator_src_address = 2;


    pub fn get_validator_src_address(&self) -> &str {
        &self.validator_src_address
    }
    pub fn clear_validator_src_address(&mut self) {
        self.validator_src_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_src_address(&mut self, v: ::std::string::String) {
        self.validator_src_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_src_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_src_address
    }

    // Take field
    pub fn take_validator_src_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_src_address, ::std::string::String::new())
    }

    // string validator_dst_address = 3;


    pub fn get_validator_dst_address(&self) -> &str {
        &self.validator_dst_address
    }
    pub fn clear_validator_dst_address(&mut self) {
        self.validator_dst_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_dst_address(&mut self, v: ::std::string::String) {
        self.validator_dst_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_dst_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_dst_address
    }

    // Take field
    pub fn take_validator_dst_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_dst_address, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin amount = 4;


    pub fn get_amount(&self) -> &super::coin::Coin {
        self.amount.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: super::coin::Coin) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut super::coin::Coin {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> super::coin::Coin {
        self.amount.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for MsgBeginRedelegate {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_src_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_dst_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_src_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_src_address);
        }
        if !self.validator_dst_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.validator_dst_address);
        }
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_src_address.is_empty() {
            os.write_string(2, &self.validator_src_address)?;
        }
        if !self.validator_dst_address.is_empty() {
            os.write_string(3, &self.validator_dst_address)?;
        }
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgBeginRedelegate {
        MsgBeginRedelegate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &MsgBeginRedelegate| { &m.delegator_address },
                |m: &mut MsgBeginRedelegate| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_src_address",
                |m: &MsgBeginRedelegate| { &m.validator_src_address },
                |m: &mut MsgBeginRedelegate| { &mut m.validator_src_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_dst_address",
                |m: &MsgBeginRedelegate| { &m.validator_dst_address },
                |m: &mut MsgBeginRedelegate| { &mut m.validator_dst_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &MsgBeginRedelegate| { &m.amount },
                |m: &mut MsgBeginRedelegate| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgBeginRedelegate>(
                "MsgBeginRedelegate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgBeginRedelegate {
        static instance: ::protobuf::rt::LazyV2<MsgBeginRedelegate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgBeginRedelegate::new)
    }
}

impl ::protobuf::Clear for MsgBeginRedelegate {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_src_address.clear();
        self.validator_dst_address.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgBeginRedelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgBeginRedelegate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgBeginRedelegateResponse {
    // message fields
    pub completion_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgBeginRedelegateResponse {
    fn default() -> &'a MsgBeginRedelegateResponse {
        <MsgBeginRedelegateResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgBeginRedelegateResponse {
    pub fn new() -> MsgBeginRedelegateResponse {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp completion_time = 1;


    pub fn get_completion_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.completion_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_completion_time(&mut self) {
        self.completion_time.clear();
    }

    pub fn has_completion_time(&self) -> bool {
        self.completion_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_completion_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.completion_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_completion_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.completion_time.is_none() {
            self.completion_time.set_default();
        }
        self.completion_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_completion_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.completion_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for MsgBeginRedelegateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.completion_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.completion_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.completion_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.completion_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgBeginRedelegateResponse {
        MsgBeginRedelegateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "completion_time",
                |m: &MsgBeginRedelegateResponse| { &m.completion_time },
                |m: &mut MsgBeginRedelegateResponse| { &mut m.completion_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgBeginRedelegateResponse>(
                "MsgBeginRedelegateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgBeginRedelegateResponse {
        static instance: ::protobuf::rt::LazyV2<MsgBeginRedelegateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgBeginRedelegateResponse::new)
    }
}

impl ::protobuf::Clear for MsgBeginRedelegateResponse {
    fn clear(&mut self) {
        self.completion_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgBeginRedelegateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgBeginRedelegateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUndelegate {
    // message fields
    pub delegator_address: ::std::string::String,
    pub validator_address: ::std::string::String,
    pub amount: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUndelegate {
    fn default() -> &'a MsgUndelegate {
        <MsgUndelegate as ::protobuf::Message>::default_instance()
    }
}

impl MsgUndelegate {
    pub fn new() -> MsgUndelegate {
        ::std::default::Default::default()
    }

    // string delegator_address = 1;


    pub fn get_delegator_address(&self) -> &str {
        &self.delegator_address
    }
    pub fn clear_delegator_address(&mut self) {
        self.delegator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegator_address(&mut self, v: ::std::string::String) {
        self.delegator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegator_address(&mut self) -> &mut ::std::string::String {
        &mut self.delegator_address
    }

    // Take field
    pub fn take_delegator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegator_address, ::std::string::String::new())
    }

    // string validator_address = 2;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin amount = 3;


    pub fn get_amount(&self) -> &super::coin::Coin {
        self.amount.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: super::coin::Coin) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut super::coin::Coin {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> super::coin::Coin {
        self.amount.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for MsgUndelegate {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.delegator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.delegator_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.delegator_address.is_empty() {
            os.write_string(1, &self.delegator_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUndelegate {
        MsgUndelegate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegator_address",
                |m: &MsgUndelegate| { &m.delegator_address },
                |m: &mut MsgUndelegate| { &mut m.delegator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &MsgUndelegate| { &m.validator_address },
                |m: &mut MsgUndelegate| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &MsgUndelegate| { &m.amount },
                |m: &mut MsgUndelegate| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUndelegate>(
                "MsgUndelegate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUndelegate {
        static instance: ::protobuf::rt::LazyV2<MsgUndelegate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUndelegate::new)
    }
}

impl ::protobuf::Clear for MsgUndelegate {
    fn clear(&mut self) {
        self.delegator_address.clear();
        self.validator_address.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUndelegate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUndelegate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUndelegateResponse {
    // message fields
    pub completion_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUndelegateResponse {
    fn default() -> &'a MsgUndelegateResponse {
        <MsgUndelegateResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUndelegateResponse {
    pub fn new() -> MsgUndelegateResponse {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp completion_time = 1;


    pub fn get_completion_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.completion_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_completion_time(&mut self) {
        self.completion_time.clear();
    }

    pub fn has_completion_time(&self) -> bool {
        self.completion_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_completion_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.completion_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_completion_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.completion_time.is_none() {
            self.completion_time.set_default();
        }
        self.completion_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_completion_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.completion_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for MsgUndelegateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.completion_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.completion_time)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.completion_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.completion_time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUndelegateResponse {
        MsgUndelegateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "completion_time",
                |m: &MsgUndelegateResponse| { &m.completion_time },
                |m: &mut MsgUndelegateResponse| { &mut m.completion_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUndelegateResponse>(
                "MsgUndelegateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUndelegateResponse {
        static instance: ::protobuf::rt::LazyV2<MsgUndelegateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUndelegateResponse::new)
    }
}

impl ::protobuf::Clear for MsgUndelegateResponse {
    fn clear(&mut self) {
        self.completion_time.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUndelegateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUndelegateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/staking/v1beta1/tx.proto\x12\x16cosmos.staking.v1beta1\x1a\
    \x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\
    \x14gogoproto/gogo.proto\x1a\x19cosmos_proto/cosmos.proto\x1a\x1ecosmos/\
    base/v1beta1/coin.proto\x1a$cosmos/staking/v1beta1/staking.proto\"\xcd\
    \x04\n\x12MsgCreateValidator\x12K\n\x0bdescription\x18\x01\x20\x01(\x0b2\
    #.cosmos.staking.v1beta1.DescriptionR\x0bdescriptionB\x04\xc8\xde\x1f\0\
    \x12M\n\ncommission\x18\x02\x20\x01(\x0b2'.cosmos.staking.v1beta1.Commis\
    sionRatesR\ncommissionB\x04\xc8\xde\x1f\0\x12|\n\x13min_self_delegation\
    \x18\x03\x20\x01(\tR\x11minSelfDelegationBL\xf2\xde\x1f\x1ayaml:\"min_se\
    lf_delegation\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\
    \xde\x1f\0\x12I\n\x11delegator_address\x18\x04\x20\x01(\tR\x10delegatorA\
    ddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12I\n\x11validato\
    r_address\x18\x05\x20\x01(\tR\x10validatorAddressB\x1c\xf2\xde\x1f\x18ya\
    ml:\"validator_address\"\x12F\n\x06pubkey\x18\x06\x20\x01(\x0b2\x14.goog\
    le.protobuf.AnyR\x06pubkeyB\x18\xca\xb4-\x14cosmos.crypto.PubKey\x125\n\
    \x05value\x18\x07\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x05valueB\
    \x04\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x1c\n\x1aMsgCreate\
    ValidatorResponse\"\x93\x03\n\x10MsgEditValidator\x12K\n\x0bdescription\
    \x18\x01\x20\x01(\x0b2#.cosmos.staking.v1beta1.DescriptionR\x0bdescripti\
    onB\x04\xc8\xde\x1f\0\x12?\n\x11validator_address\x18\x02\x20\x01(\tR\
    \x10validatorAddressB\x12\xf2\xde\x1f\x0eyaml:\"address\"\x12m\n\x0fcomm\
    ission_rate\x18\x03\x20\x01(\tR\x0ecommissionRateBD\xf2\xde\x1f\x16yaml:\
    \"commission_rate\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\
    \x12x\n\x13min_self_delegation\x18\x04\x20\x01(\tR\x11minSelfDelegationB\
    H\xf2\xde\x1f\x1ayaml:\"min_self_delegation\"\xda\xde\x1f&github.com/cos\
    mos/cosmos-sdk/types.Int:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x1a\n\x18Msg\
    EditValidatorResponse\"\xe6\x01\n\x0bMsgDelegate\x12I\n\x11delegator_add\
    ress\x18\x01\x20\x01(\tR\x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"\
    delegator_address\"\x12I\n\x11validator_address\x18\x02\x20\x01(\tR\x10v\
    alidatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"validator_address\"\x127\n\
    \x06amount\x18\x03\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amount\
    B\x04\xc8\xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x15\n\x13MsgDeleg\
    ateResponse\"\xce\x02\n\x12MsgBeginRedelegate\x12I\n\x11delegator_addres\
    s\x18\x01\x20\x01(\tR\x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"del\
    egator_address\"\x12T\n\x15validator_src_address\x18\x02\x20\x01(\tR\x13\
    validatorSrcAddressB\x20\xf2\xde\x1f\x1cyaml:\"validator_src_address\"\
    \x12T\n\x15validator_dst_address\x18\x03\x20\x01(\tR\x13validatorDstAddr\
    essB\x20\xf2\xde\x1f\x1cyaml:\"validator_dst_address\"\x127\n\x06amount\
    \x18\x04\x20\x01(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amountB\x04\xc8\
    \xde\x1f\0:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"k\n\x1aMsgBeginRedelegateRe\
    sponse\x12M\n\x0fcompletion_time\x18\x01\x20\x01(\x0b2\x1a.google.protob\
    uf.TimestampR\x0ecompletionTimeB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x01\"\xe8\
    \x01\n\rMsgUndelegate\x12I\n\x11delegator_address\x18\x01\x20\x01(\tR\
    \x10delegatorAddressB\x1c\xf2\xde\x1f\x18yaml:\"delegator_address\"\x12I\
    \n\x11validator_address\x18\x02\x20\x01(\tR\x10validatorAddressB\x1c\xf2\
    \xde\x1f\x18yaml:\"validator_address\"\x127\n\x06amount\x18\x03\x20\x01(\
    \x0b2\x19.cosmos.base.v1beta1.CoinR\x06amountB\x04\xc8\xde\x1f\0:\x08\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0\"f\n\x15MsgUndelegateResponse\x12M\n\x0fcom\
    pletion_time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0ecom\
    pletionTimeB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x012\x9a\x04\n\x03Msg\x12q\n\
    \x0fCreateValidator\x12*.cosmos.staking.v1beta1.MsgCreateValidator\x1a2.\
    cosmos.staking.v1beta1.MsgCreateValidatorResponse\x12k\n\rEditValidator\
    \x12(.cosmos.staking.v1beta1.MsgEditValidator\x1a0.cosmos.staking.v1beta\
    1.MsgEditValidatorResponse\x12\\\n\x08Delegate\x12#.cosmos.staking.v1bet\
    a1.MsgDelegate\x1a+.cosmos.staking.v1beta1.MsgDelegateResponse\x12q\n\
    \x0fBeginRedelegate\x12*.cosmos.staking.v1beta1.MsgBeginRedelegate\x1a2.\
    cosmos.staking.v1beta1.MsgBeginRedelegateResponse\x12b\n\nUndelegate\x12\
    %.cosmos.staking.v1beta1.MsgUndelegate\x1a-.cosmos.staking.v1beta1.MsgUn\
    delegateResponseB.Z,github.com/cosmos/cosmos-sdk/x/staking/typesb\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
