// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/tx/v1beta1/service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct GetTxsEventRequest {
    // message fields
    pub events: ::protobuf::RepeatedField<::std::string::String>,
    pub pagination: ::protobuf::SingularPtrField<super::pagination::PageRequest>,
    pub order_by: OrderBy,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxsEventRequest {
    fn default() -> &'a GetTxsEventRequest {
        <GetTxsEventRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTxsEventRequest {
    pub fn new() -> GetTxsEventRequest {
        ::std::default::Default::default()
    }

    // repeated string events = 1;


    pub fn get_events(&self) -> &[::std::string::String] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    // .cosmos.base.query.v1beta1.PageRequest pagination = 2;


    pub fn get_pagination(&self) -> &super::pagination::PageRequest {
        self.pagination.as_ref().unwrap_or_else(|| <super::pagination::PageRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pagination(&mut self) {
        self.pagination.clear();
    }

    pub fn has_pagination(&self) -> bool {
        self.pagination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pagination(&mut self, v: super::pagination::PageRequest) {
        self.pagination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pagination(&mut self) -> &mut super::pagination::PageRequest {
        if self.pagination.is_none() {
            self.pagination.set_default();
        }
        self.pagination.as_mut().unwrap()
    }

    // Take field
    pub fn take_pagination(&mut self) -> super::pagination::PageRequest {
        self.pagination.take().unwrap_or_else(|| super::pagination::PageRequest::new())
    }

    // .cosmos.tx.v1beta1.OrderBy order_by = 3;


    pub fn get_order_by(&self) -> OrderBy {
        self.order_by
    }
    pub fn clear_order_by(&mut self) {
        self.order_by = OrderBy::ORDER_BY_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_order_by(&mut self, v: OrderBy) {
        self.order_by = v;
    }
}

impl ::protobuf::Message for GetTxsEventRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.pagination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.events)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pagination)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.order_by, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.events {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if let Some(ref v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.order_by != OrderBy::ORDER_BY_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.order_by);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.events {
            os.write_string(1, &v)?;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.order_by != OrderBy::ORDER_BY_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.order_by))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxsEventRequest {
        GetTxsEventRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "events",
                |m: &GetTxsEventRequest| { &m.events },
                |m: &mut GetTxsEventRequest| { &mut m.events },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pagination::PageRequest>>(
                "pagination",
                |m: &GetTxsEventRequest| { &m.pagination },
                |m: &mut GetTxsEventRequest| { &mut m.pagination },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OrderBy>>(
                "order_by",
                |m: &GetTxsEventRequest| { &m.order_by },
                |m: &mut GetTxsEventRequest| { &mut m.order_by },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetTxsEventRequest>(
                "GetTxsEventRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetTxsEventRequest {
        static instance: ::protobuf::rt::LazyV2<GetTxsEventRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxsEventRequest::new)
    }
}

impl ::protobuf::Clear for GetTxsEventRequest {
    fn clear(&mut self) {
        self.events.clear();
        self.pagination.clear();
        self.order_by = OrderBy::ORDER_BY_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTxsEventRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxsEventRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTxsEventResponse {
    // message fields
    pub txs: ::protobuf::RepeatedField<super::tx::Tx>,
    pub tx_responses: ::protobuf::RepeatedField<super::abci::TxResponse>,
    pub pagination: ::protobuf::SingularPtrField<super::pagination::PageResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxsEventResponse {
    fn default() -> &'a GetTxsEventResponse {
        <GetTxsEventResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTxsEventResponse {
    pub fn new() -> GetTxsEventResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.tx.v1beta1.Tx txs = 1;


    pub fn get_txs(&self) -> &[super::tx::Tx] {
        &self.txs
    }
    pub fn clear_txs(&mut self) {
        self.txs.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs(&mut self, v: ::protobuf::RepeatedField<super::tx::Tx>) {
        self.txs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_txs(&mut self) -> &mut ::protobuf::RepeatedField<super::tx::Tx> {
        &mut self.txs
    }

    // Take field
    pub fn take_txs(&mut self) -> ::protobuf::RepeatedField<super::tx::Tx> {
        ::std::mem::replace(&mut self.txs, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.base.abci.v1beta1.TxResponse tx_responses = 2;


    pub fn get_tx_responses(&self) -> &[super::abci::TxResponse] {
        &self.tx_responses
    }
    pub fn clear_tx_responses(&mut self) {
        self.tx_responses.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_responses(&mut self, v: ::protobuf::RepeatedField<super::abci::TxResponse>) {
        self.tx_responses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tx_responses(&mut self) -> &mut ::protobuf::RepeatedField<super::abci::TxResponse> {
        &mut self.tx_responses
    }

    // Take field
    pub fn take_tx_responses(&mut self) -> ::protobuf::RepeatedField<super::abci::TxResponse> {
        ::std::mem::replace(&mut self.tx_responses, ::protobuf::RepeatedField::new())
    }

    // .cosmos.base.query.v1beta1.PageResponse pagination = 3;


    pub fn get_pagination(&self) -> &super::pagination::PageResponse {
        self.pagination.as_ref().unwrap_or_else(|| <super::pagination::PageResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pagination(&mut self) {
        self.pagination.clear();
    }

    pub fn has_pagination(&self) -> bool {
        self.pagination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pagination(&mut self, v: super::pagination::PageResponse) {
        self.pagination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pagination(&mut self) -> &mut super::pagination::PageResponse {
        if self.pagination.is_none() {
            self.pagination.set_default();
        }
        self.pagination.as_mut().unwrap()
    }

    // Take field
    pub fn take_pagination(&mut self) -> super::pagination::PageResponse {
        self.pagination.take().unwrap_or_else(|| super::pagination::PageResponse::new())
    }
}

impl ::protobuf::Message for GetTxsEventResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.txs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx_responses {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pagination {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.txs)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tx_responses)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pagination)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.txs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tx_responses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.txs {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.tx_responses {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.pagination.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxsEventResponse {
        GetTxsEventResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tx::Tx>>(
                "txs",
                |m: &GetTxsEventResponse| { &m.txs },
                |m: &mut GetTxsEventResponse| { &mut m.txs },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::TxResponse>>(
                "tx_responses",
                |m: &GetTxsEventResponse| { &m.tx_responses },
                |m: &mut GetTxsEventResponse| { &mut m.tx_responses },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::pagination::PageResponse>>(
                "pagination",
                |m: &GetTxsEventResponse| { &m.pagination },
                |m: &mut GetTxsEventResponse| { &mut m.pagination },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetTxsEventResponse>(
                "GetTxsEventResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetTxsEventResponse {
        static instance: ::protobuf::rt::LazyV2<GetTxsEventResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxsEventResponse::new)
    }
}

impl ::protobuf::Clear for GetTxsEventResponse {
    fn clear(&mut self) {
        self.txs.clear();
        self.tx_responses.clear();
        self.pagination.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTxsEventResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxsEventResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BroadcastTxRequest {
    // message fields
    pub tx_bytes: ::std::vec::Vec<u8>,
    pub mode: BroadcastMode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastTxRequest {
    fn default() -> &'a BroadcastTxRequest {
        <BroadcastTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastTxRequest {
    pub fn new() -> BroadcastTxRequest {
        ::std::default::Default::default()
    }

    // bytes tx_bytes = 1;


    pub fn get_tx_bytes(&self) -> &[u8] {
        &self.tx_bytes
    }
    pub fn clear_tx_bytes(&mut self) {
        self.tx_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx_bytes
    }

    // Take field
    pub fn take_tx_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx_bytes, ::std::vec::Vec::new())
    }

    // .cosmos.tx.v1beta1.BroadcastMode mode = 2;


    pub fn get_mode(&self) -> BroadcastMode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = BroadcastMode::BROADCAST_MODE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: BroadcastMode) {
        self.mode = v;
    }
}

impl ::protobuf::Message for BroadcastTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx_bytes)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tx_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.tx_bytes);
        }
        if self.mode != BroadcastMode::BROADCAST_MODE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tx_bytes.is_empty() {
            os.write_bytes(1, &self.tx_bytes)?;
        }
        if self.mode != BroadcastMode::BROADCAST_MODE_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastTxRequest {
        BroadcastTxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_bytes",
                |m: &BroadcastTxRequest| { &m.tx_bytes },
                |m: &mut BroadcastTxRequest| { &mut m.tx_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BroadcastMode>>(
                "mode",
                |m: &BroadcastTxRequest| { &m.mode },
                |m: &mut BroadcastTxRequest| { &mut m.mode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BroadcastTxRequest>(
                "BroadcastTxRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BroadcastTxRequest {
        static instance: ::protobuf::rt::LazyV2<BroadcastTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BroadcastTxRequest::new)
    }
}

impl ::protobuf::Clear for BroadcastTxRequest {
    fn clear(&mut self) {
        self.tx_bytes.clear();
        self.mode = BroadcastMode::BROADCAST_MODE_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BroadcastTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BroadcastTxResponse {
    // message fields
    pub tx_response: ::protobuf::SingularPtrField<super::abci::TxResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastTxResponse {
    fn default() -> &'a BroadcastTxResponse {
        <BroadcastTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastTxResponse {
    pub fn new() -> BroadcastTxResponse {
        ::std::default::Default::default()
    }

    // .cosmos.base.abci.v1beta1.TxResponse tx_response = 1;


    pub fn get_tx_response(&self) -> &super::abci::TxResponse {
        self.tx_response.as_ref().unwrap_or_else(|| <super::abci::TxResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx_response(&mut self) {
        self.tx_response.clear();
    }

    pub fn has_tx_response(&self) -> bool {
        self.tx_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_response(&mut self, v: super::abci::TxResponse) {
        self.tx_response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_response(&mut self) -> &mut super::abci::TxResponse {
        if self.tx_response.is_none() {
            self.tx_response.set_default();
        }
        self.tx_response.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_response(&mut self) -> super::abci::TxResponse {
        self.tx_response.take().unwrap_or_else(|| super::abci::TxResponse::new())
    }
}

impl ::protobuf::Message for BroadcastTxResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tx_response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx_response.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastTxResponse {
        BroadcastTxResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::TxResponse>>(
                "tx_response",
                |m: &BroadcastTxResponse| { &m.tx_response },
                |m: &mut BroadcastTxResponse| { &mut m.tx_response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BroadcastTxResponse>(
                "BroadcastTxResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BroadcastTxResponse {
        static instance: ::protobuf::rt::LazyV2<BroadcastTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BroadcastTxResponse::new)
    }
}

impl ::protobuf::Clear for BroadcastTxResponse {
    fn clear(&mut self) {
        self.tx_response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BroadcastTxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SimulateRequest {
    // message fields
    pub tx: ::protobuf::SingularPtrField<super::tx::Tx>,
    pub tx_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimulateRequest {
    fn default() -> &'a SimulateRequest {
        <SimulateRequest as ::protobuf::Message>::default_instance()
    }
}

impl SimulateRequest {
    pub fn new() -> SimulateRequest {
        ::std::default::Default::default()
    }

    // .cosmos.tx.v1beta1.Tx tx = 1;


    pub fn get_tx(&self) -> &super::tx::Tx {
        self.tx.as_ref().unwrap_or_else(|| <super::tx::Tx as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    pub fn has_tx(&self) -> bool {
        self.tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: super::tx::Tx) {
        self.tx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut super::tx::Tx {
        if self.tx.is_none() {
            self.tx.set_default();
        }
        self.tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx(&mut self) -> super::tx::Tx {
        self.tx.take().unwrap_or_else(|| super::tx::Tx::new())
    }

    // bytes tx_bytes = 2;


    pub fn get_tx_bytes(&self) -> &[u8] {
        &self.tx_bytes
    }
    pub fn clear_tx_bytes(&mut self) {
        self.tx_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx_bytes
    }

    // Take field
    pub fn take_tx_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SimulateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tx {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.tx_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tx_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.tx_bytes.is_empty() {
            os.write_bytes(2, &self.tx_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimulateRequest {
        SimulateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tx::Tx>>(
                "tx",
                |m: &SimulateRequest| { &m.tx },
                |m: &mut SimulateRequest| { &mut m.tx },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_bytes",
                |m: &SimulateRequest| { &m.tx_bytes },
                |m: &mut SimulateRequest| { &mut m.tx_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimulateRequest>(
                "SimulateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimulateRequest {
        static instance: ::protobuf::rt::LazyV2<SimulateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimulateRequest::new)
    }
}

impl ::protobuf::Clear for SimulateRequest {
    fn clear(&mut self) {
        self.tx.clear();
        self.tx_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimulateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SimulateResponse {
    // message fields
    pub gas_info: ::protobuf::SingularPtrField<super::abci::GasInfo>,
    pub result: ::protobuf::SingularPtrField<super::abci::Result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimulateResponse {
    fn default() -> &'a SimulateResponse {
        <SimulateResponse as ::protobuf::Message>::default_instance()
    }
}

impl SimulateResponse {
    pub fn new() -> SimulateResponse {
        ::std::default::Default::default()
    }

    // .cosmos.base.abci.v1beta1.GasInfo gas_info = 1;


    pub fn get_gas_info(&self) -> &super::abci::GasInfo {
        self.gas_info.as_ref().unwrap_or_else(|| <super::abci::GasInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gas_info(&mut self) {
        self.gas_info.clear();
    }

    pub fn has_gas_info(&self) -> bool {
        self.gas_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gas_info(&mut self, v: super::abci::GasInfo) {
        self.gas_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_info(&mut self) -> &mut super::abci::GasInfo {
        if self.gas_info.is_none() {
            self.gas_info.set_default();
        }
        self.gas_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_gas_info(&mut self) -> super::abci::GasInfo {
        self.gas_info.take().unwrap_or_else(|| super::abci::GasInfo::new())
    }

    // .cosmos.base.abci.v1beta1.Result result = 2;


    pub fn get_result(&self) -> &super::abci::Result {
        self.result.as_ref().unwrap_or_else(|| <super::abci::Result as ::protobuf::Message>::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: super::abci::Result) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut super::abci::Result {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> super::abci::Result {
        self.result.take().unwrap_or_else(|| super::abci::Result::new())
    }
}

impl ::protobuf::Message for SimulateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gas_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gas_info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gas_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gas_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimulateResponse {
        SimulateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::GasInfo>>(
                "gas_info",
                |m: &SimulateResponse| { &m.gas_info },
                |m: &mut SimulateResponse| { &mut m.gas_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::Result>>(
                "result",
                |m: &SimulateResponse| { &m.result },
                |m: &mut SimulateResponse| { &mut m.result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimulateResponse>(
                "SimulateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimulateResponse {
        static instance: ::protobuf::rt::LazyV2<SimulateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimulateResponse::new)
    }
}

impl ::protobuf::Clear for SimulateResponse {
    fn clear(&mut self) {
        self.gas_info.clear();
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimulateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimulateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTxRequest {
    // message fields
    pub hash: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxRequest {
    fn default() -> &'a GetTxRequest {
        <GetTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTxRequest {
    pub fn new() -> GetTxRequest {
        ::std::default::Default::default()
    }

    // string hash = 1;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxRequest {
        GetTxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &GetTxRequest| { &m.hash },
                |m: &mut GetTxRequest| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetTxRequest>(
                "GetTxRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetTxRequest {
        static instance: ::protobuf::rt::LazyV2<GetTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxRequest::new)
    }
}

impl ::protobuf::Clear for GetTxRequest {
    fn clear(&mut self) {
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTxResponse {
    // message fields
    pub tx: ::protobuf::SingularPtrField<super::tx::Tx>,
    pub tx_response: ::protobuf::SingularPtrField<super::abci::TxResponse>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxResponse {
    fn default() -> &'a GetTxResponse {
        <GetTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTxResponse {
    pub fn new() -> GetTxResponse {
        ::std::default::Default::default()
    }

    // .cosmos.tx.v1beta1.Tx tx = 1;


    pub fn get_tx(&self) -> &super::tx::Tx {
        self.tx.as_ref().unwrap_or_else(|| <super::tx::Tx as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    pub fn has_tx(&self) -> bool {
        self.tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: super::tx::Tx) {
        self.tx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut super::tx::Tx {
        if self.tx.is_none() {
            self.tx.set_default();
        }
        self.tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx(&mut self) -> super::tx::Tx {
        self.tx.take().unwrap_or_else(|| super::tx::Tx::new())
    }

    // .cosmos.base.abci.v1beta1.TxResponse tx_response = 2;


    pub fn get_tx_response(&self) -> &super::abci::TxResponse {
        self.tx_response.as_ref().unwrap_or_else(|| <super::abci::TxResponse as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx_response(&mut self) {
        self.tx_response.clear();
    }

    pub fn has_tx_response(&self) -> bool {
        self.tx_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx_response(&mut self, v: super::abci::TxResponse) {
        self.tx_response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_response(&mut self) -> &mut super::abci::TxResponse {
        if self.tx_response.is_none() {
            self.tx_response.set_default();
        }
        self.tx_response.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx_response(&mut self) -> super::abci::TxResponse {
        self.tx_response.take().unwrap_or_else(|| super::abci::TxResponse::new())
    }
}

impl ::protobuf::Message for GetTxResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tx {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tx_response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx_response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tx_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tx_response.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxResponse {
        GetTxResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tx::Tx>>(
                "tx",
                |m: &GetTxResponse| { &m.tx },
                |m: &mut GetTxResponse| { &mut m.tx },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::abci::TxResponse>>(
                "tx_response",
                |m: &GetTxResponse| { &m.tx_response },
                |m: &mut GetTxResponse| { &mut m.tx_response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetTxResponse>(
                "GetTxResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetTxResponse {
        static instance: ::protobuf::rt::LazyV2<GetTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxResponse::new)
    }
}

impl ::protobuf::Clear for GetTxResponse {
    fn clear(&mut self) {
        self.tx.clear();
        self.tx_response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OrderBy {
    ORDER_BY_UNSPECIFIED = 0,
    ORDER_BY_ASC = 1,
    ORDER_BY_DESC = 2,
}

impl ::protobuf::ProtobufEnum for OrderBy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OrderBy> {
        match value {
            0 => ::std::option::Option::Some(OrderBy::ORDER_BY_UNSPECIFIED),
            1 => ::std::option::Option::Some(OrderBy::ORDER_BY_ASC),
            2 => ::std::option::Option::Some(OrderBy::ORDER_BY_DESC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OrderBy] = &[
            OrderBy::ORDER_BY_UNSPECIFIED,
            OrderBy::ORDER_BY_ASC,
            OrderBy::ORDER_BY_DESC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OrderBy>("OrderBy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OrderBy {
}

impl ::std::default::Default for OrderBy {
    fn default() -> Self {
        OrderBy::ORDER_BY_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for OrderBy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BroadcastMode {
    BROADCAST_MODE_UNSPECIFIED = 0,
    BROADCAST_MODE_BLOCK = 1,
    BROADCAST_MODE_SYNC = 2,
    BROADCAST_MODE_ASYNC = 3,
}

impl ::protobuf::ProtobufEnum for BroadcastMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BroadcastMode> {
        match value {
            0 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_UNSPECIFIED),
            1 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_BLOCK),
            2 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_SYNC),
            3 => ::std::option::Option::Some(BroadcastMode::BROADCAST_MODE_ASYNC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BroadcastMode] = &[
            BroadcastMode::BROADCAST_MODE_UNSPECIFIED,
            BroadcastMode::BROADCAST_MODE_BLOCK,
            BroadcastMode::BROADCAST_MODE_SYNC,
            BroadcastMode::BROADCAST_MODE_ASYNC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BroadcastMode>("BroadcastMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BroadcastMode {
}

impl ::std::default::Default for BroadcastMode {
    fn default() -> Self {
        BroadcastMode::BROADCAST_MODE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/tx/v1beta1/service.proto\x12\x11cosmos.tx.v1beta1\x1a\x1cgo\
    ogle/api/annotations.proto\x1a#cosmos/base/abci/v1beta1/abci.proto\x1a\
    \x1acosmos/tx/v1beta1/tx.proto\x1a\x14gogoproto/gogo.proto\x1a*cosmos/ba\
    se/query/v1beta1/pagination.proto\"\xab\x01\n\x12GetTxsEventRequest\x12\
    \x16\n\x06events\x18\x01\x20\x03(\tR\x06events\x12F\n\npagination\x18\
    \x02\x20\x01(\x0b2&.cosmos.base.query.v1beta1.PageRequestR\npagination\
    \x125\n\x08order_by\x18\x03\x20\x01(\x0e2\x1a.cosmos.tx.v1beta1.OrderByR\
    \x07orderBy\"\xd0\x01\n\x13GetTxsEventResponse\x12'\n\x03txs\x18\x01\x20\
    \x03(\x0b2\x15.cosmos.tx.v1beta1.TxR\x03txs\x12G\n\x0ctx_responses\x18\
    \x02\x20\x03(\x0b2$.cosmos.base.abci.v1beta1.TxResponseR\x0btxResponses\
    \x12G\n\npagination\x18\x03\x20\x01(\x0b2'.cosmos.base.query.v1beta1.Pag\
    eResponseR\npagination\"e\n\x12BroadcastTxRequest\x12\x19\n\x08tx_bytes\
    \x18\x01\x20\x01(\x0cR\x07txBytes\x124\n\x04mode\x18\x02\x20\x01(\x0e2\
    \x20.cosmos.tx.v1beta1.BroadcastModeR\x04mode\"\\\n\x13BroadcastTxRespon\
    se\x12E\n\x0btx_response\x18\x01\x20\x01(\x0b2$.cosmos.base.abci.v1beta1\
    .TxResponseR\ntxResponse\"W\n\x0fSimulateRequest\x12)\n\x02tx\x18\x01\
    \x20\x01(\x0b2\x15.cosmos.tx.v1beta1.TxR\x02txB\x02\x18\x01\x12\x19\n\
    \x08tx_bytes\x18\x02\x20\x01(\x0cR\x07txBytes\"\x8a\x01\n\x10SimulateRes\
    ponse\x12<\n\x08gas_info\x18\x01\x20\x01(\x0b2!.cosmos.base.abci.v1beta1\
    .GasInfoR\x07gasInfo\x128\n\x06result\x18\x02\x20\x01(\x0b2\x20.cosmos.b\
    ase.abci.v1beta1.ResultR\x06result\"\"\n\x0cGetTxRequest\x12\x12\n\x04ha\
    sh\x18\x01\x20\x01(\tR\x04hash\"}\n\rGetTxResponse\x12%\n\x02tx\x18\x01\
    \x20\x01(\x0b2\x15.cosmos.tx.v1beta1.TxR\x02tx\x12E\n\x0btx_response\x18\
    \x02\x20\x01(\x0b2$.cosmos.base.abci.v1beta1.TxResponseR\ntxResponse*H\n\
    \x07OrderBy\x12\x18\n\x14ORDER_BY_UNSPECIFIED\x10\0\x12\x10\n\x0cORDER_B\
    Y_ASC\x10\x01\x12\x11\n\rORDER_BY_DESC\x10\x02*|\n\rBroadcastMode\x12\
    \x1e\n\x1aBROADCAST_MODE_UNSPECIFIED\x10\0\x12\x18\n\x14BROADCAST_MODE_B\
    LOCK\x10\x01\x12\x17\n\x13BROADCAST_MODE_SYNC\x10\x02\x12\x18\n\x14BROAD\
    CAST_MODE_ASYNC\x10\x032\xf8\x03\n\x07Service\x12{\n\x08Simulate\x12\".c\
    osmos.tx.v1beta1.SimulateRequest\x1a#.cosmos.tx.v1beta1.SimulateResponse\
    \"&\x82\xd3\xe4\x93\x02\x20\"\x1b/cosmos/tx/v1beta1/simulate:\x01*\x12q\
    \n\x05GetTx\x12\x1f.cosmos.tx.v1beta1.GetTxRequest\x1a\x20.cosmos.tx.v1b\
    eta1.GetTxResponse\"%\x82\xd3\xe4\x93\x02\x1f\x12\x1d/cosmos/tx/v1beta1/\
    txs/{hash}\x12\x7f\n\x0bBroadcastTx\x12%.cosmos.tx.v1beta1.BroadcastTxRe\
    quest\x1a&.cosmos.tx.v1beta1.BroadcastTxResponse\"!\x82\xd3\xe4\x93\x02\
    \x1b\"\x16/cosmos/tx/v1beta1/txs:\x01*\x12|\n\x0bGetTxsEvent\x12%.cosmos\
    .tx.v1beta1.GetTxsEventRequest\x1a&.cosmos.tx.v1beta1.GetTxsEventRespons\
    e\"\x1e\x82\xd3\xe4\x93\x02\x18\x12\x16/cosmos/tx/v1beta1/txsB+Z%github.\
    com/cosmos/cosmos-sdk/types/tx\xc0\xe3\x1e\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
