// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/vesting/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MsgCreateVestingAccount {
    // message fields
    pub from_address: ::std::string::String,
    pub to_address: ::std::string::String,
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    pub end_time: i64,
    pub delayed: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateVestingAccount {
    fn default() -> &'a MsgCreateVestingAccount {
        <MsgCreateVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateVestingAccount {
    pub fn new() -> MsgCreateVestingAccount {
        ::std::default::Default::default()
    }

    // string from_address = 1;


    pub fn get_from_address(&self) -> &str {
        &self.from_address
    }
    pub fn clear_from_address(&mut self) {
        self.from_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_from_address(&mut self, v: ::std::string::String) {
        self.from_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from_address(&mut self) -> &mut ::std::string::String {
        &mut self.from_address
    }

    // Take field
    pub fn take_from_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.from_address, ::std::string::String::new())
    }

    // string to_address = 2;


    pub fn get_to_address(&self) -> &str {
        &self.to_address
    }
    pub fn clear_to_address(&mut self) {
        self.to_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_to_address(&mut self, v: ::std::string::String) {
        self.to_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to_address(&mut self) -> &mut ::std::string::String {
        &mut self.to_address
    }

    // Take field
    pub fn take_to_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.to_address, ::std::string::String::new())
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 3;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }

    // int64 end_time = 4;


    pub fn get_end_time(&self) -> i64 {
        self.end_time
    }
    pub fn clear_end_time(&mut self) {
        self.end_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: i64) {
        self.end_time = v;
    }

    // bool delayed = 5;


    pub fn get_delayed(&self) -> bool {
        self.delayed
    }
    pub fn clear_delayed(&mut self) {
        self.delayed = false;
    }

    // Param is passed by value, moved
    pub fn set_delayed(&mut self, v: bool) {
        self.delayed = v;
    }
}

impl ::protobuf::Message for MsgCreateVestingAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.from_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.to_address)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.end_time = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.delayed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.from_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.from_address);
        }
        if !self.to_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.to_address);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.end_time != 0 {
            my_size += ::protobuf::rt::value_size(4, self.end_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.delayed != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.from_address.is_empty() {
            os.write_string(1, &self.from_address)?;
        }
        if !self.to_address.is_empty() {
            os.write_string(2, &self.to_address)?;
        }
        for v in &self.amount {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.end_time != 0 {
            os.write_int64(4, self.end_time)?;
        }
        if self.delayed != false {
            os.write_bool(5, self.delayed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateVestingAccount {
        MsgCreateVestingAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "from_address",
                |m: &MsgCreateVestingAccount| { &m.from_address },
                |m: &mut MsgCreateVestingAccount| { &mut m.from_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "to_address",
                |m: &MsgCreateVestingAccount| { &m.to_address },
                |m: &mut MsgCreateVestingAccount| { &mut m.to_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &MsgCreateVestingAccount| { &m.amount },
                |m: &mut MsgCreateVestingAccount| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "end_time",
                |m: &MsgCreateVestingAccount| { &m.end_time },
                |m: &mut MsgCreateVestingAccount| { &mut m.end_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "delayed",
                |m: &MsgCreateVestingAccount| { &m.delayed },
                |m: &mut MsgCreateVestingAccount| { &mut m.delayed },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgCreateVestingAccount>(
                "MsgCreateVestingAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgCreateVestingAccount {
        static instance: ::protobuf::rt::LazyV2<MsgCreateVestingAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateVestingAccount::new)
    }
}

impl ::protobuf::Clear for MsgCreateVestingAccount {
    fn clear(&mut self) {
        self.from_address.clear();
        self.to_address.clear();
        self.amount.clear();
        self.end_time = 0;
        self.delayed = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgCreateVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateVestingAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgCreateVestingAccountResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateVestingAccountResponse {
    fn default() -> &'a MsgCreateVestingAccountResponse {
        <MsgCreateVestingAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateVestingAccountResponse {
    pub fn new() -> MsgCreateVestingAccountResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgCreateVestingAccountResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateVestingAccountResponse {
        MsgCreateVestingAccountResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgCreateVestingAccountResponse>(
                "MsgCreateVestingAccountResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgCreateVestingAccountResponse {
        static instance: ::protobuf::rt::LazyV2<MsgCreateVestingAccountResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateVestingAccountResponse::new)
    }
}

impl ::protobuf::Clear for MsgCreateVestingAccountResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgCreateVestingAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateVestingAccountResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fcosmos/vesting/v1beta1/tx.proto\x12\x16cosmos.vesting.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\xc0\x02\
    \n\x17MsgCreateVestingAccount\x12:\n\x0cfrom_address\x18\x01\x20\x01(\tR\
    \x0bfromAddressB\x17\xf2\xde\x1f\x13yaml:\"from_address\"\x124\n\nto_add\
    ress\x18\x02\x20\x01(\tR\ttoAddressB\x15\xf2\xde\x1f\x11yaml:\"to_addres\
    s\"\x12c\n\x06amount\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\
    \x06amountB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\
    \xde\x1f\0\x12.\n\x08end_time\x18\x04\x20\x01(\x03R\x07endTimeB\x13\xf2\
    \xde\x1f\x0fyaml:\"end_time\"\x12\x18\n\x07delayed\x18\x05\x20\x01(\x08R\
    \x07delayed:\x04\xe8\xa0\x1f\x01\"!\n\x1fMsgCreateVestingAccountResponse\
    2\x88\x01\n\x03Msg\x12\x80\x01\n\x14CreateVestingAccount\x12/.cosmos.ves\
    ting.v1beta1.MsgCreateVestingAccount\x1a7.cosmos.vesting.v1beta1.MsgCrea\
    teVestingAccountResponseB3Z1github.com/cosmos/cosmos-sdk/x/auth/vesting/\
    typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
