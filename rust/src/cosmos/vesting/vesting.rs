// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `cosmos/vesting/v1beta1/vesting.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct BaseVestingAccount {
    // message fields
    pub base_account: ::protobuf::SingularPtrField<super::auth::auth::BaseAccount>,
    pub original_vesting: ::protobuf::RepeatedField<super::coin::Coin>,
    pub delegated_free: ::protobuf::RepeatedField<super::coin::Coin>,
    pub delegated_vesting: ::protobuf::RepeatedField<super::coin::Coin>,
    pub end_time: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BaseVestingAccount {
    fn default() -> &'a BaseVestingAccount {
        <BaseVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl BaseVestingAccount {
    pub fn new() -> BaseVestingAccount {
        ::std::default::Default::default()
    }

    // .cosmos.auth.v1beta1.BaseAccount base_account = 1;


    pub fn get_base_account(&self) -> &super::auth::auth::BaseAccount {
        self.base_account.as_ref().unwrap_or_else(|| <super::auth::auth::BaseAccount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_account(&mut self) {
        self.base_account.clear();
    }

    pub fn has_base_account(&self) -> bool {
        self.base_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_account(&mut self, v: super::auth::auth::BaseAccount) {
        self.base_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_account(&mut self) -> &mut super::auth::auth::BaseAccount {
        if self.base_account.is_none() {
            self.base_account.set_default();
        }
        self.base_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_account(&mut self) -> super::auth::auth::BaseAccount {
        self.base_account.take().unwrap_or_else(|| super::auth::auth::BaseAccount::new())
    }

    // repeated .cosmos.base.v1beta1.Coin original_vesting = 2;


    pub fn get_original_vesting(&self) -> &[super::coin::Coin] {
        &self.original_vesting
    }
    pub fn clear_original_vesting(&mut self) {
        self.original_vesting.clear();
    }

    // Param is passed by value, moved
    pub fn set_original_vesting(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.original_vesting = v;
    }

    // Mutable pointer to the field.
    pub fn mut_original_vesting(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.original_vesting
    }

    // Take field
    pub fn take_original_vesting(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.original_vesting, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.base.v1beta1.Coin delegated_free = 3;


    pub fn get_delegated_free(&self) -> &[super::coin::Coin] {
        &self.delegated_free
    }
    pub fn clear_delegated_free(&mut self) {
        self.delegated_free.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegated_free(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.delegated_free = v;
    }

    // Mutable pointer to the field.
    pub fn mut_delegated_free(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.delegated_free
    }

    // Take field
    pub fn take_delegated_free(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.delegated_free, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.base.v1beta1.Coin delegated_vesting = 4;


    pub fn get_delegated_vesting(&self) -> &[super::coin::Coin] {
        &self.delegated_vesting
    }
    pub fn clear_delegated_vesting(&mut self) {
        self.delegated_vesting.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegated_vesting(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.delegated_vesting = v;
    }

    // Mutable pointer to the field.
    pub fn mut_delegated_vesting(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.delegated_vesting
    }

    // Take field
    pub fn take_delegated_vesting(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.delegated_vesting, ::protobuf::RepeatedField::new())
    }

    // int64 end_time = 5;


    pub fn get_end_time(&self) -> i64 {
        self.end_time
    }
    pub fn clear_end_time(&mut self) {
        self.end_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_end_time(&mut self, v: i64) {
        self.end_time = v;
    }
}

impl ::protobuf::Message for BaseVestingAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.base_account {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.original_vesting {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delegated_free {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delegated_vesting {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_account)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.original_vesting)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.delegated_free)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.delegated_vesting)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.end_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.original_vesting {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.delegated_free {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.delegated_vesting {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.end_time != 0 {
            my_size += ::protobuf::rt::value_size(5, self.end_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.original_vesting {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.delegated_free {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.delegated_vesting {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.end_time != 0 {
            os.write_int64(5, self.end_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BaseVestingAccount {
        BaseVestingAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::auth::auth::BaseAccount>>(
                "base_account",
                |m: &BaseVestingAccount| { &m.base_account },
                |m: &mut BaseVestingAccount| { &mut m.base_account },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "original_vesting",
                |m: &BaseVestingAccount| { &m.original_vesting },
                |m: &mut BaseVestingAccount| { &mut m.original_vesting },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "delegated_free",
                |m: &BaseVestingAccount| { &m.delegated_free },
                |m: &mut BaseVestingAccount| { &mut m.delegated_free },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "delegated_vesting",
                |m: &BaseVestingAccount| { &m.delegated_vesting },
                |m: &mut BaseVestingAccount| { &mut m.delegated_vesting },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "end_time",
                |m: &BaseVestingAccount| { &m.end_time },
                |m: &mut BaseVestingAccount| { &mut m.end_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BaseVestingAccount>(
                "BaseVestingAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BaseVestingAccount {
        static instance: ::protobuf::rt::LazyV2<BaseVestingAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BaseVestingAccount::new)
    }
}

impl ::protobuf::Clear for BaseVestingAccount {
    fn clear(&mut self) {
        self.base_account.clear();
        self.original_vesting.clear();
        self.delegated_free.clear();
        self.delegated_vesting.clear();
        self.end_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BaseVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseVestingAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContinuousVestingAccount {
    // message fields
    pub base_vesting_account: ::protobuf::SingularPtrField<BaseVestingAccount>,
    pub start_time: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContinuousVestingAccount {
    fn default() -> &'a ContinuousVestingAccount {
        <ContinuousVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl ContinuousVestingAccount {
    pub fn new() -> ContinuousVestingAccount {
        ::std::default::Default::default()
    }

    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;


    pub fn get_base_vesting_account(&self) -> &BaseVestingAccount {
        self.base_vesting_account.as_ref().unwrap_or_else(|| <BaseVestingAccount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_vesting_account(&mut self) {
        self.base_vesting_account.clear();
    }

    pub fn has_base_vesting_account(&self) -> bool {
        self.base_vesting_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_vesting_account(&mut self, v: BaseVestingAccount) {
        self.base_vesting_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_vesting_account(&mut self) -> &mut BaseVestingAccount {
        if self.base_vesting_account.is_none() {
            self.base_vesting_account.set_default();
        }
        self.base_vesting_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_vesting_account(&mut self) -> BaseVestingAccount {
        self.base_vesting_account.take().unwrap_or_else(|| BaseVestingAccount::new())
    }

    // int64 start_time = 2;


    pub fn get_start_time(&self) -> i64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: i64) {
        self.start_time = v;
    }
}

impl ::protobuf::Message for ContinuousVestingAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.base_vesting_account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_vesting_account)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.start_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_time != 0 {
            os.write_int64(2, self.start_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContinuousVestingAccount {
        ContinuousVestingAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BaseVestingAccount>>(
                "base_vesting_account",
                |m: &ContinuousVestingAccount| { &m.base_vesting_account },
                |m: &mut ContinuousVestingAccount| { &mut m.base_vesting_account },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "start_time",
                |m: &ContinuousVestingAccount| { &m.start_time },
                |m: &mut ContinuousVestingAccount| { &mut m.start_time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ContinuousVestingAccount>(
                "ContinuousVestingAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ContinuousVestingAccount {
        static instance: ::protobuf::rt::LazyV2<ContinuousVestingAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContinuousVestingAccount::new)
    }
}

impl ::protobuf::Clear for ContinuousVestingAccount {
    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.start_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContinuousVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContinuousVestingAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DelayedVestingAccount {
    // message fields
    pub base_vesting_account: ::protobuf::SingularPtrField<BaseVestingAccount>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DelayedVestingAccount {
    fn default() -> &'a DelayedVestingAccount {
        <DelayedVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl DelayedVestingAccount {
    pub fn new() -> DelayedVestingAccount {
        ::std::default::Default::default()
    }

    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;


    pub fn get_base_vesting_account(&self) -> &BaseVestingAccount {
        self.base_vesting_account.as_ref().unwrap_or_else(|| <BaseVestingAccount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_vesting_account(&mut self) {
        self.base_vesting_account.clear();
    }

    pub fn has_base_vesting_account(&self) -> bool {
        self.base_vesting_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_vesting_account(&mut self, v: BaseVestingAccount) {
        self.base_vesting_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_vesting_account(&mut self) -> &mut BaseVestingAccount {
        if self.base_vesting_account.is_none() {
            self.base_vesting_account.set_default();
        }
        self.base_vesting_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_vesting_account(&mut self) -> BaseVestingAccount {
        self.base_vesting_account.take().unwrap_or_else(|| BaseVestingAccount::new())
    }
}

impl ::protobuf::Message for DelayedVestingAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.base_vesting_account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_vesting_account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DelayedVestingAccount {
        DelayedVestingAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BaseVestingAccount>>(
                "base_vesting_account",
                |m: &DelayedVestingAccount| { &m.base_vesting_account },
                |m: &mut DelayedVestingAccount| { &mut m.base_vesting_account },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DelayedVestingAccount>(
                "DelayedVestingAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DelayedVestingAccount {
        static instance: ::protobuf::rt::LazyV2<DelayedVestingAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DelayedVestingAccount::new)
    }
}

impl ::protobuf::Clear for DelayedVestingAccount {
    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DelayedVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DelayedVestingAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Period {
    // message fields
    pub length: i64,
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Period {
    fn default() -> &'a Period {
        <Period as ::protobuf::Message>::default_instance()
    }
}

impl Period {
    pub fn new() -> Period {
        ::std::default::Default::default()
    }

    // int64 length = 1;


    pub fn get_length(&self) -> i64 {
        self.length
    }
    pub fn clear_length(&mut self) {
        self.length = 0;
    }

    // Param is passed by value, moved
    pub fn set_length(&mut self, v: i64) {
        self.length = v;
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 2;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Period {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.length = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.length != 0 {
            my_size += ::protobuf::rt::value_size(1, self.length, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.length != 0 {
            os.write_int64(1, self.length)?;
        }
        for v in &self.amount {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Period {
        Period::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "length",
                |m: &Period| { &m.length },
                |m: &mut Period| { &mut m.length },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "amount",
                |m: &Period| { &m.amount },
                |m: &mut Period| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Period>(
                "Period",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Period {
        static instance: ::protobuf::rt::LazyV2<Period> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Period::new)
    }
}

impl ::protobuf::Clear for Period {
    fn clear(&mut self) {
        self.length = 0;
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Period {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Period {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeriodicVestingAccount {
    // message fields
    pub base_vesting_account: ::protobuf::SingularPtrField<BaseVestingAccount>,
    pub start_time: i64,
    pub vesting_periods: ::protobuf::RepeatedField<Period>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PeriodicVestingAccount {
    fn default() -> &'a PeriodicVestingAccount {
        <PeriodicVestingAccount as ::protobuf::Message>::default_instance()
    }
}

impl PeriodicVestingAccount {
    pub fn new() -> PeriodicVestingAccount {
        ::std::default::Default::default()
    }

    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;


    pub fn get_base_vesting_account(&self) -> &BaseVestingAccount {
        self.base_vesting_account.as_ref().unwrap_or_else(|| <BaseVestingAccount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_vesting_account(&mut self) {
        self.base_vesting_account.clear();
    }

    pub fn has_base_vesting_account(&self) -> bool {
        self.base_vesting_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_vesting_account(&mut self, v: BaseVestingAccount) {
        self.base_vesting_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_vesting_account(&mut self) -> &mut BaseVestingAccount {
        if self.base_vesting_account.is_none() {
            self.base_vesting_account.set_default();
        }
        self.base_vesting_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_vesting_account(&mut self) -> BaseVestingAccount {
        self.base_vesting_account.take().unwrap_or_else(|| BaseVestingAccount::new())
    }

    // int64 start_time = 2;


    pub fn get_start_time(&self) -> i64 {
        self.start_time
    }
    pub fn clear_start_time(&mut self) {
        self.start_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: i64) {
        self.start_time = v;
    }

    // repeated .cosmos.vesting.v1beta1.Period vesting_periods = 3;


    pub fn get_vesting_periods(&self) -> &[Period] {
        &self.vesting_periods
    }
    pub fn clear_vesting_periods(&mut self) {
        self.vesting_periods.clear();
    }

    // Param is passed by value, moved
    pub fn set_vesting_periods(&mut self, v: ::protobuf::RepeatedField<Period>) {
        self.vesting_periods = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vesting_periods(&mut self) -> &mut ::protobuf::RepeatedField<Period> {
        &mut self.vesting_periods
    }

    // Take field
    pub fn take_vesting_periods(&mut self) -> ::protobuf::RepeatedField<Period> {
        ::std::mem::replace(&mut self.vesting_periods, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PeriodicVestingAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.base_vesting_account {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.vesting_periods {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_vesting_account)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.start_time = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vesting_periods)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_time != 0 {
            my_size += ::protobuf::rt::value_size(2, self.start_time, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.vesting_periods {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_time != 0 {
            os.write_int64(2, self.start_time)?;
        }
        for v in &self.vesting_periods {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeriodicVestingAccount {
        PeriodicVestingAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BaseVestingAccount>>(
                "base_vesting_account",
                |m: &PeriodicVestingAccount| { &m.base_vesting_account },
                |m: &mut PeriodicVestingAccount| { &mut m.base_vesting_account },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "start_time",
                |m: &PeriodicVestingAccount| { &m.start_time },
                |m: &mut PeriodicVestingAccount| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Period>>(
                "vesting_periods",
                |m: &PeriodicVestingAccount| { &m.vesting_periods },
                |m: &mut PeriodicVestingAccount| { &mut m.vesting_periods },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PeriodicVestingAccount>(
                "PeriodicVestingAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PeriodicVestingAccount {
        static instance: ::protobuf::rt::LazyV2<PeriodicVestingAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PeriodicVestingAccount::new)
    }
}

impl ::protobuf::Clear for PeriodicVestingAccount {
    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.start_time = 0;
        self.vesting_periods.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeriodicVestingAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeriodicVestingAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PermanentLockedAccount {
    // message fields
    pub base_vesting_account: ::protobuf::SingularPtrField<BaseVestingAccount>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PermanentLockedAccount {
    fn default() -> &'a PermanentLockedAccount {
        <PermanentLockedAccount as ::protobuf::Message>::default_instance()
    }
}

impl PermanentLockedAccount {
    pub fn new() -> PermanentLockedAccount {
        ::std::default::Default::default()
    }

    // .cosmos.vesting.v1beta1.BaseVestingAccount base_vesting_account = 1;


    pub fn get_base_vesting_account(&self) -> &BaseVestingAccount {
        self.base_vesting_account.as_ref().unwrap_or_else(|| <BaseVestingAccount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_vesting_account(&mut self) {
        self.base_vesting_account.clear();
    }

    pub fn has_base_vesting_account(&self) -> bool {
        self.base_vesting_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_vesting_account(&mut self, v: BaseVestingAccount) {
        self.base_vesting_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_vesting_account(&mut self) -> &mut BaseVestingAccount {
        if self.base_vesting_account.is_none() {
            self.base_vesting_account.set_default();
        }
        self.base_vesting_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_vesting_account(&mut self) -> BaseVestingAccount {
        self.base_vesting_account.take().unwrap_or_else(|| BaseVestingAccount::new())
    }
}

impl ::protobuf::Message for PermanentLockedAccount {
    fn is_initialized(&self) -> bool {
        for v in &self.base_vesting_account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_vesting_account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_vesting_account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PermanentLockedAccount {
        PermanentLockedAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BaseVestingAccount>>(
                "base_vesting_account",
                |m: &PermanentLockedAccount| { &m.base_vesting_account },
                |m: &mut PermanentLockedAccount| { &mut m.base_vesting_account },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PermanentLockedAccount>(
                "PermanentLockedAccount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PermanentLockedAccount {
        static instance: ::protobuf::rt::LazyV2<PermanentLockedAccount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PermanentLockedAccount::new)
    }
}

impl ::protobuf::Clear for PermanentLockedAccount {
    fn clear(&mut self) {
        self.base_vesting_account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PermanentLockedAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PermanentLockedAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$cosmos/vesting/v1beta1/vesting.proto\x12\x16cosmos.vesting.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a\
    \x1ecosmos/auth/v1beta1/auth.proto\"\xd2\x04\n\x12BaseVestingAccount\x12\
    I\n\x0cbase_account\x18\x01\x20\x01(\x0b2\x20.cosmos.auth.v1beta1.BaseAc\
    countR\x0bbaseAccountB\x04\xd0\xde\x1f\x01\x12\x91\x01\n\x10original_ves\
    ting\x18\x02\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x0foriginalVest\
    ingBK\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\
    \xf2\xde\x1f\x17yaml:\"original_vesting\"\x12\x8b\x01\n\x0edelegated_fre\
    e\x18\x03\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\rdelegatedFreeBI\
    \xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\xf2\
    \xde\x1f\x15yaml:\"delegated_free\"\x12\x94\x01\n\x11delegated_vesting\
    \x18\x04\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x10delegatedVesting\
    BL\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\
    \xf2\xde\x1f\x18yaml:\"delegated_vesting\"\x12.\n\x08end_time\x18\x05\
    \x20\x01(\x03R\x07endTimeB\x13\xf2\xde\x1f\x0fyaml:\"end_time\":\x08\x88\
    \xa0\x1f\0\x98\xa0\x1f\0\"\xbe\x01\n\x18ContinuousVestingAccount\x12b\n\
    \x14base_vesting_account\x18\x01\x20\x01(\x0b2*.cosmos.vesting.v1beta1.B\
    aseVestingAccountR\x12baseVestingAccountB\x04\xd0\xde\x1f\x01\x124\n\nst\
    art_time\x18\x02\x20\x01(\x03R\tstartTimeB\x15\xf2\xde\x1f\x11yaml:\"sta\
    rt_time\":\x08\x88\xa0\x1f\0\x98\xa0\x1f\0\"\x85\x01\n\x15DelayedVesting\
    Account\x12b\n\x14base_vesting_account\x18\x01\x20\x01(\x0b2*.cosmos.ves\
    ting.v1beta1.BaseVestingAccountR\x12baseVestingAccountB\x04\xd0\xde\x1f\
    \x01:\x08\x88\xa0\x1f\0\x98\xa0\x1f\0\"\x8b\x01\n\x06Period\x12\x16\n\
    \x06length\x18\x01\x20\x01(\x03R\x06length\x12c\n\x06amount\x18\x02\x20\
    \x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x06amountB0\xaa\xdf\x1f(github.\
    com/cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0:\x04\x98\xa0\x1f\0\"\xa5\
    \x02\n\x16PeriodicVestingAccount\x12b\n\x14base_vesting_account\x18\x01\
    \x20\x01(\x0b2*.cosmos.vesting.v1beta1.BaseVestingAccountR\x12baseVestin\
    gAccountB\x04\xd0\xde\x1f\x01\x124\n\nstart_time\x18\x02\x20\x01(\x03R\t\
    startTimeB\x15\xf2\xde\x1f\x11yaml:\"start_time\"\x12g\n\x0fvesting_peri\
    ods\x18\x03\x20\x03(\x0b2\x1e.cosmos.vesting.v1beta1.PeriodR\x0evestingP\
    eriodsB\x1e\xf2\xde\x1f\x16yaml:\"vesting_periods\"\xc8\xde\x1f\0:\x08\
    \x88\xa0\x1f\0\x98\xa0\x1f\0\"\x86\x01\n\x16PermanentLockedAccount\x12b\
    \n\x14base_vesting_account\x18\x01\x20\x01(\x0b2*.cosmos.vesting.v1beta1\
    .BaseVestingAccountR\x12baseVestingAccountB\x04\xd0\xde\x1f\x01:\x08\x88\
    \xa0\x1f\0\x98\xa0\x1f\0B3Z1github.com/cosmos/cosmos-sdk/x/auth/vesting/\
    typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
