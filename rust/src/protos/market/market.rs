// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/market/v1beta1/market.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub base_pool: ::std::vec::Vec<u8>,
    pub pool_recovery_period: u64,
    pub min_stability_spread: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // bytes base_pool = 1;


    pub fn get_base_pool(&self) -> &[u8] {
        &self.base_pool
    }
    pub fn clear_base_pool(&mut self) {
        self.base_pool.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_pool(&mut self, v: ::std::vec::Vec<u8>) {
        self.base_pool = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_pool(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.base_pool
    }

    // Take field
    pub fn take_base_pool(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.base_pool, ::std::vec::Vec::new())
    }

    // uint64 pool_recovery_period = 2;


    pub fn get_pool_recovery_period(&self) -> u64 {
        self.pool_recovery_period
    }
    pub fn clear_pool_recovery_period(&mut self) {
        self.pool_recovery_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_pool_recovery_period(&mut self, v: u64) {
        self.pool_recovery_period = v;
    }

    // bytes min_stability_spread = 3;


    pub fn get_min_stability_spread(&self) -> &[u8] {
        &self.min_stability_spread
    }
    pub fn clear_min_stability_spread(&mut self) {
        self.min_stability_spread.clear();
    }

    // Param is passed by value, moved
    pub fn set_min_stability_spread(&mut self, v: ::std::vec::Vec<u8>) {
        self.min_stability_spread = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_stability_spread(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.min_stability_spread
    }

    // Take field
    pub fn take_min_stability_spread(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.min_stability_spread, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.base_pool)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.pool_recovery_period = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.min_stability_spread)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.base_pool.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.base_pool);
        }
        if self.pool_recovery_period != 0 {
            my_size += ::protobuf::rt::value_size(2, self.pool_recovery_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.min_stability_spread.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.min_stability_spread);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.base_pool.is_empty() {
            os.write_bytes(1, &self.base_pool)?;
        }
        if self.pool_recovery_period != 0 {
            os.write_uint64(2, self.pool_recovery_period)?;
        }
        if !self.min_stability_spread.is_empty() {
            os.write_bytes(3, &self.min_stability_spread)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "base_pool",
                |m: &Params| { &m.base_pool },
                |m: &mut Params| { &mut m.base_pool },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "pool_recovery_period",
                |m: &Params| { &m.pool_recovery_period },
                |m: &mut Params| { &mut m.pool_recovery_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "min_stability_spread",
                |m: &Params| { &m.min_stability_spread },
                |m: &mut Params| { &mut m.min_stability_spread },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.base_pool.clear();
        self.pool_recovery_period = 0;
        self.min_stability_spread.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!terra/market/v1beta1/market.proto\x12\x14terra.market.v1beta1\x1a\x14\
    gogoproto/gogo.proto\"\xc7\x02\n\x06Params\x12_\n\tbase_pool\x18\x01\x20\
    \x01(\x0cR\x08basePoolBB\xf2\xde\x1f\x10yaml:\"base_pool\"\xda\xde\x1f&g\
    ithub.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12Q\n\x14pool_recov\
    ery_period\x18\x02\x20\x01(\x04R\x12poolRecoveryPeriodB\x1f\xf2\xde\x1f\
    \x1byaml:\"pool_recovery_period\"\x12\x7f\n\x14min_stability_spread\x18\
    \x03\x20\x01(\x0cR\x12minStabilitySpreadBM\xf2\xde\x1f\x1byaml:\"min_sta\
    bility_spread\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\
    \xde\x1f\0:\x08\xe8\xa0\x1f\x01\x98\xa0\x1f\0B,Z*github.com/terra-money/\
    core/x/market/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
