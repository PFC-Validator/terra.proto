// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/oracle/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::oracle::Params>,
    pub feeder_delegations: ::protobuf::RepeatedField<FeederDelegation>,
    pub exchange_rates: ::protobuf::RepeatedField<super::oracle::ExchangeRateTuple>,
    pub miss_counters: ::protobuf::RepeatedField<MissCounter>,
    pub aggregate_exchange_rate_prevotes: ::protobuf::RepeatedField<super::oracle::AggregateExchangeRatePrevote>,
    pub aggregate_exchange_rate_votes: ::protobuf::RepeatedField<super::oracle::AggregateExchangeRateVote>,
    pub tobin_taxes: ::protobuf::RepeatedField<TobinTax>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .terra.oracle.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::oracle::Params {
        self.params.as_ref().unwrap_or_else(|| <super::oracle::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::oracle::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::oracle::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::oracle::Params {
        self.params.take().unwrap_or_else(|| super::oracle::Params::new())
    }

    // repeated .terra.oracle.v1beta1.FeederDelegation feeder_delegations = 2;


    pub fn get_feeder_delegations(&self) -> &[FeederDelegation] {
        &self.feeder_delegations
    }
    pub fn clear_feeder_delegations(&mut self) {
        self.feeder_delegations.clear();
    }

    // Param is passed by value, moved
    pub fn set_feeder_delegations(&mut self, v: ::protobuf::RepeatedField<FeederDelegation>) {
        self.feeder_delegations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feeder_delegations(&mut self) -> &mut ::protobuf::RepeatedField<FeederDelegation> {
        &mut self.feeder_delegations
    }

    // Take field
    pub fn take_feeder_delegations(&mut self) -> ::protobuf::RepeatedField<FeederDelegation> {
        ::std::mem::replace(&mut self.feeder_delegations, ::protobuf::RepeatedField::new())
    }

    // repeated .terra.oracle.v1beta1.ExchangeRateTuple exchange_rates = 3;


    pub fn get_exchange_rates(&self) -> &[super::oracle::ExchangeRateTuple] {
        &self.exchange_rates
    }
    pub fn clear_exchange_rates(&mut self) {
        self.exchange_rates.clear();
    }

    // Param is passed by value, moved
    pub fn set_exchange_rates(&mut self, v: ::protobuf::RepeatedField<super::oracle::ExchangeRateTuple>) {
        self.exchange_rates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_exchange_rates(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::ExchangeRateTuple> {
        &mut self.exchange_rates
    }

    // Take field
    pub fn take_exchange_rates(&mut self) -> ::protobuf::RepeatedField<super::oracle::ExchangeRateTuple> {
        ::std::mem::replace(&mut self.exchange_rates, ::protobuf::RepeatedField::new())
    }

    // repeated .terra.oracle.v1beta1.MissCounter miss_counters = 4;


    pub fn get_miss_counters(&self) -> &[MissCounter] {
        &self.miss_counters
    }
    pub fn clear_miss_counters(&mut self) {
        self.miss_counters.clear();
    }

    // Param is passed by value, moved
    pub fn set_miss_counters(&mut self, v: ::protobuf::RepeatedField<MissCounter>) {
        self.miss_counters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_miss_counters(&mut self) -> &mut ::protobuf::RepeatedField<MissCounter> {
        &mut self.miss_counters
    }

    // Take field
    pub fn take_miss_counters(&mut self) -> ::protobuf::RepeatedField<MissCounter> {
        ::std::mem::replace(&mut self.miss_counters, ::protobuf::RepeatedField::new())
    }

    // repeated .terra.oracle.v1beta1.AggregateExchangeRatePrevote aggregate_exchange_rate_prevotes = 5;


    pub fn get_aggregate_exchange_rate_prevotes(&self) -> &[super::oracle::AggregateExchangeRatePrevote] {
        &self.aggregate_exchange_rate_prevotes
    }
    pub fn clear_aggregate_exchange_rate_prevotes(&mut self) {
        self.aggregate_exchange_rate_prevotes.clear();
    }

    // Param is passed by value, moved
    pub fn set_aggregate_exchange_rate_prevotes(&mut self, v: ::protobuf::RepeatedField<super::oracle::AggregateExchangeRatePrevote>) {
        self.aggregate_exchange_rate_prevotes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aggregate_exchange_rate_prevotes(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::AggregateExchangeRatePrevote> {
        &mut self.aggregate_exchange_rate_prevotes
    }

    // Take field
    pub fn take_aggregate_exchange_rate_prevotes(&mut self) -> ::protobuf::RepeatedField<super::oracle::AggregateExchangeRatePrevote> {
        ::std::mem::replace(&mut self.aggregate_exchange_rate_prevotes, ::protobuf::RepeatedField::new())
    }

    // repeated .terra.oracle.v1beta1.AggregateExchangeRateVote aggregate_exchange_rate_votes = 6;


    pub fn get_aggregate_exchange_rate_votes(&self) -> &[super::oracle::AggregateExchangeRateVote] {
        &self.aggregate_exchange_rate_votes
    }
    pub fn clear_aggregate_exchange_rate_votes(&mut self) {
        self.aggregate_exchange_rate_votes.clear();
    }

    // Param is passed by value, moved
    pub fn set_aggregate_exchange_rate_votes(&mut self, v: ::protobuf::RepeatedField<super::oracle::AggregateExchangeRateVote>) {
        self.aggregate_exchange_rate_votes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aggregate_exchange_rate_votes(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::AggregateExchangeRateVote> {
        &mut self.aggregate_exchange_rate_votes
    }

    // Take field
    pub fn take_aggregate_exchange_rate_votes(&mut self) -> ::protobuf::RepeatedField<super::oracle::AggregateExchangeRateVote> {
        ::std::mem::replace(&mut self.aggregate_exchange_rate_votes, ::protobuf::RepeatedField::new())
    }

    // repeated .terra.oracle.v1beta1.TobinTax tobin_taxes = 7;


    pub fn get_tobin_taxes(&self) -> &[TobinTax] {
        &self.tobin_taxes
    }
    pub fn clear_tobin_taxes(&mut self) {
        self.tobin_taxes.clear();
    }

    // Param is passed by value, moved
    pub fn set_tobin_taxes(&mut self, v: ::protobuf::RepeatedField<TobinTax>) {
        self.tobin_taxes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tobin_taxes(&mut self) -> &mut ::protobuf::RepeatedField<TobinTax> {
        &mut self.tobin_taxes
    }

    // Take field
    pub fn take_tobin_taxes(&mut self) -> ::protobuf::RepeatedField<TobinTax> {
        ::std::mem::replace(&mut self.tobin_taxes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.feeder_delegations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.exchange_rates {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.miss_counters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.aggregate_exchange_rate_prevotes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.aggregate_exchange_rate_votes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tobin_taxes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feeder_delegations)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.exchange_rates)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.miss_counters)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.aggregate_exchange_rate_prevotes)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.aggregate_exchange_rate_votes)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tobin_taxes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.feeder_delegations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.exchange_rates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.miss_counters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.aggregate_exchange_rate_prevotes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.aggregate_exchange_rate_votes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tobin_taxes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.feeder_delegations {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.exchange_rates {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.miss_counters {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.aggregate_exchange_rate_prevotes {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.aggregate_exchange_rate_votes {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.tobin_taxes {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oracle::Params>>(
                "params",
                |m: &GenesisState| { &m.params },
                |m: &mut GenesisState| { &mut m.params },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeederDelegation>>(
                "feeder_delegations",
                |m: &GenesisState| { &m.feeder_delegations },
                |m: &mut GenesisState| { &mut m.feeder_delegations },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oracle::ExchangeRateTuple>>(
                "exchange_rates",
                |m: &GenesisState| { &m.exchange_rates },
                |m: &mut GenesisState| { &mut m.exchange_rates },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MissCounter>>(
                "miss_counters",
                |m: &GenesisState| { &m.miss_counters },
                |m: &mut GenesisState| { &mut m.miss_counters },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oracle::AggregateExchangeRatePrevote>>(
                "aggregate_exchange_rate_prevotes",
                |m: &GenesisState| { &m.aggregate_exchange_rate_prevotes },
                |m: &mut GenesisState| { &mut m.aggregate_exchange_rate_prevotes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::oracle::AggregateExchangeRateVote>>(
                "aggregate_exchange_rate_votes",
                |m: &GenesisState| { &m.aggregate_exchange_rate_votes },
                |m: &mut GenesisState| { &mut m.aggregate_exchange_rate_votes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TobinTax>>(
                "tobin_taxes",
                |m: &GenesisState| { &m.tobin_taxes },
                |m: &mut GenesisState| { &mut m.tobin_taxes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenesisState>(
                "GenesisState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.feeder_delegations.clear();
        self.exchange_rates.clear();
        self.miss_counters.clear();
        self.aggregate_exchange_rate_prevotes.clear();
        self.aggregate_exchange_rate_votes.clear();
        self.tobin_taxes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeederDelegation {
    // message fields
    pub feeder_address: ::std::string::String,
    pub validator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeederDelegation {
    fn default() -> &'a FeederDelegation {
        <FeederDelegation as ::protobuf::Message>::default_instance()
    }
}

impl FeederDelegation {
    pub fn new() -> FeederDelegation {
        ::std::default::Default::default()
    }

    // string feeder_address = 1;


    pub fn get_feeder_address(&self) -> &str {
        &self.feeder_address
    }
    pub fn clear_feeder_address(&mut self) {
        self.feeder_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_feeder_address(&mut self, v: ::std::string::String) {
        self.feeder_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feeder_address(&mut self) -> &mut ::std::string::String {
        &mut self.feeder_address
    }

    // Take field
    pub fn take_feeder_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feeder_address, ::std::string::String::new())
    }

    // string validator_address = 2;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FeederDelegation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feeder_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feeder_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feeder_address);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.validator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feeder_address.is_empty() {
            os.write_string(1, &self.feeder_address)?;
        }
        if !self.validator_address.is_empty() {
            os.write_string(2, &self.validator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeederDelegation {
        FeederDelegation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "feeder_address",
                |m: &FeederDelegation| { &m.feeder_address },
                |m: &mut FeederDelegation| { &mut m.feeder_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &FeederDelegation| { &m.validator_address },
                |m: &mut FeederDelegation| { &mut m.validator_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FeederDelegation>(
                "FeederDelegation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FeederDelegation {
        static instance: ::protobuf::rt::LazyV2<FeederDelegation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeederDelegation::new)
    }
}

impl ::protobuf::Clear for FeederDelegation {
    fn clear(&mut self) {
        self.feeder_address.clear();
        self.validator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeederDelegation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeederDelegation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MissCounter {
    // message fields
    pub validator_address: ::std::string::String,
    pub miss_counter: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MissCounter {
    fn default() -> &'a MissCounter {
        <MissCounter as ::protobuf::Message>::default_instance()
    }
}

impl MissCounter {
    pub fn new() -> MissCounter {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // uint64 miss_counter = 2;


    pub fn get_miss_counter(&self) -> u64 {
        self.miss_counter
    }
    pub fn clear_miss_counter(&mut self) {
        self.miss_counter = 0;
    }

    // Param is passed by value, moved
    pub fn set_miss_counter(&mut self, v: u64) {
        self.miss_counter = v;
    }
}

impl ::protobuf::Message for MissCounter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.miss_counter = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if self.miss_counter != 0 {
            my_size += ::protobuf::rt::value_size(2, self.miss_counter, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if self.miss_counter != 0 {
            os.write_uint64(2, self.miss_counter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MissCounter {
        MissCounter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator_address",
                |m: &MissCounter| { &m.validator_address },
                |m: &mut MissCounter| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "miss_counter",
                |m: &MissCounter| { &m.miss_counter },
                |m: &mut MissCounter| { &mut m.miss_counter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MissCounter>(
                "MissCounter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MissCounter {
        static instance: ::protobuf::rt::LazyV2<MissCounter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MissCounter::new)
    }
}

impl ::protobuf::Clear for MissCounter {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.miss_counter = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MissCounter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MissCounter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TobinTax {
    // message fields
    pub denom: ::std::string::String,
    pub tobin_tax: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TobinTax {
    fn default() -> &'a TobinTax {
        <TobinTax as ::protobuf::Message>::default_instance()
    }
}

impl TobinTax {
    pub fn new() -> TobinTax {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string tobin_tax = 2;


    pub fn get_tobin_tax(&self) -> &str {
        &self.tobin_tax
    }
    pub fn clear_tobin_tax(&mut self) {
        self.tobin_tax.clear();
    }

    // Param is passed by value, moved
    pub fn set_tobin_tax(&mut self, v: ::std::string::String) {
        self.tobin_tax = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tobin_tax(&mut self) -> &mut ::std::string::String {
        &mut self.tobin_tax
    }

    // Take field
    pub fn take_tobin_tax(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tobin_tax, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TobinTax {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tobin_tax)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.tobin_tax.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tobin_tax);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.tobin_tax.is_empty() {
            os.write_string(2, &self.tobin_tax)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TobinTax {
        TobinTax::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &TobinTax| { &m.denom },
                |m: &mut TobinTax| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tobin_tax",
                |m: &TobinTax| { &m.tobin_tax },
                |m: &mut TobinTax| { &mut m.tobin_tax },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TobinTax>(
                "TobinTax",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TobinTax {
        static instance: ::protobuf::rt::LazyV2<TobinTax> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TobinTax::new)
    }
}

impl ::protobuf::Clear for TobinTax {
    fn clear(&mut self) {
        self.denom.clear();
        self.tobin_tax.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TobinTax {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TobinTax {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"terra/oracle/v1beta1/genesis.proto\x12\x14terra.oracle.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a!terra/oracle/v1beta1/oracle.proto\x1a\x1eco\
    smos/base/v1beta1/coin.proto\"\xa6\x05\n\x0cGenesisState\x12:\n\x06param\
    s\x18\x01\x20\x01(\x0b2\x1c.terra.oracle.v1beta1.ParamsR\x06paramsB\x04\
    \xc8\xde\x1f\0\x12[\n\x12feeder_delegations\x18\x02\x20\x03(\x0b2&.terra\
    .oracle.v1beta1.FeederDelegationR\x11feederDelegationsB\x04\xc8\xde\x1f\
    \0\x12j\n\x0eexchange_rates\x18\x03\x20\x03(\x0b2'.terra.oracle.v1beta1.\
    ExchangeRateTupleR\rexchangeRatesB\x1a\xaa\xdf\x1f\x12ExchangeRateTuples\
    \xc8\xde\x1f\0\x12L\n\rmiss_counters\x18\x04\x20\x03(\x0b2!.terra.oracle\
    .v1beta1.MissCounterR\x0cmissCountersB\x04\xc8\xde\x1f\0\x12\x81\x01\n\
    \x20aggregate_exchange_rate_prevotes\x18\x05\x20\x03(\x0b22.terra.oracle\
    .v1beta1.AggregateExchangeRatePrevoteR\x1daggregateExchangeRatePrevotesB\
    \x04\xc8\xde\x1f\0\x12x\n\x1daggregate_exchange_rate_votes\x18\x06\x20\
    \x03(\x0b2/.terra.oracle.v1beta1.AggregateExchangeRateVoteR\x1aaggregate\
    ExchangeRateVotesB\x04\xc8\xde\x1f\0\x12E\n\x0btobin_taxes\x18\x07\x20\
    \x03(\x0b2\x1e.terra.oracle.v1beta1.TobinTaxR\ntobinTaxesB\x04\xc8\xde\
    \x1f\0\"f\n\x10FeederDelegation\x12%\n\x0efeeder_address\x18\x01\x20\x01\
    (\tR\rfeederAddress\x12+\n\x11validator_address\x18\x02\x20\x01(\tR\x10v\
    alidatorAddress\"]\n\x0bMissCounter\x12+\n\x11validator_address\x18\x01\
    \x20\x01(\tR\x10validatorAddress\x12!\n\x0cmiss_counter\x18\x02\x20\x01(\
    \x04R\x0bmissCounter\"m\n\x08TobinTax\x12\x14\n\x05denom\x18\x01\x20\x01\
    (\tR\x05denom\x12K\n\ttobin_tax\x18\x02\x20\x01(\tR\x08tobinTaxB.\xda\
    \xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0B,Z*github.\
    com/terra-money/core/x/oracle/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
