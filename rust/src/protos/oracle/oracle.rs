// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/oracle/v1beta1/oracle.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub vote_period: u64,
    pub vote_threshold: ::std::string::String,
    pub reward_band: ::std::string::String,
    pub reward_distribution_window: u64,
    pub whitelist: ::protobuf::RepeatedField<Denom>,
    pub slash_fraction: ::std::string::String,
    pub slash_window: u64,
    pub min_valid_per_window: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // uint64 vote_period = 1;


    pub fn get_vote_period(&self) -> u64 {
        self.vote_period
    }
    pub fn clear_vote_period(&mut self) {
        self.vote_period = 0;
    }

    // Param is passed by value, moved
    pub fn set_vote_period(&mut self, v: u64) {
        self.vote_period = v;
    }

    // string vote_threshold = 2;


    pub fn get_vote_threshold(&self) -> &str {
        &self.vote_threshold
    }
    pub fn clear_vote_threshold(&mut self) {
        self.vote_threshold.clear();
    }

    // Param is passed by value, moved
    pub fn set_vote_threshold(&mut self, v: ::std::string::String) {
        self.vote_threshold = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vote_threshold(&mut self) -> &mut ::std::string::String {
        &mut self.vote_threshold
    }

    // Take field
    pub fn take_vote_threshold(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vote_threshold, ::std::string::String::new())
    }

    // string reward_band = 3;


    pub fn get_reward_band(&self) -> &str {
        &self.reward_band
    }
    pub fn clear_reward_band(&mut self) {
        self.reward_band.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_band(&mut self, v: ::std::string::String) {
        self.reward_band = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_band(&mut self) -> &mut ::std::string::String {
        &mut self.reward_band
    }

    // Take field
    pub fn take_reward_band(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_band, ::std::string::String::new())
    }

    // uint64 reward_distribution_window = 4;


    pub fn get_reward_distribution_window(&self) -> u64 {
        self.reward_distribution_window
    }
    pub fn clear_reward_distribution_window(&mut self) {
        self.reward_distribution_window = 0;
    }

    // Param is passed by value, moved
    pub fn set_reward_distribution_window(&mut self, v: u64) {
        self.reward_distribution_window = v;
    }

    // repeated .terra.oracle.v1beta1.Denom whitelist = 5;


    pub fn get_whitelist(&self) -> &[Denom] {
        &self.whitelist
    }
    pub fn clear_whitelist(&mut self) {
        self.whitelist.clear();
    }

    // Param is passed by value, moved
    pub fn set_whitelist(&mut self, v: ::protobuf::RepeatedField<Denom>) {
        self.whitelist = v;
    }

    // Mutable pointer to the field.
    pub fn mut_whitelist(&mut self) -> &mut ::protobuf::RepeatedField<Denom> {
        &mut self.whitelist
    }

    // Take field
    pub fn take_whitelist(&mut self) -> ::protobuf::RepeatedField<Denom> {
        ::std::mem::replace(&mut self.whitelist, ::protobuf::RepeatedField::new())
    }

    // string slash_fraction = 6;


    pub fn get_slash_fraction(&self) -> &str {
        &self.slash_fraction
    }
    pub fn clear_slash_fraction(&mut self) {
        self.slash_fraction.clear();
    }

    // Param is passed by value, moved
    pub fn set_slash_fraction(&mut self, v: ::std::string::String) {
        self.slash_fraction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slash_fraction(&mut self) -> &mut ::std::string::String {
        &mut self.slash_fraction
    }

    // Take field
    pub fn take_slash_fraction(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.slash_fraction, ::std::string::String::new())
    }

    // uint64 slash_window = 7;


    pub fn get_slash_window(&self) -> u64 {
        self.slash_window
    }
    pub fn clear_slash_window(&mut self) {
        self.slash_window = 0;
    }

    // Param is passed by value, moved
    pub fn set_slash_window(&mut self, v: u64) {
        self.slash_window = v;
    }

    // string min_valid_per_window = 8;


    pub fn get_min_valid_per_window(&self) -> &str {
        &self.min_valid_per_window
    }
    pub fn clear_min_valid_per_window(&mut self) {
        self.min_valid_per_window.clear();
    }

    // Param is passed by value, moved
    pub fn set_min_valid_per_window(&mut self, v: ::std::string::String) {
        self.min_valid_per_window = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_valid_per_window(&mut self) -> &mut ::std::string::String {
        &mut self.min_valid_per_window
    }

    // Take field
    pub fn take_min_valid_per_window(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.min_valid_per_window, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        for v in &self.whitelist {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.vote_period = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vote_threshold)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_band)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.reward_distribution_window = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.whitelist)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.slash_fraction)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.slash_window = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.min_valid_per_window)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.vote_period != 0 {
            my_size += ::protobuf::rt::value_size(1, self.vote_period, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.vote_threshold.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.vote_threshold);
        }
        if !self.reward_band.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.reward_band);
        }
        if self.reward_distribution_window != 0 {
            my_size += ::protobuf::rt::value_size(4, self.reward_distribution_window, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.whitelist {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.slash_fraction.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.slash_fraction);
        }
        if self.slash_window != 0 {
            my_size += ::protobuf::rt::value_size(7, self.slash_window, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.min_valid_per_window.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.min_valid_per_window);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.vote_period != 0 {
            os.write_uint64(1, self.vote_period)?;
        }
        if !self.vote_threshold.is_empty() {
            os.write_string(2, &self.vote_threshold)?;
        }
        if !self.reward_band.is_empty() {
            os.write_string(3, &self.reward_band)?;
        }
        if self.reward_distribution_window != 0 {
            os.write_uint64(4, self.reward_distribution_window)?;
        }
        for v in &self.whitelist {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.slash_fraction.is_empty() {
            os.write_string(6, &self.slash_fraction)?;
        }
        if self.slash_window != 0 {
            os.write_uint64(7, self.slash_window)?;
        }
        if !self.min_valid_per_window.is_empty() {
            os.write_string(8, &self.min_valid_per_window)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "vote_period",
                |m: &Params| { &m.vote_period },
                |m: &mut Params| { &mut m.vote_period },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vote_threshold",
                |m: &Params| { &m.vote_threshold },
                |m: &mut Params| { &mut m.vote_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reward_band",
                |m: &Params| { &m.reward_band },
                |m: &mut Params| { &mut m.reward_band },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "reward_distribution_window",
                |m: &Params| { &m.reward_distribution_window },
                |m: &mut Params| { &mut m.reward_distribution_window },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Denom>>(
                "whitelist",
                |m: &Params| { &m.whitelist },
                |m: &mut Params| { &mut m.whitelist },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "slash_fraction",
                |m: &Params| { &m.slash_fraction },
                |m: &mut Params| { &mut m.slash_fraction },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "slash_window",
                |m: &Params| { &m.slash_window },
                |m: &mut Params| { &mut m.slash_window },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "min_valid_per_window",
                |m: &Params| { &m.min_valid_per_window },
                |m: &mut Params| { &mut m.min_valid_per_window },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.vote_period = 0;
        self.vote_threshold.clear();
        self.reward_band.clear();
        self.reward_distribution_window = 0;
        self.whitelist.clear();
        self.slash_fraction.clear();
        self.slash_window = 0;
        self.min_valid_per_window.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Denom {
    // message fields
    pub name: ::std::string::String,
    pub tobin_tax: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Denom {
    fn default() -> &'a Denom {
        <Denom as ::protobuf::Message>::default_instance()
    }
}

impl Denom {
    pub fn new() -> Denom {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string tobin_tax = 2;


    pub fn get_tobin_tax(&self) -> &str {
        &self.tobin_tax
    }
    pub fn clear_tobin_tax(&mut self) {
        self.tobin_tax.clear();
    }

    // Param is passed by value, moved
    pub fn set_tobin_tax(&mut self, v: ::std::string::String) {
        self.tobin_tax = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tobin_tax(&mut self) -> &mut ::std::string::String {
        &mut self.tobin_tax
    }

    // Take field
    pub fn take_tobin_tax(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tobin_tax, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Denom {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tobin_tax)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.tobin_tax.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tobin_tax);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.tobin_tax.is_empty() {
            os.write_string(2, &self.tobin_tax)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Denom {
        Denom::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Denom| { &m.name },
                |m: &mut Denom| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tobin_tax",
                |m: &Denom| { &m.tobin_tax },
                |m: &mut Denom| { &mut m.tobin_tax },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Denom>(
                "Denom",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Denom {
        static instance: ::protobuf::rt::LazyV2<Denom> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Denom::new)
    }
}

impl ::protobuf::Clear for Denom {
    fn clear(&mut self) {
        self.name.clear();
        self.tobin_tax.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Denom {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Denom {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AggregateExchangeRatePrevote {
    // message fields
    pub hash: ::std::string::String,
    pub voter: ::std::string::String,
    pub submit_block: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AggregateExchangeRatePrevote {
    fn default() -> &'a AggregateExchangeRatePrevote {
        <AggregateExchangeRatePrevote as ::protobuf::Message>::default_instance()
    }
}

impl AggregateExchangeRatePrevote {
    pub fn new() -> AggregateExchangeRatePrevote {
        ::std::default::Default::default()
    }

    // string hash = 1;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    // string voter = 2;


    pub fn get_voter(&self) -> &str {
        &self.voter
    }
    pub fn clear_voter(&mut self) {
        self.voter.clear();
    }

    // Param is passed by value, moved
    pub fn set_voter(&mut self, v: ::std::string::String) {
        self.voter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voter(&mut self) -> &mut ::std::string::String {
        &mut self.voter
    }

    // Take field
    pub fn take_voter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.voter, ::std::string::String::new())
    }

    // uint64 submit_block = 3;


    pub fn get_submit_block(&self) -> u64 {
        self.submit_block
    }
    pub fn clear_submit_block(&mut self) {
        self.submit_block = 0;
    }

    // Param is passed by value, moved
    pub fn set_submit_block(&mut self, v: u64) {
        self.submit_block = v;
    }
}

impl ::protobuf::Message for AggregateExchangeRatePrevote {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.voter)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.submit_block = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        if self.submit_block != 0 {
            my_size += ::protobuf::rt::value_size(3, self.submit_block, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        if self.submit_block != 0 {
            os.write_uint64(3, self.submit_block)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AggregateExchangeRatePrevote {
        AggregateExchangeRatePrevote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &AggregateExchangeRatePrevote| { &m.hash },
                |m: &mut AggregateExchangeRatePrevote| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "voter",
                |m: &AggregateExchangeRatePrevote| { &m.voter },
                |m: &mut AggregateExchangeRatePrevote| { &mut m.voter },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "submit_block",
                |m: &AggregateExchangeRatePrevote| { &m.submit_block },
                |m: &mut AggregateExchangeRatePrevote| { &mut m.submit_block },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AggregateExchangeRatePrevote>(
                "AggregateExchangeRatePrevote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AggregateExchangeRatePrevote {
        static instance: ::protobuf::rt::LazyV2<AggregateExchangeRatePrevote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AggregateExchangeRatePrevote::new)
    }
}

impl ::protobuf::Clear for AggregateExchangeRatePrevote {
    fn clear(&mut self) {
        self.hash.clear();
        self.voter.clear();
        self.submit_block = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AggregateExchangeRatePrevote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AggregateExchangeRatePrevote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AggregateExchangeRateVote {
    // message fields
    pub exchange_rate_tuples: ::protobuf::RepeatedField<ExchangeRateTuple>,
    pub voter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AggregateExchangeRateVote {
    fn default() -> &'a AggregateExchangeRateVote {
        <AggregateExchangeRateVote as ::protobuf::Message>::default_instance()
    }
}

impl AggregateExchangeRateVote {
    pub fn new() -> AggregateExchangeRateVote {
        ::std::default::Default::default()
    }

    // repeated .terra.oracle.v1beta1.ExchangeRateTuple exchange_rate_tuples = 1;


    pub fn get_exchange_rate_tuples(&self) -> &[ExchangeRateTuple] {
        &self.exchange_rate_tuples
    }
    pub fn clear_exchange_rate_tuples(&mut self) {
        self.exchange_rate_tuples.clear();
    }

    // Param is passed by value, moved
    pub fn set_exchange_rate_tuples(&mut self, v: ::protobuf::RepeatedField<ExchangeRateTuple>) {
        self.exchange_rate_tuples = v;
    }

    // Mutable pointer to the field.
    pub fn mut_exchange_rate_tuples(&mut self) -> &mut ::protobuf::RepeatedField<ExchangeRateTuple> {
        &mut self.exchange_rate_tuples
    }

    // Take field
    pub fn take_exchange_rate_tuples(&mut self) -> ::protobuf::RepeatedField<ExchangeRateTuple> {
        ::std::mem::replace(&mut self.exchange_rate_tuples, ::protobuf::RepeatedField::new())
    }

    // string voter = 2;


    pub fn get_voter(&self) -> &str {
        &self.voter
    }
    pub fn clear_voter(&mut self) {
        self.voter.clear();
    }

    // Param is passed by value, moved
    pub fn set_voter(&mut self, v: ::std::string::String) {
        self.voter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voter(&mut self) -> &mut ::std::string::String {
        &mut self.voter
    }

    // Take field
    pub fn take_voter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.voter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AggregateExchangeRateVote {
    fn is_initialized(&self) -> bool {
        for v in &self.exchange_rate_tuples {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.exchange_rate_tuples)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.voter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.exchange_rate_tuples {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.voter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.exchange_rate_tuples {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.voter.is_empty() {
            os.write_string(2, &self.voter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AggregateExchangeRateVote {
        AggregateExchangeRateVote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExchangeRateTuple>>(
                "exchange_rate_tuples",
                |m: &AggregateExchangeRateVote| { &m.exchange_rate_tuples },
                |m: &mut AggregateExchangeRateVote| { &mut m.exchange_rate_tuples },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "voter",
                |m: &AggregateExchangeRateVote| { &m.voter },
                |m: &mut AggregateExchangeRateVote| { &mut m.voter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AggregateExchangeRateVote>(
                "AggregateExchangeRateVote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AggregateExchangeRateVote {
        static instance: ::protobuf::rt::LazyV2<AggregateExchangeRateVote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AggregateExchangeRateVote::new)
    }
}

impl ::protobuf::Clear for AggregateExchangeRateVote {
    fn clear(&mut self) {
        self.exchange_rate_tuples.clear();
        self.voter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AggregateExchangeRateVote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AggregateExchangeRateVote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExchangeRateTuple {
    // message fields
    pub denom: ::std::string::String,
    pub exchange_rate: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExchangeRateTuple {
    fn default() -> &'a ExchangeRateTuple {
        <ExchangeRateTuple as ::protobuf::Message>::default_instance()
    }
}

impl ExchangeRateTuple {
    pub fn new() -> ExchangeRateTuple {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string exchange_rate = 2;


    pub fn get_exchange_rate(&self) -> &str {
        &self.exchange_rate
    }
    pub fn clear_exchange_rate(&mut self) {
        self.exchange_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_exchange_rate(&mut self, v: ::std::string::String) {
        self.exchange_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exchange_rate(&mut self) -> &mut ::std::string::String {
        &mut self.exchange_rate
    }

    // Take field
    pub fn take_exchange_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exchange_rate, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ExchangeRateTuple {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exchange_rate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.exchange_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.exchange_rate);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.exchange_rate.is_empty() {
            os.write_string(2, &self.exchange_rate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExchangeRateTuple {
        ExchangeRateTuple::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &ExchangeRateTuple| { &m.denom },
                |m: &mut ExchangeRateTuple| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "exchange_rate",
                |m: &ExchangeRateTuple| { &m.exchange_rate },
                |m: &mut ExchangeRateTuple| { &mut m.exchange_rate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExchangeRateTuple>(
                "ExchangeRateTuple",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExchangeRateTuple {
        static instance: ::protobuf::rt::LazyV2<ExchangeRateTuple> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExchangeRateTuple::new)
    }
}

impl ::protobuf::Clear for ExchangeRateTuple {
    fn clear(&mut self) {
        self.denom.clear();
        self.exchange_rate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExchangeRateTuple {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExchangeRateTuple {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!terra/oracle/v1beta1/oracle.proto\x12\x14terra.oracle.v1beta1\x1a\x14\
    gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\x95\x06\n\
    \x06Params\x127\n\x0bvote_period\x18\x01\x20\x01(\x04R\nvotePeriodB\x16\
    \xf2\xde\x1f\x12yaml:\"vote_period\"\x12n\n\x0evote_threshold\x18\x02\
    \x20\x01(\tR\rvoteThresholdBG\xf2\xde\x1f\x15yaml:\"vote_threshold\"\xda\
    \xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12e\n\x0b\
    reward_band\x18\x03\x20\x01(\tR\nrewardBandBD\xf2\xde\x1f\x12yaml:\"rewa\
    rd_band\"\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\
    \0\x12c\n\x1areward_distribution_window\x18\x04\x20\x01(\x04R\x18rewardD\
    istributionWindowB%\xf2\xde\x1f!yaml:\"reward_distribution_window\"\x12`\
    \n\twhitelist\x18\x05\x20\x03(\x0b2\x1b.terra.oracle.v1beta1.DenomR\twhi\
    telistB%\xf2\xde\x1f\x10yaml:\"whitelist\"\xaa\xdf\x1f\tDenomList\xc8\
    \xde\x1f\0\x12n\n\x0eslash_fraction\x18\x06\x20\x01(\tR\rslashFractionBG\
    \xf2\xde\x1f\x15yaml:\"slash_fraction\"\xda\xde\x1f&github.com/cosmos/co\
    smos-sdk/types.Dec\xc8\xde\x1f\0\x12:\n\x0cslash_window\x18\x07\x20\x01(\
    \x04R\x0bslashWindowB\x17\xf2\xde\x1f\x13yaml:\"slash_window\"\x12~\n\
    \x14min_valid_per_window\x18\x08\x20\x01(\tR\x11minValidPerWindowBM\xf2\
    \xde\x1f\x1byaml:\"min_valid_per_window\"\xda\xde\x1f&github.com/cosmos/\
    cosmos-sdk/types.Dec\xc8\xde\x1f\0:\x08\xe8\xa0\x1f\x01\x98\xa0\x1f\0\"\
    \x9b\x01\n\x05Denom\x12#\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x0f\xf2\
    \xde\x1f\x0byaml:\"name\"\x12_\n\ttobin_tax\x18\x02\x20\x01(\tR\x08tobin\
    TaxBB\xf2\xde\x1f\x10yaml:\"tobin_tax\"\xda\xde\x1f&github.com/cosmos/co\
    smos-sdk/types.Dec\xc8\xde\x1f\0:\x0c\x88\xa0\x1f\0\xe8\xa0\x1f\0\x98\
    \xa0\x1f\0\"\xb5\x01\n\x1cAggregateExchangeRatePrevote\x12#\n\x04hash\
    \x18\x01\x20\x01(\tR\x04hashB\x0f\xf2\xde\x1f\x0byaml:\"hash\"\x12&\n\
    \x05voter\x18\x02\x20\x01(\tR\x05voterB\x10\xf2\xde\x1f\x0cyaml:\"voter\
    \"\x12:\n\x0csubmit_block\x18\x03\x20\x01(\x04R\x0bsubmitBlockB\x17\xf2\
    \xde\x1f\x13yaml:\"submit_block\":\x0c\x88\xa0\x1f\0\xe8\xa0\x1f\0\x98\
    \xa0\x1f\0\"\xe8\x01\n\x19AggregateExchangeRateVote\x12\x94\x01\n\x14exc\
    hange_rate_tuples\x18\x01\x20\x03(\x0b2'.terra.oracle.v1beta1.ExchangeRa\
    teTupleR\x12exchangeRateTuplesB9\xf2\xde\x1f\x1byaml:\"exchange_rate_tup\
    les\"\xaa\xdf\x1f\x12ExchangeRateTuples\xc8\xde\x1f\0\x12&\n\x05voter\
    \x18\x02\x20\x01(\tR\x05voterB\x10\xf2\xde\x1f\x0cyaml:\"voter\":\x0c\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0\x98\xa0\x1f\0\"\xb6\x01\n\x11ExchangeRateTu\
    ple\x12&\n\x05denom\x18\x01\x20\x01(\tR\x05denomB\x10\xf2\xde\x1f\x0cyam\
    l:\"denom\"\x12k\n\rexchange_rate\x18\x02\x20\x01(\tR\x0cexchangeRateBF\
    \xf2\xde\x1f\x14yaml:\"exchange_rate\"\xda\xde\x1f&github.com/cosmos/cos\
    mos-sdk/types.Dec\xc8\xde\x1f\0:\x0c\x88\xa0\x1f\0\xe8\xa0\x1f\0\x98\xa0\
    \x1f\0B,Z*github.com/terra-money/core/x/oracle/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
