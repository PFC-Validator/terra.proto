// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/oracle/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MsgAggregateExchangeRatePrevote {
    // message fields
    pub hash: ::std::string::String,
    pub feeder: ::std::string::String,
    pub validator: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgAggregateExchangeRatePrevote {
    fn default() -> &'a MsgAggregateExchangeRatePrevote {
        <MsgAggregateExchangeRatePrevote as ::protobuf::Message>::default_instance()
    }
}

impl MsgAggregateExchangeRatePrevote {
    pub fn new() -> MsgAggregateExchangeRatePrevote {
        ::std::default::Default::default()
    }

    // string hash = 1;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    // string feeder = 2;


    pub fn get_feeder(&self) -> &str {
        &self.feeder
    }
    pub fn clear_feeder(&mut self) {
        self.feeder.clear();
    }

    // Param is passed by value, moved
    pub fn set_feeder(&mut self, v: ::std::string::String) {
        self.feeder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feeder(&mut self) -> &mut ::std::string::String {
        &mut self.feeder
    }

    // Take field
    pub fn take_feeder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feeder, ::std::string::String::new())
    }

    // string validator = 3;


    pub fn get_validator(&self) -> &str {
        &self.validator
    }
    pub fn clear_validator(&mut self) {
        self.validator.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator(&mut self, v: ::std::string::String) {
        self.validator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator(&mut self) -> &mut ::std::string::String {
        &mut self.validator
    }

    // Take field
    pub fn take_validator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgAggregateExchangeRatePrevote {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feeder)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        if !self.feeder.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.feeder);
        }
        if !self.validator.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.validator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        if !self.feeder.is_empty() {
            os.write_string(2, &self.feeder)?;
        }
        if !self.validator.is_empty() {
            os.write_string(3, &self.validator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgAggregateExchangeRatePrevote {
        MsgAggregateExchangeRatePrevote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &MsgAggregateExchangeRatePrevote| { &m.hash },
                |m: &mut MsgAggregateExchangeRatePrevote| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "feeder",
                |m: &MsgAggregateExchangeRatePrevote| { &m.feeder },
                |m: &mut MsgAggregateExchangeRatePrevote| { &mut m.feeder },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator",
                |m: &MsgAggregateExchangeRatePrevote| { &m.validator },
                |m: &mut MsgAggregateExchangeRatePrevote| { &mut m.validator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgAggregateExchangeRatePrevote>(
                "MsgAggregateExchangeRatePrevote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgAggregateExchangeRatePrevote {
        static instance: ::protobuf::rt::LazyV2<MsgAggregateExchangeRatePrevote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgAggregateExchangeRatePrevote::new)
    }
}

impl ::protobuf::Clear for MsgAggregateExchangeRatePrevote {
    fn clear(&mut self) {
        self.hash.clear();
        self.feeder.clear();
        self.validator.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgAggregateExchangeRatePrevote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgAggregateExchangeRatePrevote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgAggregateExchangeRatePrevoteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgAggregateExchangeRatePrevoteResponse {
    fn default() -> &'a MsgAggregateExchangeRatePrevoteResponse {
        <MsgAggregateExchangeRatePrevoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgAggregateExchangeRatePrevoteResponse {
    pub fn new() -> MsgAggregateExchangeRatePrevoteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgAggregateExchangeRatePrevoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgAggregateExchangeRatePrevoteResponse {
        MsgAggregateExchangeRatePrevoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgAggregateExchangeRatePrevoteResponse>(
                "MsgAggregateExchangeRatePrevoteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgAggregateExchangeRatePrevoteResponse {
        static instance: ::protobuf::rt::LazyV2<MsgAggregateExchangeRatePrevoteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgAggregateExchangeRatePrevoteResponse::new)
    }
}

impl ::protobuf::Clear for MsgAggregateExchangeRatePrevoteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgAggregateExchangeRatePrevoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgAggregateExchangeRatePrevoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgAggregateExchangeRateVote {
    // message fields
    pub salt: ::std::string::String,
    pub exchange_rates: ::std::string::String,
    pub feeder: ::std::string::String,
    pub validator: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgAggregateExchangeRateVote {
    fn default() -> &'a MsgAggregateExchangeRateVote {
        <MsgAggregateExchangeRateVote as ::protobuf::Message>::default_instance()
    }
}

impl MsgAggregateExchangeRateVote {
    pub fn new() -> MsgAggregateExchangeRateVote {
        ::std::default::Default::default()
    }

    // string salt = 1;


    pub fn get_salt(&self) -> &str {
        &self.salt
    }
    pub fn clear_salt(&mut self) {
        self.salt.clear();
    }

    // Param is passed by value, moved
    pub fn set_salt(&mut self, v: ::std::string::String) {
        self.salt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_salt(&mut self) -> &mut ::std::string::String {
        &mut self.salt
    }

    // Take field
    pub fn take_salt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.salt, ::std::string::String::new())
    }

    // string exchange_rates = 2;


    pub fn get_exchange_rates(&self) -> &str {
        &self.exchange_rates
    }
    pub fn clear_exchange_rates(&mut self) {
        self.exchange_rates.clear();
    }

    // Param is passed by value, moved
    pub fn set_exchange_rates(&mut self, v: ::std::string::String) {
        self.exchange_rates = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exchange_rates(&mut self) -> &mut ::std::string::String {
        &mut self.exchange_rates
    }

    // Take field
    pub fn take_exchange_rates(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exchange_rates, ::std::string::String::new())
    }

    // string feeder = 3;


    pub fn get_feeder(&self) -> &str {
        &self.feeder
    }
    pub fn clear_feeder(&mut self) {
        self.feeder.clear();
    }

    // Param is passed by value, moved
    pub fn set_feeder(&mut self, v: ::std::string::String) {
        self.feeder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feeder(&mut self) -> &mut ::std::string::String {
        &mut self.feeder
    }

    // Take field
    pub fn take_feeder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feeder, ::std::string::String::new())
    }

    // string validator = 4;


    pub fn get_validator(&self) -> &str {
        &self.validator
    }
    pub fn clear_validator(&mut self) {
        self.validator.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator(&mut self, v: ::std::string::String) {
        self.validator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator(&mut self) -> &mut ::std::string::String {
        &mut self.validator
    }

    // Take field
    pub fn take_validator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgAggregateExchangeRateVote {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.salt)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exchange_rates)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feeder)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.salt.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.salt);
        }
        if !self.exchange_rates.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.exchange_rates);
        }
        if !self.feeder.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.feeder);
        }
        if !self.validator.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.validator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.salt.is_empty() {
            os.write_string(1, &self.salt)?;
        }
        if !self.exchange_rates.is_empty() {
            os.write_string(2, &self.exchange_rates)?;
        }
        if !self.feeder.is_empty() {
            os.write_string(3, &self.feeder)?;
        }
        if !self.validator.is_empty() {
            os.write_string(4, &self.validator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgAggregateExchangeRateVote {
        MsgAggregateExchangeRateVote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "salt",
                |m: &MsgAggregateExchangeRateVote| { &m.salt },
                |m: &mut MsgAggregateExchangeRateVote| { &mut m.salt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "exchange_rates",
                |m: &MsgAggregateExchangeRateVote| { &m.exchange_rates },
                |m: &mut MsgAggregateExchangeRateVote| { &mut m.exchange_rates },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "feeder",
                |m: &MsgAggregateExchangeRateVote| { &m.feeder },
                |m: &mut MsgAggregateExchangeRateVote| { &mut m.feeder },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "validator",
                |m: &MsgAggregateExchangeRateVote| { &m.validator },
                |m: &mut MsgAggregateExchangeRateVote| { &mut m.validator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgAggregateExchangeRateVote>(
                "MsgAggregateExchangeRateVote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgAggregateExchangeRateVote {
        static instance: ::protobuf::rt::LazyV2<MsgAggregateExchangeRateVote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgAggregateExchangeRateVote::new)
    }
}

impl ::protobuf::Clear for MsgAggregateExchangeRateVote {
    fn clear(&mut self) {
        self.salt.clear();
        self.exchange_rates.clear();
        self.feeder.clear();
        self.validator.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgAggregateExchangeRateVote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgAggregateExchangeRateVote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgAggregateExchangeRateVoteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgAggregateExchangeRateVoteResponse {
    fn default() -> &'a MsgAggregateExchangeRateVoteResponse {
        <MsgAggregateExchangeRateVoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgAggregateExchangeRateVoteResponse {
    pub fn new() -> MsgAggregateExchangeRateVoteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgAggregateExchangeRateVoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgAggregateExchangeRateVoteResponse {
        MsgAggregateExchangeRateVoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgAggregateExchangeRateVoteResponse>(
                "MsgAggregateExchangeRateVoteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgAggregateExchangeRateVoteResponse {
        static instance: ::protobuf::rt::LazyV2<MsgAggregateExchangeRateVoteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgAggregateExchangeRateVoteResponse::new)
    }
}

impl ::protobuf::Clear for MsgAggregateExchangeRateVoteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgAggregateExchangeRateVoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgAggregateExchangeRateVoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDelegateFeedConsent {
    // message fields
    pub operator: ::std::string::String,
    pub delegate: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDelegateFeedConsent {
    fn default() -> &'a MsgDelegateFeedConsent {
        <MsgDelegateFeedConsent as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegateFeedConsent {
    pub fn new() -> MsgDelegateFeedConsent {
        ::std::default::Default::default()
    }

    // string operator = 1;


    pub fn get_operator(&self) -> &str {
        &self.operator
    }
    pub fn clear_operator(&mut self) {
        self.operator.clear();
    }

    // Param is passed by value, moved
    pub fn set_operator(&mut self, v: ::std::string::String) {
        self.operator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operator(&mut self) -> &mut ::std::string::String {
        &mut self.operator
    }

    // Take field
    pub fn take_operator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.operator, ::std::string::String::new())
    }

    // string delegate = 2;


    pub fn get_delegate(&self) -> &str {
        &self.delegate
    }
    pub fn clear_delegate(&mut self) {
        self.delegate.clear();
    }

    // Param is passed by value, moved
    pub fn set_delegate(&mut self, v: ::std::string::String) {
        self.delegate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delegate(&mut self) -> &mut ::std::string::String {
        &mut self.delegate
    }

    // Take field
    pub fn take_delegate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delegate, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgDelegateFeedConsent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.operator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delegate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.operator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.operator);
        }
        if !self.delegate.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.delegate);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.operator.is_empty() {
            os.write_string(1, &self.operator)?;
        }
        if !self.delegate.is_empty() {
            os.write_string(2, &self.delegate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDelegateFeedConsent {
        MsgDelegateFeedConsent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "operator",
                |m: &MsgDelegateFeedConsent| { &m.operator },
                |m: &mut MsgDelegateFeedConsent| { &mut m.operator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delegate",
                |m: &MsgDelegateFeedConsent| { &m.delegate },
                |m: &mut MsgDelegateFeedConsent| { &mut m.delegate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDelegateFeedConsent>(
                "MsgDelegateFeedConsent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDelegateFeedConsent {
        static instance: ::protobuf::rt::LazyV2<MsgDelegateFeedConsent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDelegateFeedConsent::new)
    }
}

impl ::protobuf::Clear for MsgDelegateFeedConsent {
    fn clear(&mut self) {
        self.operator.clear();
        self.delegate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDelegateFeedConsent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegateFeedConsent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgDelegateFeedConsentResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDelegateFeedConsentResponse {
    fn default() -> &'a MsgDelegateFeedConsentResponse {
        <MsgDelegateFeedConsentResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgDelegateFeedConsentResponse {
    pub fn new() -> MsgDelegateFeedConsentResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgDelegateFeedConsentResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDelegateFeedConsentResponse {
        MsgDelegateFeedConsentResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgDelegateFeedConsentResponse>(
                "MsgDelegateFeedConsentResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgDelegateFeedConsentResponse {
        static instance: ::protobuf::rt::LazyV2<MsgDelegateFeedConsentResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDelegateFeedConsentResponse::new)
    }
}

impl ::protobuf::Clear for MsgDelegateFeedConsentResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgDelegateFeedConsentResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDelegateFeedConsentResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dterra/oracle/v1beta1/tx.proto\x12\x14terra.oracle.v1beta1\x1a\x14g\
    ogoproto/gogo.proto\"\xaf\x01\n\x1fMsgAggregateExchangeRatePrevote\x12#\
    \n\x04hash\x18\x01\x20\x01(\tR\x04hashB\x0f\xf2\xde\x1f\x0byaml:\"hash\"\
    \x12)\n\x06feeder\x18\x02\x20\x01(\tR\x06feederB\x11\xf2\xde\x1f\ryaml:\
    \"feeder\"\x122\n\tvalidator\x18\x03\x20\x01(\tR\tvalidatorB\x14\xf2\xde\
    \x1f\x10yaml:\"validator\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\")\n'MsgAggr\
    egateExchangeRatePrevoteResponse\"\xee\x01\n\x1cMsgAggregateExchangeRate\
    Vote\x12#\n\x04salt\x18\x01\x20\x01(\tR\x04saltB\x0f\xf2\xde\x1f\x0byaml\
    :\"salt\"\x12@\n\x0eexchange_rates\x18\x02\x20\x01(\tR\rexchangeRatesB\
    \x19\xf2\xde\x1f\x15yaml:\"exchange_rates\"\x12)\n\x06feeder\x18\x03\x20\
    \x01(\tR\x06feederB\x11\xf2\xde\x1f\ryaml:\"feeder\"\x122\n\tvalidator\
    \x18\x04\x20\x01(\tR\tvalidatorB\x14\xf2\xde\x1f\x10yaml:\"validator\":\
    \x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"&\n$MsgAggregateExchangeRateVoteRespon\
    se\"\x84\x01\n\x16MsgDelegateFeedConsent\x12/\n\x08operator\x18\x01\x20\
    \x01(\tR\x08operatorB\x13\xf2\xde\x1f\x0fyaml:\"operator\"\x12/\n\x08del\
    egate\x18\x02\x20\x01(\tR\x08delegateB\x13\xf2\xde\x1f\x0fyaml:\"delegat\
    e\":\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x20\n\x1eMsgDelegateFeedConsentRe\
    sponse2\xa5\x03\n\x03Msg\x12\x94\x01\n\x1cAggregateExchangeRatePrevote\
    \x125.terra.oracle.v1beta1.MsgAggregateExchangeRatePrevote\x1a=.terra.or\
    acle.v1beta1.MsgAggregateExchangeRatePrevoteResponse\x12\x8b\x01\n\x19Ag\
    gregateExchangeRateVote\x122.terra.oracle.v1beta1.MsgAggregateExchangeRa\
    teVote\x1a:.terra.oracle.v1beta1.MsgAggregateExchangeRateVoteResponse\
    \x12y\n\x13DelegateFeedConsent\x12,.terra.oracle.v1beta1.MsgDelegateFeed\
    Consent\x1a4.terra.oracle.v1beta1.MsgDelegateFeedConsentResponseB,Z*gith\
    ub.com/terra-money/core/x/oracle/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
