// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/wasm/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::wasm::Params>,
    pub last_code_id: u64,
    pub last_instance_id: u64,
    pub codes: ::protobuf::RepeatedField<Code>,
    pub contracts: ::protobuf::RepeatedField<Contract>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .terra.wasm.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::wasm::Params {
        self.params.as_ref().unwrap_or_else(|| <super::wasm::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::wasm::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::wasm::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::wasm::Params {
        self.params.take().unwrap_or_else(|| super::wasm::Params::new())
    }

    // uint64 last_code_id = 2;


    pub fn get_last_code_id(&self) -> u64 {
        self.last_code_id
    }
    pub fn clear_last_code_id(&mut self) {
        self.last_code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_code_id(&mut self, v: u64) {
        self.last_code_id = v;
    }

    // uint64 last_instance_id = 3;


    pub fn get_last_instance_id(&self) -> u64 {
        self.last_instance_id
    }
    pub fn clear_last_instance_id(&mut self) {
        self.last_instance_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_instance_id(&mut self, v: u64) {
        self.last_instance_id = v;
    }

    // repeated .terra.wasm.v1beta1.Code codes = 4;


    pub fn get_codes(&self) -> &[Code] {
        &self.codes
    }
    pub fn clear_codes(&mut self) {
        self.codes.clear();
    }

    // Param is passed by value, moved
    pub fn set_codes(&mut self, v: ::protobuf::RepeatedField<Code>) {
        self.codes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_codes(&mut self) -> &mut ::protobuf::RepeatedField<Code> {
        &mut self.codes
    }

    // Take field
    pub fn take_codes(&mut self) -> ::protobuf::RepeatedField<Code> {
        ::std::mem::replace(&mut self.codes, ::protobuf::RepeatedField::new())
    }

    // repeated .terra.wasm.v1beta1.Contract contracts = 5;


    pub fn get_contracts(&self) -> &[Contract] {
        &self.contracts
    }
    pub fn clear_contracts(&mut self) {
        self.contracts.clear();
    }

    // Param is passed by value, moved
    pub fn set_contracts(&mut self, v: ::protobuf::RepeatedField<Contract>) {
        self.contracts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_contracts(&mut self) -> &mut ::protobuf::RepeatedField<Contract> {
        &mut self.contracts
    }

    // Take field
    pub fn take_contracts(&mut self) -> ::protobuf::RepeatedField<Contract> {
        ::std::mem::replace(&mut self.contracts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.codes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.contracts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_code_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_instance_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.codes)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.contracts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.last_code_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last_code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_instance_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.last_instance_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.codes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.contracts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.last_code_id != 0 {
            os.write_uint64(2, self.last_code_id)?;
        }
        if self.last_instance_id != 0 {
            os.write_uint64(3, self.last_instance_id)?;
        }
        for v in &self.codes {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.contracts {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wasm::Params>>(
                "params",
                |m: &GenesisState| { &m.params },
                |m: &mut GenesisState| { &mut m.params },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_code_id",
                |m: &GenesisState| { &m.last_code_id },
                |m: &mut GenesisState| { &mut m.last_code_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_instance_id",
                |m: &GenesisState| { &m.last_instance_id },
                |m: &mut GenesisState| { &mut m.last_instance_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Code>>(
                "codes",
                |m: &GenesisState| { &m.codes },
                |m: &mut GenesisState| { &mut m.codes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Contract>>(
                "contracts",
                |m: &GenesisState| { &m.contracts },
                |m: &mut GenesisState| { &mut m.contracts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenesisState>(
                "GenesisState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.last_code_id = 0;
        self.last_instance_id = 0;
        self.codes.clear();
        self.contracts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Model {
    // message fields
    pub key: ::std::vec::Vec<u8>,
    pub value: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Model {
    fn default() -> &'a Model {
        <Model as ::protobuf::Message>::default_instance()
    }
}

impl Model {
    pub fn new() -> Model {
        ::std::default::Default::default()
    }

    // bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // bytes value = 2;


    pub fn get_value(&self) -> &[u8] {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.value, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Model {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Model {
        Model::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &Model| { &m.key },
                |m: &mut Model| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "value",
                |m: &Model| { &m.value },
                |m: &mut Model| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Model>(
                "Model",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Model {
        static instance: ::protobuf::rt::LazyV2<Model> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Model::new)
    }
}

impl ::protobuf::Clear for Model {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Model {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Model {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Code {
    // message fields
    pub code_info: ::protobuf::SingularPtrField<super::wasm::CodeInfo>,
    pub code_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Code {
    fn default() -> &'a Code {
        <Code as ::protobuf::Message>::default_instance()
    }
}

impl Code {
    pub fn new() -> Code {
        ::std::default::Default::default()
    }

    // .terra.wasm.v1beta1.CodeInfo code_info = 1;


    pub fn get_code_info(&self) -> &super::wasm::CodeInfo {
        self.code_info.as_ref().unwrap_or_else(|| <super::wasm::CodeInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_code_info(&mut self) {
        self.code_info.clear();
    }

    pub fn has_code_info(&self) -> bool {
        self.code_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code_info(&mut self, v: super::wasm::CodeInfo) {
        self.code_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code_info(&mut self) -> &mut super::wasm::CodeInfo {
        if self.code_info.is_none() {
            self.code_info.set_default();
        }
        self.code_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_code_info(&mut self) -> super::wasm::CodeInfo {
        self.code_info.take().unwrap_or_else(|| super::wasm::CodeInfo::new())
    }

    // bytes code_bytes = 2;


    pub fn get_code_bytes(&self) -> &[u8] {
        &self.code_bytes
    }
    pub fn clear_code_bytes(&mut self) {
        self.code_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_code_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.code_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.code_bytes
    }

    // Take field
    pub fn take_code_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.code_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Code {
    fn is_initialized(&self) -> bool {
        for v in &self.code_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.code_info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.code_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.code_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.code_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.code_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.code_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.code_bytes.is_empty() {
            os.write_bytes(2, &self.code_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Code {
        Code::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wasm::CodeInfo>>(
                "code_info",
                |m: &Code| { &m.code_info },
                |m: &mut Code| { &mut m.code_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "code_bytes",
                |m: &Code| { &m.code_bytes },
                |m: &mut Code| { &mut m.code_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Code>(
                "Code",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Code {
        static instance: ::protobuf::rt::LazyV2<Code> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Code::new)
    }
}

impl ::protobuf::Clear for Code {
    fn clear(&mut self) {
        self.code_info.clear();
        self.code_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Code {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Code {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Contract {
    // message fields
    pub contract_info: ::protobuf::SingularPtrField<super::wasm::ContractInfo>,
    pub contract_store: ::protobuf::RepeatedField<Model>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Contract {
    fn default() -> &'a Contract {
        <Contract as ::protobuf::Message>::default_instance()
    }
}

impl Contract {
    pub fn new() -> Contract {
        ::std::default::Default::default()
    }

    // .terra.wasm.v1beta1.ContractInfo contract_info = 1;


    pub fn get_contract_info(&self) -> &super::wasm::ContractInfo {
        self.contract_info.as_ref().unwrap_or_else(|| <super::wasm::ContractInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_contract_info(&mut self) {
        self.contract_info.clear();
    }

    pub fn has_contract_info(&self) -> bool {
        self.contract_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contract_info(&mut self, v: super::wasm::ContractInfo) {
        self.contract_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_info(&mut self) -> &mut super::wasm::ContractInfo {
        if self.contract_info.is_none() {
            self.contract_info.set_default();
        }
        self.contract_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_contract_info(&mut self) -> super::wasm::ContractInfo {
        self.contract_info.take().unwrap_or_else(|| super::wasm::ContractInfo::new())
    }

    // repeated .terra.wasm.v1beta1.Model contract_store = 2;


    pub fn get_contract_store(&self) -> &[Model] {
        &self.contract_store
    }
    pub fn clear_contract_store(&mut self) {
        self.contract_store.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_store(&mut self, v: ::protobuf::RepeatedField<Model>) {
        self.contract_store = v;
    }

    // Mutable pointer to the field.
    pub fn mut_contract_store(&mut self) -> &mut ::protobuf::RepeatedField<Model> {
        &mut self.contract_store
    }

    // Take field
    pub fn take_contract_store(&mut self) -> ::protobuf::RepeatedField<Model> {
        ::std::mem::replace(&mut self.contract_store, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Contract {
    fn is_initialized(&self) -> bool {
        for v in &self.contract_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.contract_store {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contract_info)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.contract_store)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.contract_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.contract_store {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.contract_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.contract_store {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Contract {
        Contract::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wasm::ContractInfo>>(
                "contract_info",
                |m: &Contract| { &m.contract_info },
                |m: &mut Contract| { &mut m.contract_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Model>>(
                "contract_store",
                |m: &Contract| { &m.contract_store },
                |m: &mut Contract| { &mut m.contract_store },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Contract>(
                "Contract",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Contract {
        static instance: ::protobuf::rt::LazyV2<Contract> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Contract::new)
    }
}

impl ::protobuf::Clear for Contract {
    fn clear(&mut self) {
        self.contract_info.clear();
        self.contract_store.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Contract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Contract {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20terra/wasm/v1beta1/genesis.proto\x12\x12terra.wasm.v1beta1\x1a\x14\
    gogoproto/gogo.proto\x1a\x1dterra/wasm/v1beta1/wasm.proto\x1a\x1ecosmos/\
    base/v1beta1/coin.proto\"\xb0\x02\n\x0cGenesisState\x128\n\x06params\x18\
    \x01\x20\x01(\x0b2\x1a.terra.wasm.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\
    \x1f\0\x120\n\x0clast_code_id\x18\x02\x20\x01(\x04R\nlastCodeIdB\x0e\xe2\
    \xde\x1f\nLastCodeID\x12<\n\x10last_instance_id\x18\x03\x20\x01(\x04R\
    \x0elastInstanceIdB\x12\xe2\xde\x1f\x0eLastInstanceID\x124\n\x05codes\
    \x18\x04\x20\x03(\x0b2\x18.terra.wasm.v1beta1.CodeR\x05codesB\x04\xc8\
    \xde\x1f\0\x12@\n\tcontracts\x18\x05\x20\x03(\x0b2\x1c.terra.wasm.v1beta\
    1.ContractR\tcontractsB\x04\xc8\xde\x1f\0\"/\n\x05Model\x12\x10\n\x03key\
    \x18\x01\x20\x01(\x0cR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x0cR\
    \x05value\"f\n\x04Code\x12?\n\tcode_info\x18\x01\x20\x01(\x0b2\x1c.terra\
    .wasm.v1beta1.CodeInfoR\x08codeInfoB\x04\xc8\xde\x1f\0\x12\x1d\n\ncode_b\
    ytes\x18\x02\x20\x01(\x0cR\tcodeBytes\"\x9f\x01\n\x08Contract\x12K\n\rco\
    ntract_info\x18\x01\x20\x01(\x0b2\x20.terra.wasm.v1beta1.ContractInfoR\
    \x0ccontractInfoB\x04\xc8\xde\x1f\0\x12F\n\x0econtract_store\x18\x02\x20\
    \x03(\x0b2\x19.terra.wasm.v1beta1.ModelR\rcontractStoreB\x04\xc8\xde\x1f\
    \0B*Z(github.com/terra-money/core/x/wasm/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
