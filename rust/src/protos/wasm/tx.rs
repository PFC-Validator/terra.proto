// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/wasm/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct MsgStoreCode {
    // message fields
    pub sender: ::std::string::String,
    pub wasm_byte_code: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgStoreCode {
    fn default() -> &'a MsgStoreCode {
        <MsgStoreCode as ::protobuf::Message>::default_instance()
    }
}

impl MsgStoreCode {
    pub fn new() -> MsgStoreCode {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // bytes wasm_byte_code = 2;


    pub fn get_wasm_byte_code(&self) -> &[u8] {
        &self.wasm_byte_code
    }
    pub fn clear_wasm_byte_code(&mut self) {
        self.wasm_byte_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_wasm_byte_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.wasm_byte_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wasm_byte_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.wasm_byte_code
    }

    // Take field
    pub fn take_wasm_byte_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.wasm_byte_code, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgStoreCode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.wasm_byte_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.wasm_byte_code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.wasm_byte_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.wasm_byte_code.is_empty() {
            os.write_bytes(2, &self.wasm_byte_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgStoreCode {
        MsgStoreCode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &MsgStoreCode| { &m.sender },
                |m: &mut MsgStoreCode| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "wasm_byte_code",
                |m: &MsgStoreCode| { &m.wasm_byte_code },
                |m: &mut MsgStoreCode| { &mut m.wasm_byte_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgStoreCode>(
                "MsgStoreCode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgStoreCode {
        static instance: ::protobuf::rt::LazyV2<MsgStoreCode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgStoreCode::new)
    }
}

impl ::protobuf::Clear for MsgStoreCode {
    fn clear(&mut self) {
        self.sender.clear();
        self.wasm_byte_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgStoreCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgStoreCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgStoreCodeResponse {
    // message fields
    pub code_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgStoreCodeResponse {
    fn default() -> &'a MsgStoreCodeResponse {
        <MsgStoreCodeResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgStoreCodeResponse {
    pub fn new() -> MsgStoreCodeResponse {
        ::std::default::Default::default()
    }

    // uint64 code_id = 1;


    pub fn get_code_id(&self) -> u64 {
        self.code_id
    }
    pub fn clear_code_id(&mut self) {
        self.code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_code_id(&mut self, v: u64) {
        self.code_id = v;
    }
}

impl ::protobuf::Message for MsgStoreCodeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.code_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code_id != 0 {
            os.write_uint64(1, self.code_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgStoreCodeResponse {
        MsgStoreCodeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "code_id",
                |m: &MsgStoreCodeResponse| { &m.code_id },
                |m: &mut MsgStoreCodeResponse| { &mut m.code_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgStoreCodeResponse>(
                "MsgStoreCodeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgStoreCodeResponse {
        static instance: ::protobuf::rt::LazyV2<MsgStoreCodeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgStoreCodeResponse::new)
    }
}

impl ::protobuf::Clear for MsgStoreCodeResponse {
    fn clear(&mut self) {
        self.code_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgStoreCodeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgStoreCodeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgMigrateCode {
    // message fields
    pub code_id: u64,
    pub sender: ::std::string::String,
    pub wasm_byte_code: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgMigrateCode {
    fn default() -> &'a MsgMigrateCode {
        <MsgMigrateCode as ::protobuf::Message>::default_instance()
    }
}

impl MsgMigrateCode {
    pub fn new() -> MsgMigrateCode {
        ::std::default::Default::default()
    }

    // uint64 code_id = 1;


    pub fn get_code_id(&self) -> u64 {
        self.code_id
    }
    pub fn clear_code_id(&mut self) {
        self.code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_code_id(&mut self, v: u64) {
        self.code_id = v;
    }

    // string sender = 2;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // bytes wasm_byte_code = 3;


    pub fn get_wasm_byte_code(&self) -> &[u8] {
        &self.wasm_byte_code
    }
    pub fn clear_wasm_byte_code(&mut self) {
        self.wasm_byte_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_wasm_byte_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.wasm_byte_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_wasm_byte_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.wasm_byte_code
    }

    // Take field
    pub fn take_wasm_byte_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.wasm_byte_code, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgMigrateCode {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.code_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.wasm_byte_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sender);
        }
        if !self.wasm_byte_code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.wasm_byte_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code_id != 0 {
            os.write_uint64(1, self.code_id)?;
        }
        if !self.sender.is_empty() {
            os.write_string(2, &self.sender)?;
        }
        if !self.wasm_byte_code.is_empty() {
            os.write_bytes(3, &self.wasm_byte_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgMigrateCode {
        MsgMigrateCode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "code_id",
                |m: &MsgMigrateCode| { &m.code_id },
                |m: &mut MsgMigrateCode| { &mut m.code_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &MsgMigrateCode| { &m.sender },
                |m: &mut MsgMigrateCode| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "wasm_byte_code",
                |m: &MsgMigrateCode| { &m.wasm_byte_code },
                |m: &mut MsgMigrateCode| { &mut m.wasm_byte_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgMigrateCode>(
                "MsgMigrateCode",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgMigrateCode {
        static instance: ::protobuf::rt::LazyV2<MsgMigrateCode> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgMigrateCode::new)
    }
}

impl ::protobuf::Clear for MsgMigrateCode {
    fn clear(&mut self) {
        self.code_id = 0;
        self.sender.clear();
        self.wasm_byte_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgMigrateCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMigrateCode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgMigrateCodeResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgMigrateCodeResponse {
    fn default() -> &'a MsgMigrateCodeResponse {
        <MsgMigrateCodeResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgMigrateCodeResponse {
    pub fn new() -> MsgMigrateCodeResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgMigrateCodeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgMigrateCodeResponse {
        MsgMigrateCodeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgMigrateCodeResponse>(
                "MsgMigrateCodeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgMigrateCodeResponse {
        static instance: ::protobuf::rt::LazyV2<MsgMigrateCodeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgMigrateCodeResponse::new)
    }
}

impl ::protobuf::Clear for MsgMigrateCodeResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgMigrateCodeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMigrateCodeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgInstantiateContract {
    // message fields
    pub sender: ::std::string::String,
    pub admin: ::std::string::String,
    pub code_id: u64,
    pub init_msg: ::std::vec::Vec<u8>,
    pub init_coins: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgInstantiateContract {
    fn default() -> &'a MsgInstantiateContract {
        <MsgInstantiateContract as ::protobuf::Message>::default_instance()
    }
}

impl MsgInstantiateContract {
    pub fn new() -> MsgInstantiateContract {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string admin = 2;


    pub fn get_admin(&self) -> &str {
        &self.admin
    }
    pub fn clear_admin(&mut self) {
        self.admin.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin(&mut self, v: ::std::string::String) {
        self.admin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin(&mut self) -> &mut ::std::string::String {
        &mut self.admin
    }

    // Take field
    pub fn take_admin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admin, ::std::string::String::new())
    }

    // uint64 code_id = 3;


    pub fn get_code_id(&self) -> u64 {
        self.code_id
    }
    pub fn clear_code_id(&mut self) {
        self.code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_code_id(&mut self, v: u64) {
        self.code_id = v;
    }

    // bytes init_msg = 4;


    pub fn get_init_msg(&self) -> &[u8] {
        &self.init_msg
    }
    pub fn clear_init_msg(&mut self) {
        self.init_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_init_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.init_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_init_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.init_msg
    }

    // Take field
    pub fn take_init_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.init_msg, ::std::vec::Vec::new())
    }

    // repeated .cosmos.base.v1beta1.Coin init_coins = 5;


    pub fn get_init_coins(&self) -> &[super::coin::Coin] {
        &self.init_coins
    }
    pub fn clear_init_coins(&mut self) {
        self.init_coins.clear();
    }

    // Param is passed by value, moved
    pub fn set_init_coins(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.init_coins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_init_coins(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.init_coins
    }

    // Take field
    pub fn take_init_coins(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.init_coins, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgInstantiateContract {
    fn is_initialized(&self) -> bool {
        for v in &self.init_coins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admin)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.code_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.init_msg)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.init_coins)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.admin.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.admin);
        }
        if self.code_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.init_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.init_msg);
        }
        for value in &self.init_coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.admin.is_empty() {
            os.write_string(2, &self.admin)?;
        }
        if self.code_id != 0 {
            os.write_uint64(3, self.code_id)?;
        }
        if !self.init_msg.is_empty() {
            os.write_bytes(4, &self.init_msg)?;
        }
        for v in &self.init_coins {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgInstantiateContract {
        MsgInstantiateContract::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &MsgInstantiateContract| { &m.sender },
                |m: &mut MsgInstantiateContract| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "admin",
                |m: &MsgInstantiateContract| { &m.admin },
                |m: &mut MsgInstantiateContract| { &mut m.admin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "code_id",
                |m: &MsgInstantiateContract| { &m.code_id },
                |m: &mut MsgInstantiateContract| { &mut m.code_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "init_msg",
                |m: &MsgInstantiateContract| { &m.init_msg },
                |m: &mut MsgInstantiateContract| { &mut m.init_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "init_coins",
                |m: &MsgInstantiateContract| { &m.init_coins },
                |m: &mut MsgInstantiateContract| { &mut m.init_coins },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgInstantiateContract>(
                "MsgInstantiateContract",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgInstantiateContract {
        static instance: ::protobuf::rt::LazyV2<MsgInstantiateContract> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgInstantiateContract::new)
    }
}

impl ::protobuf::Clear for MsgInstantiateContract {
    fn clear(&mut self) {
        self.sender.clear();
        self.admin.clear();
        self.code_id = 0;
        self.init_msg.clear();
        self.init_coins.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgInstantiateContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgInstantiateContract {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgInstantiateContractResponse {
    // message fields
    pub contract_address: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgInstantiateContractResponse {
    fn default() -> &'a MsgInstantiateContractResponse {
        <MsgInstantiateContractResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgInstantiateContractResponse {
    pub fn new() -> MsgInstantiateContractResponse {
        ::std::default::Default::default()
    }

    // string contract_address = 1;


    pub fn get_contract_address(&self) -> &str {
        &self.contract_address
    }
    pub fn clear_contract_address(&mut self) {
        self.contract_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_address(&mut self, v: ::std::string::String) {
        self.contract_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_address(&mut self) -> &mut ::std::string::String {
        &mut self.contract_address
    }

    // Take field
    pub fn take_contract_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_address, ::std::string::String::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgInstantiateContractResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contract_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contract_address);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contract_address.is_empty() {
            os.write_string(1, &self.contract_address)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgInstantiateContractResponse {
        MsgInstantiateContractResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_address",
                |m: &MsgInstantiateContractResponse| { &m.contract_address },
                |m: &mut MsgInstantiateContractResponse| { &mut m.contract_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &MsgInstantiateContractResponse| { &m.data },
                |m: &mut MsgInstantiateContractResponse| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgInstantiateContractResponse>(
                "MsgInstantiateContractResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgInstantiateContractResponse {
        static instance: ::protobuf::rt::LazyV2<MsgInstantiateContractResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgInstantiateContractResponse::new)
    }
}

impl ::protobuf::Clear for MsgInstantiateContractResponse {
    fn clear(&mut self) {
        self.contract_address.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgInstantiateContractResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgInstantiateContractResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgExecuteContract {
    // message fields
    pub sender: ::std::string::String,
    pub contract: ::std::string::String,
    pub execute_msg: ::std::vec::Vec<u8>,
    pub coins: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgExecuteContract {
    fn default() -> &'a MsgExecuteContract {
        <MsgExecuteContract as ::protobuf::Message>::default_instance()
    }
}

impl MsgExecuteContract {
    pub fn new() -> MsgExecuteContract {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string contract = 2;


    pub fn get_contract(&self) -> &str {
        &self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: ::std::string::String) {
        self.contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut ::std::string::String {
        &mut self.contract
    }

    // Take field
    pub fn take_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract, ::std::string::String::new())
    }

    // bytes execute_msg = 3;


    pub fn get_execute_msg(&self) -> &[u8] {
        &self.execute_msg
    }
    pub fn clear_execute_msg(&mut self) {
        self.execute_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_execute_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.execute_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_execute_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.execute_msg
    }

    // Take field
    pub fn take_execute_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.execute_msg, ::std::vec::Vec::new())
    }

    // repeated .cosmos.base.v1beta1.Coin coins = 5;


    pub fn get_coins(&self) -> &[super::coin::Coin] {
        &self.coins
    }
    pub fn clear_coins(&mut self) {
        self.coins.clear();
    }

    // Param is passed by value, moved
    pub fn set_coins(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.coins = v;
    }

    // Mutable pointer to the field.
    pub fn mut_coins(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.coins
    }

    // Take field
    pub fn take_coins(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.coins, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgExecuteContract {
    fn is_initialized(&self) -> bool {
        for v in &self.coins {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.execute_msg)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.coins)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.contract);
        }
        if !self.execute_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.execute_msg);
        }
        for value in &self.coins {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.contract.is_empty() {
            os.write_string(2, &self.contract)?;
        }
        if !self.execute_msg.is_empty() {
            os.write_bytes(3, &self.execute_msg)?;
        }
        for v in &self.coins {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgExecuteContract {
        MsgExecuteContract::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sender",
                |m: &MsgExecuteContract| { &m.sender },
                |m: &mut MsgExecuteContract| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract",
                |m: &MsgExecuteContract| { &m.contract },
                |m: &mut MsgExecuteContract| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "execute_msg",
                |m: &MsgExecuteContract| { &m.execute_msg },
                |m: &mut MsgExecuteContract| { &mut m.execute_msg },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "coins",
                |m: &MsgExecuteContract| { &m.coins },
                |m: &mut MsgExecuteContract| { &mut m.coins },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgExecuteContract>(
                "MsgExecuteContract",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgExecuteContract {
        static instance: ::protobuf::rt::LazyV2<MsgExecuteContract> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgExecuteContract::new)
    }
}

impl ::protobuf::Clear for MsgExecuteContract {
    fn clear(&mut self) {
        self.sender.clear();
        self.contract.clear();
        self.execute_msg.clear();
        self.coins.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgExecuteContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgExecuteContract {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgExecuteContractResponse {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgExecuteContractResponse {
    fn default() -> &'a MsgExecuteContractResponse {
        <MsgExecuteContractResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgExecuteContractResponse {
    pub fn new() -> MsgExecuteContractResponse {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgExecuteContractResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgExecuteContractResponse {
        MsgExecuteContractResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &MsgExecuteContractResponse| { &m.data },
                |m: &mut MsgExecuteContractResponse| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgExecuteContractResponse>(
                "MsgExecuteContractResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgExecuteContractResponse {
        static instance: ::protobuf::rt::LazyV2<MsgExecuteContractResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgExecuteContractResponse::new)
    }
}

impl ::protobuf::Clear for MsgExecuteContractResponse {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgExecuteContractResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgExecuteContractResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgMigrateContract {
    // message fields
    pub admin: ::std::string::String,
    pub contract: ::std::string::String,
    pub new_code_id: u64,
    pub migrate_msg: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgMigrateContract {
    fn default() -> &'a MsgMigrateContract {
        <MsgMigrateContract as ::protobuf::Message>::default_instance()
    }
}

impl MsgMigrateContract {
    pub fn new() -> MsgMigrateContract {
        ::std::default::Default::default()
    }

    // string admin = 1;


    pub fn get_admin(&self) -> &str {
        &self.admin
    }
    pub fn clear_admin(&mut self) {
        self.admin.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin(&mut self, v: ::std::string::String) {
        self.admin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin(&mut self) -> &mut ::std::string::String {
        &mut self.admin
    }

    // Take field
    pub fn take_admin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admin, ::std::string::String::new())
    }

    // string contract = 2;


    pub fn get_contract(&self) -> &str {
        &self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: ::std::string::String) {
        self.contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut ::std::string::String {
        &mut self.contract
    }

    // Take field
    pub fn take_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract, ::std::string::String::new())
    }

    // uint64 new_code_id = 3;


    pub fn get_new_code_id(&self) -> u64 {
        self.new_code_id
    }
    pub fn clear_new_code_id(&mut self) {
        self.new_code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_new_code_id(&mut self, v: u64) {
        self.new_code_id = v;
    }

    // bytes migrate_msg = 4;


    pub fn get_migrate_msg(&self) -> &[u8] {
        &self.migrate_msg
    }
    pub fn clear_migrate_msg(&mut self) {
        self.migrate_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_migrate_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.migrate_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_migrate_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.migrate_msg
    }

    // Take field
    pub fn take_migrate_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.migrate_msg, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgMigrateContract {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admin)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.new_code_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.migrate_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.admin.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.admin);
        }
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.contract);
        }
        if self.new_code_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.new_code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.migrate_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.migrate_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.admin.is_empty() {
            os.write_string(1, &self.admin)?;
        }
        if !self.contract.is_empty() {
            os.write_string(2, &self.contract)?;
        }
        if self.new_code_id != 0 {
            os.write_uint64(3, self.new_code_id)?;
        }
        if !self.migrate_msg.is_empty() {
            os.write_bytes(4, &self.migrate_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgMigrateContract {
        MsgMigrateContract::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "admin",
                |m: &MsgMigrateContract| { &m.admin },
                |m: &mut MsgMigrateContract| { &mut m.admin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract",
                |m: &MsgMigrateContract| { &m.contract },
                |m: &mut MsgMigrateContract| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "new_code_id",
                |m: &MsgMigrateContract| { &m.new_code_id },
                |m: &mut MsgMigrateContract| { &mut m.new_code_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "migrate_msg",
                |m: &MsgMigrateContract| { &m.migrate_msg },
                |m: &mut MsgMigrateContract| { &mut m.migrate_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgMigrateContract>(
                "MsgMigrateContract",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgMigrateContract {
        static instance: ::protobuf::rt::LazyV2<MsgMigrateContract> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgMigrateContract::new)
    }
}

impl ::protobuf::Clear for MsgMigrateContract {
    fn clear(&mut self) {
        self.admin.clear();
        self.contract.clear();
        self.new_code_id = 0;
        self.migrate_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgMigrateContract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMigrateContract {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgMigrateContractResponse {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgMigrateContractResponse {
    fn default() -> &'a MsgMigrateContractResponse {
        <MsgMigrateContractResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgMigrateContractResponse {
    pub fn new() -> MsgMigrateContractResponse {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgMigrateContractResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgMigrateContractResponse {
        MsgMigrateContractResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &MsgMigrateContractResponse| { &m.data },
                |m: &mut MsgMigrateContractResponse| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgMigrateContractResponse>(
                "MsgMigrateContractResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgMigrateContractResponse {
        static instance: ::protobuf::rt::LazyV2<MsgMigrateContractResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgMigrateContractResponse::new)
    }
}

impl ::protobuf::Clear for MsgMigrateContractResponse {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgMigrateContractResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgMigrateContractResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUpdateContractAdmin {
    // message fields
    pub admin: ::std::string::String,
    pub new_admin: ::std::string::String,
    pub contract: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateContractAdmin {
    fn default() -> &'a MsgUpdateContractAdmin {
        <MsgUpdateContractAdmin as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateContractAdmin {
    pub fn new() -> MsgUpdateContractAdmin {
        ::std::default::Default::default()
    }

    // string admin = 1;


    pub fn get_admin(&self) -> &str {
        &self.admin
    }
    pub fn clear_admin(&mut self) {
        self.admin.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin(&mut self, v: ::std::string::String) {
        self.admin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin(&mut self) -> &mut ::std::string::String {
        &mut self.admin
    }

    // Take field
    pub fn take_admin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admin, ::std::string::String::new())
    }

    // string new_admin = 2;


    pub fn get_new_admin(&self) -> &str {
        &self.new_admin
    }
    pub fn clear_new_admin(&mut self) {
        self.new_admin.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_admin(&mut self, v: ::std::string::String) {
        self.new_admin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_admin(&mut self) -> &mut ::std::string::String {
        &mut self.new_admin
    }

    // Take field
    pub fn take_new_admin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.new_admin, ::std::string::String::new())
    }

    // string contract = 3;


    pub fn get_contract(&self) -> &str {
        &self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: ::std::string::String) {
        self.contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut ::std::string::String {
        &mut self.contract
    }

    // Take field
    pub fn take_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgUpdateContractAdmin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admin)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.new_admin)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.admin.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.admin);
        }
        if !self.new_admin.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.new_admin);
        }
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.contract);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.admin.is_empty() {
            os.write_string(1, &self.admin)?;
        }
        if !self.new_admin.is_empty() {
            os.write_string(2, &self.new_admin)?;
        }
        if !self.contract.is_empty() {
            os.write_string(3, &self.contract)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateContractAdmin {
        MsgUpdateContractAdmin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "admin",
                |m: &MsgUpdateContractAdmin| { &m.admin },
                |m: &mut MsgUpdateContractAdmin| { &mut m.admin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "new_admin",
                |m: &MsgUpdateContractAdmin| { &m.new_admin },
                |m: &mut MsgUpdateContractAdmin| { &mut m.new_admin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract",
                |m: &MsgUpdateContractAdmin| { &m.contract },
                |m: &mut MsgUpdateContractAdmin| { &mut m.contract },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUpdateContractAdmin>(
                "MsgUpdateContractAdmin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUpdateContractAdmin {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateContractAdmin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateContractAdmin::new)
    }
}

impl ::protobuf::Clear for MsgUpdateContractAdmin {
    fn clear(&mut self) {
        self.admin.clear();
        self.new_admin.clear();
        self.contract.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUpdateContractAdmin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateContractAdmin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgUpdateContractAdminResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateContractAdminResponse {
    fn default() -> &'a MsgUpdateContractAdminResponse {
        <MsgUpdateContractAdminResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateContractAdminResponse {
    pub fn new() -> MsgUpdateContractAdminResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgUpdateContractAdminResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateContractAdminResponse {
        MsgUpdateContractAdminResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgUpdateContractAdminResponse>(
                "MsgUpdateContractAdminResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgUpdateContractAdminResponse {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateContractAdminResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateContractAdminResponse::new)
    }
}

impl ::protobuf::Clear for MsgUpdateContractAdminResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgUpdateContractAdminResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateContractAdminResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgClearContractAdmin {
    // message fields
    pub admin: ::std::string::String,
    pub contract: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgClearContractAdmin {
    fn default() -> &'a MsgClearContractAdmin {
        <MsgClearContractAdmin as ::protobuf::Message>::default_instance()
    }
}

impl MsgClearContractAdmin {
    pub fn new() -> MsgClearContractAdmin {
        ::std::default::Default::default()
    }

    // string admin = 1;


    pub fn get_admin(&self) -> &str {
        &self.admin
    }
    pub fn clear_admin(&mut self) {
        self.admin.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin(&mut self, v: ::std::string::String) {
        self.admin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin(&mut self) -> &mut ::std::string::String {
        &mut self.admin
    }

    // Take field
    pub fn take_admin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admin, ::std::string::String::new())
    }

    // string contract = 2;


    pub fn get_contract(&self) -> &str {
        &self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: ::std::string::String) {
        self.contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut ::std::string::String {
        &mut self.contract
    }

    // Take field
    pub fn take_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgClearContractAdmin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admin)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.admin.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.admin);
        }
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.contract);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.admin.is_empty() {
            os.write_string(1, &self.admin)?;
        }
        if !self.contract.is_empty() {
            os.write_string(2, &self.contract)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgClearContractAdmin {
        MsgClearContractAdmin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "admin",
                |m: &MsgClearContractAdmin| { &m.admin },
                |m: &mut MsgClearContractAdmin| { &mut m.admin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract",
                |m: &MsgClearContractAdmin| { &m.contract },
                |m: &mut MsgClearContractAdmin| { &mut m.contract },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgClearContractAdmin>(
                "MsgClearContractAdmin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgClearContractAdmin {
        static instance: ::protobuf::rt::LazyV2<MsgClearContractAdmin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgClearContractAdmin::new)
    }
}

impl ::protobuf::Clear for MsgClearContractAdmin {
    fn clear(&mut self) {
        self.admin.clear();
        self.contract.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgClearContractAdmin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgClearContractAdmin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MsgClearContractAdminResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgClearContractAdminResponse {
    fn default() -> &'a MsgClearContractAdminResponse {
        <MsgClearContractAdminResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgClearContractAdminResponse {
    pub fn new() -> MsgClearContractAdminResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgClearContractAdminResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgClearContractAdminResponse {
        MsgClearContractAdminResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MsgClearContractAdminResponse>(
                "MsgClearContractAdminResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MsgClearContractAdminResponse {
        static instance: ::protobuf::rt::LazyV2<MsgClearContractAdminResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgClearContractAdminResponse::new)
    }
}

impl ::protobuf::Clear for MsgClearContractAdminResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MsgClearContractAdminResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgClearContractAdminResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1bterra/wasm/v1beta1/tx.proto\x12\x12terra.wasm.v1beta1\x1a\x14gogop\
    roto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\x94\x01\n\x0cMsg\
    StoreCode\x12)\n\x06sender\x18\x01\x20\x01(\tR\x06senderB\x11\xf2\xde\
    \x1f\ryaml:\"sender\"\x12O\n\x0ewasm_byte_code\x18\x02\x20\x01(\x0cR\x0c\
    wasmByteCodeB)\xf2\xde\x1f\x15yaml:\"wasm_byte_code\"\xe2\xde\x1f\x0cWAS\
    MByteCode:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"M\n\x14MsgStoreCodeResponse\
    \x125\n\x07code_id\x18\x01\x20\x01(\x04R\x06codeIdB\x1c\xf2\xde\x1f\x0ey\
    aml:\"code_id\"\xe2\xde\x1f\x06CodeID\"\xcd\x01\n\x0eMsgMigrateCode\x125\
    \n\x07code_id\x18\x01\x20\x01(\x04R\x06codeIdB\x1c\xf2\xde\x1f\x0eyaml:\
    \"code_id\"\xe2\xde\x1f\x06CodeID\x12)\n\x06sender\x18\x02\x20\x01(\tR\
    \x06senderB\x11\xf2\xde\x1f\ryaml:\"sender\"\x12O\n\x0ewasm_byte_code\
    \x18\x03\x20\x01(\x0cR\x0cwasmByteCodeB)\xf2\xde\x1f\x15yaml:\"wasm_byte\
    _code\"\xe2\xde\x1f\x0cWASMByteCode:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\
    \x18\n\x16MsgMigrateCodeResponse\"\xf9\x02\n\x16MsgInstantiateContract\
    \x12)\n\x06sender\x18\x01\x20\x01(\tR\x06senderB\x11\xf2\xde\x1f\ryaml:\
    \"sender\"\x12&\n\x05admin\x18\x02\x20\x01(\tR\x05adminB\x10\xf2\xde\x1f\
    \x0cyaml:\"admin\"\x125\n\x07code_id\x18\x03\x20\x01(\x04R\x06codeIdB\
    \x1c\xf2\xde\x1f\x0eyaml:\"code_id\"\xe2\xde\x1f\x06CodeID\x12J\n\x08ini\
    t_msg\x18\x04\x20\x01(\x0cR\x07initMsgB/\xf2\xde\x1f\x0fyaml:\"init_msg\
    \"\xfa\xde\x1f\x18encoding/json.RawMessage\x12\x7f\n\ninit_coins\x18\x05\
    \x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\tinitCoinsBE\xf2\xde\x1f\
    \x11yaml:\"init_coins\"\xc8\xde\x1f\0\xaa\xdf\x1f(github.com/cosmos/cosm\
    os-sdk/types.Coins:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"\x8d\x01\n\x1eMsgIn\
    stantiateContractResponse\x12F\n\x10contract_address\x18\x01\x20\x01(\tR\
    \x0fcontractAddressB\x1b\xf2\xde\x1f\x17yaml:\"contract_address\"\x12#\n\
    \x04data\x18\x02\x20\x01(\x0cR\x04dataB\x0f\xf2\xde\x1f\x0byaml:\"data\"\
    \"\xc2\x02\n\x12MsgExecuteContract\x12)\n\x06sender\x18\x01\x20\x01(\tR\
    \x06senderB\x11\xf2\xde\x1f\ryaml:\"sender\"\x12/\n\x08contract\x18\x02\
    \x20\x01(\tR\x08contractB\x13\xf2\xde\x1f\x0fyaml:\"contract\"\x12S\n\
    \x0bexecute_msg\x18\x03\x20\x01(\x0cR\nexecuteMsgB2\xf2\xde\x1f\x12yaml:\
    \"execute_msg\"\xfa\xde\x1f\x18encoding/json.RawMessage\x12q\n\x05coins\
    \x18\x05\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x05coinsB@\xf2\xde\
    \x1f\x0cyaml:\"coins\"\xc8\xde\x1f\0\xaa\xdf\x1f(github.com/cosmos/cosmo\
    s-sdk/types.Coins:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"A\n\x1aMsgExecuteCon\
    tractResponse\x12#\n\x04data\x18\x01\x20\x01(\x0cR\x04dataB\x0f\xf2\xde\
    \x1f\x0byaml:\"data\"\"\x91\x02\n\x12MsgMigrateContract\x12&\n\x05admin\
    \x18\x01\x20\x01(\tR\x05adminB\x10\xf2\xde\x1f\x0cyaml:\"admin\"\x12/\n\
    \x08contract\x18\x02\x20\x01(\tR\x08contractB\x13\xf2\xde\x1f\x0fyaml:\"\
    contract\"\x12C\n\x0bnew_code_id\x18\x03\x20\x01(\x04R\tnewCodeIdB#\xf2\
    \xde\x1f\x12yaml:\"new_code_id\"\xe2\xde\x1f\tNewCodeID\x12S\n\x0bmigrat\
    e_msg\x18\x04\x20\x01(\x0cR\nmigrateMsgB2\xf2\xde\x1f\x12yaml:\"migrate_\
    msg\"\xfa\xde\x1f\x18encoding/json.RawMessage:\x08\x88\xa0\x1f\0\xe8\xa0\
    \x1f\0\"A\n\x1aMsgMigrateContractResponse\x12#\n\x04data\x18\x01\x20\x01\
    (\x0cR\x04dataB\x0f\xf2\xde\x1f\x0byaml:\"data\"\"\xae\x01\n\x16MsgUpdat\
    eContractAdmin\x12&\n\x05admin\x18\x01\x20\x01(\tR\x05adminB\x10\xf2\xde\
    \x1f\x0cyaml:\"admin\"\x121\n\tnew_admin\x18\x02\x20\x01(\tR\x08newAdmin\
    B\x14\xf2\xde\x1f\x10yaml:\"new_admin\"\x12/\n\x08contract\x18\x03\x20\
    \x01(\tR\x08contractB\x13\xf2\xde\x1f\x0fyaml:\"contract\":\x08\x88\xa0\
    \x1f\0\xe8\xa0\x1f\0\"\x20\n\x1eMsgUpdateContractAdminResponse\"z\n\x15M\
    sgClearContractAdmin\x12&\n\x05admin\x18\x01\x20\x01(\tR\x05adminB\x10\
    \xf2\xde\x1f\x0cyaml:\"admin\"\x12/\n\x08contract\x18\x02\x20\x01(\tR\
    \x08contractB\x13\xf2\xde\x1f\x0fyaml:\"contract\":\x08\x88\xa0\x1f\0\
    \xe8\xa0\x1f\0\"\x1f\n\x1dMsgClearContractAdminResponse2\xf5\x05\n\x03Ms\
    g\x12W\n\tStoreCode\x12\x20.terra.wasm.v1beta1.MsgStoreCode\x1a(.terra.w\
    asm.v1beta1.MsgStoreCodeResponse\x12]\n\x0bMigrateCode\x12\".terra.wasm.\
    v1beta1.MsgMigrateCode\x1a*.terra.wasm.v1beta1.MsgMigrateCodeResponse\
    \x12u\n\x13InstantiateContract\x12*.terra.wasm.v1beta1.MsgInstantiateCon\
    tract\x1a2.terra.wasm.v1beta1.MsgInstantiateContractResponse\x12i\n\x0fE\
    xecuteContract\x12&.terra.wasm.v1beta1.MsgExecuteContract\x1a..terra.was\
    m.v1beta1.MsgExecuteContractResponse\x12i\n\x0fMigrateContract\x12&.terr\
    a.wasm.v1beta1.MsgMigrateContract\x1a..terra.wasm.v1beta1.MsgMigrateCont\
    ractResponse\x12u\n\x13UpdateContractAdmin\x12*.terra.wasm.v1beta1.MsgUp\
    dateContractAdmin\x1a2.terra.wasm.v1beta1.MsgUpdateContractAdminResponse\
    \x12r\n\x12ClearContractAdmin\x12).terra.wasm.v1beta1.MsgClearContractAd\
    min\x1a1.terra.wasm.v1beta1.MsgClearContractAdminResponseB*Z(github.com/\
    terra-money/core/x/wasm/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
