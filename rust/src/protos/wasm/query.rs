// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/wasm/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct QueryCodeInfoRequest {
    // message fields
    pub code_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryCodeInfoRequest {
    fn default() -> &'a QueryCodeInfoRequest {
        <QueryCodeInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryCodeInfoRequest {
    pub fn new() -> QueryCodeInfoRequest {
        ::std::default::Default::default()
    }

    // uint64 code_id = 1;


    pub fn get_code_id(&self) -> u64 {
        self.code_id
    }
    pub fn clear_code_id(&mut self) {
        self.code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_code_id(&mut self, v: u64) {
        self.code_id = v;
    }
}

impl ::protobuf::Message for QueryCodeInfoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.code_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code_id != 0 {
            os.write_uint64(1, self.code_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryCodeInfoRequest {
        QueryCodeInfoRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "code_id",
                |m: &QueryCodeInfoRequest| { &m.code_id },
                |m: &mut QueryCodeInfoRequest| { &mut m.code_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryCodeInfoRequest>(
                "QueryCodeInfoRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryCodeInfoRequest {
        static instance: ::protobuf::rt::LazyV2<QueryCodeInfoRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryCodeInfoRequest::new)
    }
}

impl ::protobuf::Clear for QueryCodeInfoRequest {
    fn clear(&mut self) {
        self.code_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryCodeInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryCodeInfoRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryCodeInfoResponse {
    // message fields
    pub code_info: ::protobuf::SingularPtrField<super::wasm::CodeInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryCodeInfoResponse {
    fn default() -> &'a QueryCodeInfoResponse {
        <QueryCodeInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryCodeInfoResponse {
    pub fn new() -> QueryCodeInfoResponse {
        ::std::default::Default::default()
    }

    // .terra.wasm.v1beta1.CodeInfo code_info = 1;


    pub fn get_code_info(&self) -> &super::wasm::CodeInfo {
        self.code_info.as_ref().unwrap_or_else(|| <super::wasm::CodeInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_code_info(&mut self) {
        self.code_info.clear();
    }

    pub fn has_code_info(&self) -> bool {
        self.code_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code_info(&mut self, v: super::wasm::CodeInfo) {
        self.code_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code_info(&mut self) -> &mut super::wasm::CodeInfo {
        if self.code_info.is_none() {
            self.code_info.set_default();
        }
        self.code_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_code_info(&mut self) -> super::wasm::CodeInfo {
        self.code_info.take().unwrap_or_else(|| super::wasm::CodeInfo::new())
    }
}

impl ::protobuf::Message for QueryCodeInfoResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.code_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.code_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.code_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.code_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryCodeInfoResponse {
        QueryCodeInfoResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wasm::CodeInfo>>(
                "code_info",
                |m: &QueryCodeInfoResponse| { &m.code_info },
                |m: &mut QueryCodeInfoResponse| { &mut m.code_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryCodeInfoResponse>(
                "QueryCodeInfoResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryCodeInfoResponse {
        static instance: ::protobuf::rt::LazyV2<QueryCodeInfoResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryCodeInfoResponse::new)
    }
}

impl ::protobuf::Clear for QueryCodeInfoResponse {
    fn clear(&mut self) {
        self.code_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryCodeInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryCodeInfoResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryByteCodeRequest {
    // message fields
    pub code_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryByteCodeRequest {
    fn default() -> &'a QueryByteCodeRequest {
        <QueryByteCodeRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryByteCodeRequest {
    pub fn new() -> QueryByteCodeRequest {
        ::std::default::Default::default()
    }

    // uint64 code_id = 1;


    pub fn get_code_id(&self) -> u64 {
        self.code_id
    }
    pub fn clear_code_id(&mut self) {
        self.code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_code_id(&mut self, v: u64) {
        self.code_id = v;
    }
}

impl ::protobuf::Message for QueryByteCodeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.code_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code_id != 0 {
            os.write_uint64(1, self.code_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryByteCodeRequest {
        QueryByteCodeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "code_id",
                |m: &QueryByteCodeRequest| { &m.code_id },
                |m: &mut QueryByteCodeRequest| { &mut m.code_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryByteCodeRequest>(
                "QueryByteCodeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryByteCodeRequest {
        static instance: ::protobuf::rt::LazyV2<QueryByteCodeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryByteCodeRequest::new)
    }
}

impl ::protobuf::Clear for QueryByteCodeRequest {
    fn clear(&mut self) {
        self.code_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryByteCodeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryByteCodeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryByteCodeResponse {
    // message fields
    pub byte_code: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryByteCodeResponse {
    fn default() -> &'a QueryByteCodeResponse {
        <QueryByteCodeResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryByteCodeResponse {
    pub fn new() -> QueryByteCodeResponse {
        ::std::default::Default::default()
    }

    // bytes byte_code = 1;


    pub fn get_byte_code(&self) -> &[u8] {
        &self.byte_code
    }
    pub fn clear_byte_code(&mut self) {
        self.byte_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_byte_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.byte_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_byte_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.byte_code
    }

    // Take field
    pub fn take_byte_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.byte_code, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryByteCodeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.byte_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.byte_code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.byte_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.byte_code.is_empty() {
            os.write_bytes(1, &self.byte_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryByteCodeResponse {
        QueryByteCodeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "byte_code",
                |m: &QueryByteCodeResponse| { &m.byte_code },
                |m: &mut QueryByteCodeResponse| { &mut m.byte_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryByteCodeResponse>(
                "QueryByteCodeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryByteCodeResponse {
        static instance: ::protobuf::rt::LazyV2<QueryByteCodeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryByteCodeResponse::new)
    }
}

impl ::protobuf::Clear for QueryByteCodeResponse {
    fn clear(&mut self) {
        self.byte_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryByteCodeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryByteCodeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryContractInfoRequest {
    // message fields
    pub contract_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryContractInfoRequest {
    fn default() -> &'a QueryContractInfoRequest {
        <QueryContractInfoRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryContractInfoRequest {
    pub fn new() -> QueryContractInfoRequest {
        ::std::default::Default::default()
    }

    // string contract_address = 1;


    pub fn get_contract_address(&self) -> &str {
        &self.contract_address
    }
    pub fn clear_contract_address(&mut self) {
        self.contract_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_address(&mut self, v: ::std::string::String) {
        self.contract_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_address(&mut self) -> &mut ::std::string::String {
        &mut self.contract_address
    }

    // Take field
    pub fn take_contract_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryContractInfoRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contract_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contract_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contract_address.is_empty() {
            os.write_string(1, &self.contract_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryContractInfoRequest {
        QueryContractInfoRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_address",
                |m: &QueryContractInfoRequest| { &m.contract_address },
                |m: &mut QueryContractInfoRequest| { &mut m.contract_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryContractInfoRequest>(
                "QueryContractInfoRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryContractInfoRequest {
        static instance: ::protobuf::rt::LazyV2<QueryContractInfoRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryContractInfoRequest::new)
    }
}

impl ::protobuf::Clear for QueryContractInfoRequest {
    fn clear(&mut self) {
        self.contract_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryContractInfoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryContractInfoRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryContractInfoResponse {
    // message fields
    pub contract_info: ::protobuf::SingularPtrField<super::wasm::ContractInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryContractInfoResponse {
    fn default() -> &'a QueryContractInfoResponse {
        <QueryContractInfoResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryContractInfoResponse {
    pub fn new() -> QueryContractInfoResponse {
        ::std::default::Default::default()
    }

    // .terra.wasm.v1beta1.ContractInfo contract_info = 1;


    pub fn get_contract_info(&self) -> &super::wasm::ContractInfo {
        self.contract_info.as_ref().unwrap_or_else(|| <super::wasm::ContractInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_contract_info(&mut self) {
        self.contract_info.clear();
    }

    pub fn has_contract_info(&self) -> bool {
        self.contract_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contract_info(&mut self, v: super::wasm::ContractInfo) {
        self.contract_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_info(&mut self) -> &mut super::wasm::ContractInfo {
        if self.contract_info.is_none() {
            self.contract_info.set_default();
        }
        self.contract_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_contract_info(&mut self) -> super::wasm::ContractInfo {
        self.contract_info.take().unwrap_or_else(|| super::wasm::ContractInfo::new())
    }
}

impl ::protobuf::Message for QueryContractInfoResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.contract_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contract_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.contract_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.contract_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryContractInfoResponse {
        QueryContractInfoResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wasm::ContractInfo>>(
                "contract_info",
                |m: &QueryContractInfoResponse| { &m.contract_info },
                |m: &mut QueryContractInfoResponse| { &mut m.contract_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryContractInfoResponse>(
                "QueryContractInfoResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryContractInfoResponse {
        static instance: ::protobuf::rt::LazyV2<QueryContractInfoResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryContractInfoResponse::new)
    }
}

impl ::protobuf::Clear for QueryContractInfoResponse {
    fn clear(&mut self) {
        self.contract_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryContractInfoResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryContractInfoResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryContractStoreRequest {
    // message fields
    pub contract_address: ::std::string::String,
    pub query_msg: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryContractStoreRequest {
    fn default() -> &'a QueryContractStoreRequest {
        <QueryContractStoreRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryContractStoreRequest {
    pub fn new() -> QueryContractStoreRequest {
        ::std::default::Default::default()
    }

    // string contract_address = 1;


    pub fn get_contract_address(&self) -> &str {
        &self.contract_address
    }
    pub fn clear_contract_address(&mut self) {
        self.contract_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_address(&mut self, v: ::std::string::String) {
        self.contract_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_address(&mut self) -> &mut ::std::string::String {
        &mut self.contract_address
    }

    // Take field
    pub fn take_contract_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_address, ::std::string::String::new())
    }

    // bytes query_msg = 2;


    pub fn get_query_msg(&self) -> &[u8] {
        &self.query_msg
    }
    pub fn clear_query_msg(&mut self) {
        self.query_msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.query_msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.query_msg
    }

    // Take field
    pub fn take_query_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.query_msg, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryContractStoreRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.query_msg)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contract_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contract_address);
        }
        if !self.query_msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.query_msg);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contract_address.is_empty() {
            os.write_string(1, &self.contract_address)?;
        }
        if !self.query_msg.is_empty() {
            os.write_bytes(2, &self.query_msg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryContractStoreRequest {
        QueryContractStoreRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_address",
                |m: &QueryContractStoreRequest| { &m.contract_address },
                |m: &mut QueryContractStoreRequest| { &mut m.contract_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "query_msg",
                |m: &QueryContractStoreRequest| { &m.query_msg },
                |m: &mut QueryContractStoreRequest| { &mut m.query_msg },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryContractStoreRequest>(
                "QueryContractStoreRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryContractStoreRequest {
        static instance: ::protobuf::rt::LazyV2<QueryContractStoreRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryContractStoreRequest::new)
    }
}

impl ::protobuf::Clear for QueryContractStoreRequest {
    fn clear(&mut self) {
        self.contract_address.clear();
        self.query_msg.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryContractStoreRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryContractStoreRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryContractStoreResponse {
    // message fields
    pub query_result: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryContractStoreResponse {
    fn default() -> &'a QueryContractStoreResponse {
        <QueryContractStoreResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryContractStoreResponse {
    pub fn new() -> QueryContractStoreResponse {
        ::std::default::Default::default()
    }

    // bytes query_result = 1;


    pub fn get_query_result(&self) -> &[u8] {
        &self.query_result
    }
    pub fn clear_query_result(&mut self) {
        self.query_result.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_result(&mut self, v: ::std::vec::Vec<u8>) {
        self.query_result = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query_result(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.query_result
    }

    // Take field
    pub fn take_query_result(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.query_result, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryContractStoreResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.query_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.query_result.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.query_result);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.query_result.is_empty() {
            os.write_bytes(1, &self.query_result)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryContractStoreResponse {
        QueryContractStoreResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "query_result",
                |m: &QueryContractStoreResponse| { &m.query_result },
                |m: &mut QueryContractStoreResponse| { &mut m.query_result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryContractStoreResponse>(
                "QueryContractStoreResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryContractStoreResponse {
        static instance: ::protobuf::rt::LazyV2<QueryContractStoreResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryContractStoreResponse::new)
    }
}

impl ::protobuf::Clear for QueryContractStoreResponse {
    fn clear(&mut self) {
        self.query_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryContractStoreResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryContractStoreResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRawStoreRequest {
    // message fields
    pub contract_address: ::std::string::String,
    pub key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRawStoreRequest {
    fn default() -> &'a QueryRawStoreRequest {
        <QueryRawStoreRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryRawStoreRequest {
    pub fn new() -> QueryRawStoreRequest {
        ::std::default::Default::default()
    }

    // string contract_address = 1;


    pub fn get_contract_address(&self) -> &str {
        &self.contract_address
    }
    pub fn clear_contract_address(&mut self) {
        self.contract_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_address(&mut self, v: ::std::string::String) {
        self.contract_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_address(&mut self) -> &mut ::std::string::String {
        &mut self.contract_address
    }

    // Take field
    pub fn take_contract_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_address, ::std::string::String::new())
    }

    // bytes key = 2;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryRawStoreRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contract_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contract_address);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contract_address.is_empty() {
            os.write_string(1, &self.contract_address)?;
        }
        if !self.key.is_empty() {
            os.write_bytes(2, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRawStoreRequest {
        QueryRawStoreRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contract_address",
                |m: &QueryRawStoreRequest| { &m.contract_address },
                |m: &mut QueryRawStoreRequest| { &mut m.contract_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &QueryRawStoreRequest| { &m.key },
                |m: &mut QueryRawStoreRequest| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRawStoreRequest>(
                "QueryRawStoreRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRawStoreRequest {
        static instance: ::protobuf::rt::LazyV2<QueryRawStoreRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRawStoreRequest::new)
    }
}

impl ::protobuf::Clear for QueryRawStoreRequest {
    fn clear(&mut self) {
        self.contract_address.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRawStoreRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRawStoreRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRawStoreResponse {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRawStoreResponse {
    fn default() -> &'a QueryRawStoreResponse {
        <QueryRawStoreResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryRawStoreResponse {
    pub fn new() -> QueryRawStoreResponse {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for QueryRawStoreResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRawStoreResponse {
        QueryRawStoreResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &QueryRawStoreResponse| { &m.data },
                |m: &mut QueryRawStoreResponse| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRawStoreResponse>(
                "QueryRawStoreResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRawStoreResponse {
        static instance: ::protobuf::rt::LazyV2<QueryRawStoreResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRawStoreResponse::new)
    }
}

impl ::protobuf::Clear for QueryRawStoreResponse {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRawStoreResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRawStoreResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryParamsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryParamsRequest>(
                "QueryParamsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryParamsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryParamsRequest::new)
    }
}

impl ::protobuf::Clear for QueryParamsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryParamsResponse {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::wasm::Params>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    // .terra.wasm.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::wasm::Params {
        self.params.as_ref().unwrap_or_else(|| <super::wasm::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::wasm::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::wasm::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::wasm::Params {
        self.params.take().unwrap_or_else(|| super::wasm::Params::new())
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wasm::Params>>(
                "params",
                |m: &QueryParamsResponse| { &m.params },
                |m: &mut QueryParamsResponse| { &mut m.params },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryParamsResponse>(
                "QueryParamsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryParamsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryParamsResponse::new)
    }
}

impl ::protobuf::Clear for QueryParamsResponse {
    fn clear(&mut self) {
        self.params.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eterra/wasm/v1beta1/query.proto\x12\x12terra.wasm.v1beta1\x1a\x14go\
    goproto/gogo.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1dterra/wasm\
    /v1beta1/wasm.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"9\n\x14QueryC\
    odeInfoRequest\x12\x17\n\x07code_id\x18\x01\x20\x01(\x04R\x06codeId:\x08\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0\"X\n\x15QueryCodeInfoResponse\x12?\n\tcode_\
    info\x18\x01\x20\x01(\x0b2\x1c.terra.wasm.v1beta1.CodeInfoR\x08codeInfoB\
    \x04\xc8\xde\x1f\0\"9\n\x14QueryByteCodeRequest\x12\x17\n\x07code_id\x18\
    \x01\x20\x01(\x04R\x06codeId:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"4\n\x15Qu\
    eryByteCodeResponse\x12\x1b\n\tbyte_code\x18\x01\x20\x01(\x0cR\x08byteCo\
    de\"O\n\x18QueryContractInfoRequest\x12)\n\x10contract_address\x18\x01\
    \x20\x01(\tR\x0fcontractAddress:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"h\n\
    \x19QueryContractInfoResponse\x12K\n\rcontract_info\x18\x01\x20\x01(\x0b\
    2\x20.terra.wasm.v1beta1.ContractInfoR\x0ccontractInfoB\x04\xc8\xde\x1f\
    \0\"\x8b\x01\n\x19QueryContractStoreRequest\x12)\n\x10contract_address\
    \x18\x01\x20\x01(\tR\x0fcontractAddress\x129\n\tquery_msg\x18\x02\x20\
    \x01(\x0cR\x08queryMsgB\x1c\xfa\xde\x1f\x18encoding/json.RawMessage:\x08\
    \x88\xa0\x1f\0\xe8\xa0\x1f\0\"]\n\x1aQueryContractStoreResponse\x12?\n\
    \x0cquery_result\x18\x01\x20\x01(\x0cR\x0bqueryResultB\x1c\xfa\xde\x1f\
    \x18encoding/json.RawMessage\"]\n\x14QueryRawStoreRequest\x12)\n\x10cont\
    ract_address\x18\x01\x20\x01(\tR\x0fcontractAddress\x12\x10\n\x03key\x18\
    \x02\x20\x01(\x0cR\x03key:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"+\n\x15Query\
    RawStoreResponse\x12\x12\n\x04data\x18\x01\x20\x01(\x0cR\x04data\"\x14\n\
    \x12QueryParamsRequest\"O\n\x13QueryParamsResponse\x128\n\x06params\x18\
    \x01\x20\x01(\x0b2\x1a.terra.wasm.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\
    \x1f\02\xad\x07\n\x05Query\x12\x8c\x01\n\x08CodeInfo\x12(.terra.wasm.v1b\
    eta1.QueryCodeInfoRequest\x1a).terra.wasm.v1beta1.QueryCodeInfoResponse\
    \"+\x82\xd3\xe4\x93\x02%\x12#/terra/wasm/v1beta1/codes/{code_id}\x12\x96\
    \x01\n\x08ByteCode\x12(.terra.wasm.v1beta1.QueryByteCodeRequest\x1a).ter\
    ra.wasm.v1beta1.QueryByteCodeResponse\"5\x82\xd3\xe4\x93\x02/\x12-/terra\
    /wasm/v1beta1/codes/{code_id}/byte_code\x12\xa5\x01\n\x0cContractInfo\
    \x12,.terra.wasm.v1beta1.QueryContractInfoRequest\x1a-.terra.wasm.v1beta\
    1.QueryContractInfoResponse\"8\x82\xd3\xe4\x93\x022\x120/terra/wasm/v1be\
    ta1/contracts/{contract_address}\x12\xae\x01\n\rContractStore\x12-.terra\
    .wasm.v1beta1.QueryContractStoreRequest\x1a..terra.wasm.v1beta1.QueryCon\
    tractStoreResponse\">\x82\xd3\xe4\x93\x028\x126/terra/wasm/v1beta1/contr\
    acts/{contract_address}/store\x12\xa3\x01\n\x08RawStore\x12(.terra.wasm.\
    v1beta1.QueryRawStoreRequest\x1a).terra.wasm.v1beta1.QueryRawStoreRespon\
    se\"B\x82\xd3\xe4\x93\x02<\x12:/terra/wasm/v1beta1/contracts/{contract_a\
    ddress}/store/raw\x12}\n\x06Params\x12&.terra.wasm.v1beta1.QueryParamsRe\
    quest\x1a'.terra.wasm.v1beta1.QueryParamsResponse\"\"\x82\xd3\xe4\x93\
    \x02\x1c\x12\x1a/terra/wasm/v1beta1/paramsB*Z(github.com/terra-money/cor\
    e/x/wasm/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
