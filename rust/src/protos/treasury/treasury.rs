// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/treasury/v1beta1/treasury.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Params {
    // message fields
    pub tax_policy: ::protobuf::SingularPtrField<PolicyConstraints>,
    pub reward_policy: ::protobuf::SingularPtrField<PolicyConstraints>,
    pub seigniorage_burden_target: ::std::string::String,
    pub mining_increment: ::std::string::String,
    pub window_short: u64,
    pub window_long: u64,
    pub window_probation: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // .terra.treasury.v1beta1.PolicyConstraints tax_policy = 1;


    pub fn get_tax_policy(&self) -> &PolicyConstraints {
        self.tax_policy.as_ref().unwrap_or_else(|| <PolicyConstraints as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tax_policy(&mut self) {
        self.tax_policy.clear();
    }

    pub fn has_tax_policy(&self) -> bool {
        self.tax_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tax_policy(&mut self, v: PolicyConstraints) {
        self.tax_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tax_policy(&mut self) -> &mut PolicyConstraints {
        if self.tax_policy.is_none() {
            self.tax_policy.set_default();
        }
        self.tax_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_tax_policy(&mut self) -> PolicyConstraints {
        self.tax_policy.take().unwrap_or_else(|| PolicyConstraints::new())
    }

    // .terra.treasury.v1beta1.PolicyConstraints reward_policy = 2;


    pub fn get_reward_policy(&self) -> &PolicyConstraints {
        self.reward_policy.as_ref().unwrap_or_else(|| <PolicyConstraints as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reward_policy(&mut self) {
        self.reward_policy.clear();
    }

    pub fn has_reward_policy(&self) -> bool {
        self.reward_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reward_policy(&mut self, v: PolicyConstraints) {
        self.reward_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_policy(&mut self) -> &mut PolicyConstraints {
        if self.reward_policy.is_none() {
            self.reward_policy.set_default();
        }
        self.reward_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_reward_policy(&mut self) -> PolicyConstraints {
        self.reward_policy.take().unwrap_or_else(|| PolicyConstraints::new())
    }

    // string seigniorage_burden_target = 3;


    pub fn get_seigniorage_burden_target(&self) -> &str {
        &self.seigniorage_burden_target
    }
    pub fn clear_seigniorage_burden_target(&mut self) {
        self.seigniorage_burden_target.clear();
    }

    // Param is passed by value, moved
    pub fn set_seigniorage_burden_target(&mut self, v: ::std::string::String) {
        self.seigniorage_burden_target = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seigniorage_burden_target(&mut self) -> &mut ::std::string::String {
        &mut self.seigniorage_burden_target
    }

    // Take field
    pub fn take_seigniorage_burden_target(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seigniorage_burden_target, ::std::string::String::new())
    }

    // string mining_increment = 4;


    pub fn get_mining_increment(&self) -> &str {
        &self.mining_increment
    }
    pub fn clear_mining_increment(&mut self) {
        self.mining_increment.clear();
    }

    // Param is passed by value, moved
    pub fn set_mining_increment(&mut self, v: ::std::string::String) {
        self.mining_increment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mining_increment(&mut self) -> &mut ::std::string::String {
        &mut self.mining_increment
    }

    // Take field
    pub fn take_mining_increment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mining_increment, ::std::string::String::new())
    }

    // uint64 window_short = 5;


    pub fn get_window_short(&self) -> u64 {
        self.window_short
    }
    pub fn clear_window_short(&mut self) {
        self.window_short = 0;
    }

    // Param is passed by value, moved
    pub fn set_window_short(&mut self, v: u64) {
        self.window_short = v;
    }

    // uint64 window_long = 6;


    pub fn get_window_long(&self) -> u64 {
        self.window_long
    }
    pub fn clear_window_long(&mut self) {
        self.window_long = 0;
    }

    // Param is passed by value, moved
    pub fn set_window_long(&mut self, v: u64) {
        self.window_long = v;
    }

    // uint64 window_probation = 7;


    pub fn get_window_probation(&self) -> u64 {
        self.window_probation
    }
    pub fn clear_window_probation(&mut self) {
        self.window_probation = 0;
    }

    // Param is passed by value, moved
    pub fn set_window_probation(&mut self, v: u64) {
        self.window_probation = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        for v in &self.tax_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reward_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tax_policy)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reward_policy)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seigniorage_burden_target)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mining_increment)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.window_short = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.window_long = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.window_probation = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tax_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.reward_policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.seigniorage_burden_target.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.seigniorage_burden_target);
        }
        if !self.mining_increment.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.mining_increment);
        }
        if self.window_short != 0 {
            my_size += ::protobuf::rt::value_size(5, self.window_short, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.window_long != 0 {
            my_size += ::protobuf::rt::value_size(6, self.window_long, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.window_probation != 0 {
            my_size += ::protobuf::rt::value_size(7, self.window_probation, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tax_policy.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.reward_policy.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.seigniorage_burden_target.is_empty() {
            os.write_string(3, &self.seigniorage_burden_target)?;
        }
        if !self.mining_increment.is_empty() {
            os.write_string(4, &self.mining_increment)?;
        }
        if self.window_short != 0 {
            os.write_uint64(5, self.window_short)?;
        }
        if self.window_long != 0 {
            os.write_uint64(6, self.window_long)?;
        }
        if self.window_probation != 0 {
            os.write_uint64(7, self.window_probation)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PolicyConstraints>>(
                "tax_policy",
                |m: &Params| { &m.tax_policy },
                |m: &mut Params| { &mut m.tax_policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PolicyConstraints>>(
                "reward_policy",
                |m: &Params| { &m.reward_policy },
                |m: &mut Params| { &mut m.reward_policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seigniorage_burden_target",
                |m: &Params| { &m.seigniorage_burden_target },
                |m: &mut Params| { &mut m.seigniorage_burden_target },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "mining_increment",
                |m: &Params| { &m.mining_increment },
                |m: &mut Params| { &mut m.mining_increment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "window_short",
                |m: &Params| { &m.window_short },
                |m: &mut Params| { &mut m.window_short },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "window_long",
                |m: &Params| { &m.window_long },
                |m: &mut Params| { &mut m.window_long },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "window_probation",
                |m: &Params| { &m.window_probation },
                |m: &mut Params| { &mut m.window_probation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Params>(
                "Params",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.tax_policy.clear();
        self.reward_policy.clear();
        self.seigniorage_burden_target.clear();
        self.mining_increment.clear();
        self.window_short = 0;
        self.window_long = 0;
        self.window_probation = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Params {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PolicyConstraints {
    // message fields
    pub rate_min: ::std::string::String,
    pub rate_max: ::std::string::String,
    pub cap: ::protobuf::SingularPtrField<super::coin::Coin>,
    pub change_rate_max: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PolicyConstraints {
    fn default() -> &'a PolicyConstraints {
        <PolicyConstraints as ::protobuf::Message>::default_instance()
    }
}

impl PolicyConstraints {
    pub fn new() -> PolicyConstraints {
        ::std::default::Default::default()
    }

    // string rate_min = 1;


    pub fn get_rate_min(&self) -> &str {
        &self.rate_min
    }
    pub fn clear_rate_min(&mut self) {
        self.rate_min.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_min(&mut self, v: ::std::string::String) {
        self.rate_min = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_min(&mut self) -> &mut ::std::string::String {
        &mut self.rate_min
    }

    // Take field
    pub fn take_rate_min(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_min, ::std::string::String::new())
    }

    // string rate_max = 2;


    pub fn get_rate_max(&self) -> &str {
        &self.rate_max
    }
    pub fn clear_rate_max(&mut self) {
        self.rate_max.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_max(&mut self, v: ::std::string::String) {
        self.rate_max = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_max(&mut self) -> &mut ::std::string::String {
        &mut self.rate_max
    }

    // Take field
    pub fn take_rate_max(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate_max, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin cap = 3;


    pub fn get_cap(&self) -> &super::coin::Coin {
        self.cap.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cap(&mut self) {
        self.cap.clear();
    }

    pub fn has_cap(&self) -> bool {
        self.cap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cap(&mut self, v: super::coin::Coin) {
        self.cap = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cap(&mut self) -> &mut super::coin::Coin {
        if self.cap.is_none() {
            self.cap.set_default();
        }
        self.cap.as_mut().unwrap()
    }

    // Take field
    pub fn take_cap(&mut self) -> super::coin::Coin {
        self.cap.take().unwrap_or_else(|| super::coin::Coin::new())
    }

    // string change_rate_max = 4;


    pub fn get_change_rate_max(&self) -> &str {
        &self.change_rate_max
    }
    pub fn clear_change_rate_max(&mut self) {
        self.change_rate_max.clear();
    }

    // Param is passed by value, moved
    pub fn set_change_rate_max(&mut self, v: ::std::string::String) {
        self.change_rate_max = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_change_rate_max(&mut self) -> &mut ::std::string::String {
        &mut self.change_rate_max
    }

    // Take field
    pub fn take_change_rate_max(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.change_rate_max, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PolicyConstraints {
    fn is_initialized(&self) -> bool {
        for v in &self.cap {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_min)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate_max)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cap)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.change_rate_max)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rate_min.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rate_min);
        }
        if !self.rate_max.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rate_max);
        }
        if let Some(ref v) = self.cap.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.change_rate_max.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.change_rate_max);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.rate_min.is_empty() {
            os.write_string(1, &self.rate_min)?;
        }
        if !self.rate_max.is_empty() {
            os.write_string(2, &self.rate_max)?;
        }
        if let Some(ref v) = self.cap.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.change_rate_max.is_empty() {
            os.write_string(4, &self.change_rate_max)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PolicyConstraints {
        PolicyConstraints::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_min",
                |m: &PolicyConstraints| { &m.rate_min },
                |m: &mut PolicyConstraints| { &mut m.rate_min },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rate_max",
                |m: &PolicyConstraints| { &m.rate_max },
                |m: &mut PolicyConstraints| { &mut m.rate_max },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "cap",
                |m: &PolicyConstraints| { &m.cap },
                |m: &mut PolicyConstraints| { &mut m.cap },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "change_rate_max",
                |m: &PolicyConstraints| { &m.change_rate_max },
                |m: &mut PolicyConstraints| { &mut m.change_rate_max },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PolicyConstraints>(
                "PolicyConstraints",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PolicyConstraints {
        static instance: ::protobuf::rt::LazyV2<PolicyConstraints> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PolicyConstraints::new)
    }
}

impl ::protobuf::Clear for PolicyConstraints {
    fn clear(&mut self) {
        self.rate_min.clear();
        self.rate_max.clear();
        self.cap.clear();
        self.change_rate_max.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PolicyConstraints {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PolicyConstraints {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EpochTaxProceeds {
    // message fields
    pub tax_proceeds: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EpochTaxProceeds {
    fn default() -> &'a EpochTaxProceeds {
        <EpochTaxProceeds as ::protobuf::Message>::default_instance()
    }
}

impl EpochTaxProceeds {
    pub fn new() -> EpochTaxProceeds {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin tax_proceeds = 1;


    pub fn get_tax_proceeds(&self) -> &[super::coin::Coin] {
        &self.tax_proceeds
    }
    pub fn clear_tax_proceeds(&mut self) {
        self.tax_proceeds.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_proceeds(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.tax_proceeds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tax_proceeds(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.tax_proceeds
    }

    // Take field
    pub fn take_tax_proceeds(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.tax_proceeds, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EpochTaxProceeds {
    fn is_initialized(&self) -> bool {
        for v in &self.tax_proceeds {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tax_proceeds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tax_proceeds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tax_proceeds {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EpochTaxProceeds {
        EpochTaxProceeds::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "tax_proceeds",
                |m: &EpochTaxProceeds| { &m.tax_proceeds },
                |m: &mut EpochTaxProceeds| { &mut m.tax_proceeds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EpochTaxProceeds>(
                "EpochTaxProceeds",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EpochTaxProceeds {
        static instance: ::protobuf::rt::LazyV2<EpochTaxProceeds> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EpochTaxProceeds::new)
    }
}

impl ::protobuf::Clear for EpochTaxProceeds {
    fn clear(&mut self) {
        self.tax_proceeds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EpochTaxProceeds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EpochTaxProceeds {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EpochInitialIssuance {
    // message fields
    pub issuance: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EpochInitialIssuance {
    fn default() -> &'a EpochInitialIssuance {
        <EpochInitialIssuance as ::protobuf::Message>::default_instance()
    }
}

impl EpochInitialIssuance {
    pub fn new() -> EpochInitialIssuance {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin issuance = 1;


    pub fn get_issuance(&self) -> &[super::coin::Coin] {
        &self.issuance
    }
    pub fn clear_issuance(&mut self) {
        self.issuance.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuance(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.issuance = v;
    }

    // Mutable pointer to the field.
    pub fn mut_issuance(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.issuance
    }

    // Take field
    pub fn take_issuance(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.issuance, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EpochInitialIssuance {
    fn is_initialized(&self) -> bool {
        for v in &self.issuance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.issuance)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.issuance {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.issuance {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EpochInitialIssuance {
        EpochInitialIssuance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "issuance",
                |m: &EpochInitialIssuance| { &m.issuance },
                |m: &mut EpochInitialIssuance| { &mut m.issuance },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EpochInitialIssuance>(
                "EpochInitialIssuance",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EpochInitialIssuance {
        static instance: ::protobuf::rt::LazyV2<EpochInitialIssuance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EpochInitialIssuance::new)
    }
}

impl ::protobuf::Clear for EpochInitialIssuance {
    fn clear(&mut self) {
        self.issuance.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EpochInitialIssuance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EpochInitialIssuance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%terra/treasury/v1beta1/treasury.proto\x12\x16terra.treasury.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\xa9\
    \x05\n\x06Params\x12c\n\ntax_policy\x18\x01\x20\x01(\x0b2).terra.treasur\
    y.v1beta1.PolicyConstraintsR\ttaxPolicyB\x19\xf2\xde\x1f\x11yaml:\"tax_p\
    olicy\"\xc8\xde\x1f\0\x12l\n\rreward_policy\x18\x02\x20\x01(\x0b2).terra\
    .treasury.v1beta1.PolicyConstraintsR\x0crewardPolicyB\x1c\xf2\xde\x1f\
    \x14yaml:\"reward_policy\"\xc8\xde\x1f\0\x12\x8e\x01\n\x19seigniorage_bu\
    rden_target\x18\x03\x20\x01(\tR\x17seigniorageBurdenTargetBR\xf2\xde\x1f\
    \x20yaml:\"seigniorage_burden_target\"\xda\xde\x1f&github.com/cosmos/cos\
    mos-sdk/types.Dec\xc8\xde\x1f\0\x12t\n\x10mining_increment\x18\x04\x20\
    \x01(\tR\x0fminingIncrementBI\xf2\xde\x1f\x17yaml:\"mining_increment\"\
    \xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12:\n\
    \x0cwindow_short\x18\x05\x20\x01(\x04R\x0bwindowShortB\x17\xf2\xde\x1f\
    \x13yaml:\"window_short\"\x127\n\x0bwindow_long\x18\x06\x20\x01(\x04R\nw\
    indowLongB\x16\xf2\xde\x1f\x12yaml:\"window_long\"\x12F\n\x10window_prob\
    ation\x18\x07\x20\x01(\x04R\x0fwindowProbationB\x1b\xf2\xde\x1f\x17yaml:\
    \"window_probation\":\x08\xe8\xa0\x1f\x01\x98\xa0\x1f\0\"\x8c\x03\n\x11P\
    olicyConstraints\x12\\\n\x08rate_min\x18\x01\x20\x01(\tR\x07rateMinBA\
    \xf2\xde\x1f\x0fyaml:\"rate_min\"\xda\xde\x1f&github.com/cosmos/cosmos-s\
    dk/types.Dec\xc8\xde\x1f\0\x12\\\n\x08rate_max\x18\x02\x20\x01(\tR\x07ra\
    teMaxBA\xf2\xde\x1f\x0fyaml:\"rate_max\"\xda\xde\x1f&github.com/cosmos/c\
    osmos-sdk/types.Dec\xc8\xde\x1f\0\x12?\n\x03cap\x18\x03\x20\x01(\x0b2\
    \x19.cosmos.base.v1beta1.CoinR\x03capB\x12\xf2\xde\x1f\nyaml:\"cap\"\xc8\
    \xde\x1f\0\x12p\n\x0fchange_rate_max\x18\x04\x20\x01(\tR\rchangeRateMaxB\
    H\xf2\xde\x1f\x16yaml:\"change_rate_max\"\xda\xde\x1f&github.com/cosmos/\
    cosmos-sdk/types.Dec\xc8\xde\x1f\0:\x08\xe8\xa0\x1f\x01\x98\xa0\x1f\0\"\
    \x9a\x01\n\x10EpochTaxProceeds\x12\x85\x01\n\x0ctax_proceeds\x18\x01\x20\
    \x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x0btaxProceedsBG\xf2\xde\x1f\
    \x13yaml:\"tax_proceeds\"\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types\
    .Coins\xc8\xde\x1f\0\"\x92\x01\n\x14EpochInitialIssuance\x12z\n\x08issua\
    nce\x18\x01\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x08issuanceBC\
    \xf2\xde\x1f\x0fyaml:\"issuance\"\xaa\xdf\x1f(github.com/cosmos/cosmos-s\
    dk/types.Coins\xc8\xde\x1f\0B.Z,github.com/terra-money/core/x/treasury/t\
    ypesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
