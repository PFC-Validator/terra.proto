// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/treasury/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxRateRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxRateRequest {
    fn default() -> &'a QueryTaxRateRequest {
        <QueryTaxRateRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxRateRequest {
    pub fn new() -> QueryTaxRateRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryTaxRateRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxRateRequest {
        QueryTaxRateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxRateRequest>(
                "QueryTaxRateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxRateRequest {
        static instance: ::protobuf::rt::LazyV2<QueryTaxRateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxRateRequest::new)
    }
}

impl ::protobuf::Clear for QueryTaxRateRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxRateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxRateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxRateResponse {
    // message fields
    pub tax_rate: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxRateResponse {
    fn default() -> &'a QueryTaxRateResponse {
        <QueryTaxRateResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxRateResponse {
    pub fn new() -> QueryTaxRateResponse {
        ::std::default::Default::default()
    }

    // string tax_rate = 1;


    pub fn get_tax_rate(&self) -> &str {
        &self.tax_rate
    }
    pub fn clear_tax_rate(&mut self) {
        self.tax_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_rate(&mut self, v: ::std::string::String) {
        self.tax_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tax_rate(&mut self) -> &mut ::std::string::String {
        &mut self.tax_rate
    }

    // Take field
    pub fn take_tax_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tax_rate, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryTaxRateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tax_rate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tax_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tax_rate);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tax_rate.is_empty() {
            os.write_string(1, &self.tax_rate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxRateResponse {
        QueryTaxRateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tax_rate",
                |m: &QueryTaxRateResponse| { &m.tax_rate },
                |m: &mut QueryTaxRateResponse| { &mut m.tax_rate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxRateResponse>(
                "QueryTaxRateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxRateResponse {
        static instance: ::protobuf::rt::LazyV2<QueryTaxRateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxRateResponse::new)
    }
}

impl ::protobuf::Clear for QueryTaxRateResponse {
    fn clear(&mut self) {
        self.tax_rate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxRateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxRateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxCapRequest {
    // message fields
    pub denom: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxCapRequest {
    fn default() -> &'a QueryTaxCapRequest {
        <QueryTaxCapRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxCapRequest {
    pub fn new() -> QueryTaxCapRequest {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryTaxCapRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxCapRequest {
        QueryTaxCapRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &QueryTaxCapRequest| { &m.denom },
                |m: &mut QueryTaxCapRequest| { &mut m.denom },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxCapRequest>(
                "QueryTaxCapRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxCapRequest {
        static instance: ::protobuf::rt::LazyV2<QueryTaxCapRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxCapRequest::new)
    }
}

impl ::protobuf::Clear for QueryTaxCapRequest {
    fn clear(&mut self) {
        self.denom.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxCapRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxCapRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxCapResponse {
    // message fields
    pub tax_cap: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxCapResponse {
    fn default() -> &'a QueryTaxCapResponse {
        <QueryTaxCapResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxCapResponse {
    pub fn new() -> QueryTaxCapResponse {
        ::std::default::Default::default()
    }

    // string tax_cap = 1;


    pub fn get_tax_cap(&self) -> &str {
        &self.tax_cap
    }
    pub fn clear_tax_cap(&mut self) {
        self.tax_cap.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_cap(&mut self, v: ::std::string::String) {
        self.tax_cap = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tax_cap(&mut self) -> &mut ::std::string::String {
        &mut self.tax_cap
    }

    // Take field
    pub fn take_tax_cap(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tax_cap, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryTaxCapResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tax_cap)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tax_cap.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tax_cap);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tax_cap.is_empty() {
            os.write_string(1, &self.tax_cap)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxCapResponse {
        QueryTaxCapResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tax_cap",
                |m: &QueryTaxCapResponse| { &m.tax_cap },
                |m: &mut QueryTaxCapResponse| { &mut m.tax_cap },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxCapResponse>(
                "QueryTaxCapResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxCapResponse {
        static instance: ::protobuf::rt::LazyV2<QueryTaxCapResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxCapResponse::new)
    }
}

impl ::protobuf::Clear for QueryTaxCapResponse {
    fn clear(&mut self) {
        self.tax_cap.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxCapResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxCapResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxCapsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxCapsRequest {
    fn default() -> &'a QueryTaxCapsRequest {
        <QueryTaxCapsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxCapsRequest {
    pub fn new() -> QueryTaxCapsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryTaxCapsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxCapsRequest {
        QueryTaxCapsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxCapsRequest>(
                "QueryTaxCapsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxCapsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryTaxCapsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxCapsRequest::new)
    }
}

impl ::protobuf::Clear for QueryTaxCapsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxCapsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxCapsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxCapsResponseItem {
    // message fields
    pub denom: ::std::string::String,
    pub tax_cap: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxCapsResponseItem {
    fn default() -> &'a QueryTaxCapsResponseItem {
        <QueryTaxCapsResponseItem as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxCapsResponseItem {
    pub fn new() -> QueryTaxCapsResponseItem {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string tax_cap = 2;


    pub fn get_tax_cap(&self) -> &str {
        &self.tax_cap
    }
    pub fn clear_tax_cap(&mut self) {
        self.tax_cap.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_cap(&mut self, v: ::std::string::String) {
        self.tax_cap = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tax_cap(&mut self) -> &mut ::std::string::String {
        &mut self.tax_cap
    }

    // Take field
    pub fn take_tax_cap(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tax_cap, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryTaxCapsResponseItem {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tax_cap)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.tax_cap.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tax_cap);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.tax_cap.is_empty() {
            os.write_string(2, &self.tax_cap)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxCapsResponseItem {
        QueryTaxCapsResponseItem::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &QueryTaxCapsResponseItem| { &m.denom },
                |m: &mut QueryTaxCapsResponseItem| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tax_cap",
                |m: &QueryTaxCapsResponseItem| { &m.tax_cap },
                |m: &mut QueryTaxCapsResponseItem| { &mut m.tax_cap },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxCapsResponseItem>(
                "QueryTaxCapsResponseItem",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxCapsResponseItem {
        static instance: ::protobuf::rt::LazyV2<QueryTaxCapsResponseItem> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxCapsResponseItem::new)
    }
}

impl ::protobuf::Clear for QueryTaxCapsResponseItem {
    fn clear(&mut self) {
        self.denom.clear();
        self.tax_cap.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxCapsResponseItem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxCapsResponseItem {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxCapsResponse {
    // message fields
    pub tax_caps: ::protobuf::RepeatedField<QueryTaxCapsResponseItem>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxCapsResponse {
    fn default() -> &'a QueryTaxCapsResponse {
        <QueryTaxCapsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxCapsResponse {
    pub fn new() -> QueryTaxCapsResponse {
        ::std::default::Default::default()
    }

    // repeated .terra.treasury.v1beta1.QueryTaxCapsResponseItem tax_caps = 1;


    pub fn get_tax_caps(&self) -> &[QueryTaxCapsResponseItem] {
        &self.tax_caps
    }
    pub fn clear_tax_caps(&mut self) {
        self.tax_caps.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_caps(&mut self, v: ::protobuf::RepeatedField<QueryTaxCapsResponseItem>) {
        self.tax_caps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tax_caps(&mut self) -> &mut ::protobuf::RepeatedField<QueryTaxCapsResponseItem> {
        &mut self.tax_caps
    }

    // Take field
    pub fn take_tax_caps(&mut self) -> ::protobuf::RepeatedField<QueryTaxCapsResponseItem> {
        ::std::mem::replace(&mut self.tax_caps, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryTaxCapsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tax_caps {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tax_caps)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tax_caps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tax_caps {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxCapsResponse {
        QueryTaxCapsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<QueryTaxCapsResponseItem>>(
                "tax_caps",
                |m: &QueryTaxCapsResponse| { &m.tax_caps },
                |m: &mut QueryTaxCapsResponse| { &mut m.tax_caps },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxCapsResponse>(
                "QueryTaxCapsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxCapsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryTaxCapsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxCapsResponse::new)
    }
}

impl ::protobuf::Clear for QueryTaxCapsResponse {
    fn clear(&mut self) {
        self.tax_caps.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxCapsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxCapsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRewardWeightRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRewardWeightRequest {
    fn default() -> &'a QueryRewardWeightRequest {
        <QueryRewardWeightRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryRewardWeightRequest {
    pub fn new() -> QueryRewardWeightRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryRewardWeightRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRewardWeightRequest {
        QueryRewardWeightRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRewardWeightRequest>(
                "QueryRewardWeightRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRewardWeightRequest {
        static instance: ::protobuf::rt::LazyV2<QueryRewardWeightRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRewardWeightRequest::new)
    }
}

impl ::protobuf::Clear for QueryRewardWeightRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRewardWeightRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRewardWeightRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRewardWeightResponse {
    // message fields
    pub reward_weight: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRewardWeightResponse {
    fn default() -> &'a QueryRewardWeightResponse {
        <QueryRewardWeightResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryRewardWeightResponse {
    pub fn new() -> QueryRewardWeightResponse {
        ::std::default::Default::default()
    }

    // string reward_weight = 1;


    pub fn get_reward_weight(&self) -> &str {
        &self.reward_weight
    }
    pub fn clear_reward_weight(&mut self) {
        self.reward_weight.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_weight(&mut self, v: ::std::string::String) {
        self.reward_weight = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_weight(&mut self) -> &mut ::std::string::String {
        &mut self.reward_weight
    }

    // Take field
    pub fn take_reward_weight(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_weight, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryRewardWeightResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_weight)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.reward_weight.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.reward_weight);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.reward_weight.is_empty() {
            os.write_string(1, &self.reward_weight)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRewardWeightResponse {
        QueryRewardWeightResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reward_weight",
                |m: &QueryRewardWeightResponse| { &m.reward_weight },
                |m: &mut QueryRewardWeightResponse| { &mut m.reward_weight },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRewardWeightResponse>(
                "QueryRewardWeightResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRewardWeightResponse {
        static instance: ::protobuf::rt::LazyV2<QueryRewardWeightResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRewardWeightResponse::new)
    }
}

impl ::protobuf::Clear for QueryRewardWeightResponse {
    fn clear(&mut self) {
        self.reward_weight.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRewardWeightResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRewardWeightResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxProceedsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxProceedsRequest {
    fn default() -> &'a QueryTaxProceedsRequest {
        <QueryTaxProceedsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxProceedsRequest {
    pub fn new() -> QueryTaxProceedsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryTaxProceedsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxProceedsRequest {
        QueryTaxProceedsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxProceedsRequest>(
                "QueryTaxProceedsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxProceedsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryTaxProceedsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxProceedsRequest::new)
    }
}

impl ::protobuf::Clear for QueryTaxProceedsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxProceedsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxProceedsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryTaxProceedsResponse {
    // message fields
    pub tax_proceeds: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryTaxProceedsResponse {
    fn default() -> &'a QueryTaxProceedsResponse {
        <QueryTaxProceedsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryTaxProceedsResponse {
    pub fn new() -> QueryTaxProceedsResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin tax_proceeds = 1;


    pub fn get_tax_proceeds(&self) -> &[super::coin::Coin] {
        &self.tax_proceeds
    }
    pub fn clear_tax_proceeds(&mut self) {
        self.tax_proceeds.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_proceeds(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.tax_proceeds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tax_proceeds(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.tax_proceeds
    }

    // Take field
    pub fn take_tax_proceeds(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.tax_proceeds, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QueryTaxProceedsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tax_proceeds {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tax_proceeds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tax_proceeds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tax_proceeds {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryTaxProceedsResponse {
        QueryTaxProceedsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "tax_proceeds",
                |m: &QueryTaxProceedsResponse| { &m.tax_proceeds },
                |m: &mut QueryTaxProceedsResponse| { &mut m.tax_proceeds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryTaxProceedsResponse>(
                "QueryTaxProceedsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryTaxProceedsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryTaxProceedsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryTaxProceedsResponse::new)
    }
}

impl ::protobuf::Clear for QueryTaxProceedsResponse {
    fn clear(&mut self) {
        self.tax_proceeds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryTaxProceedsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryTaxProceedsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QuerySeigniorageProceedsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuerySeigniorageProceedsRequest {
    fn default() -> &'a QuerySeigniorageProceedsRequest {
        <QuerySeigniorageProceedsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QuerySeigniorageProceedsRequest {
    pub fn new() -> QuerySeigniorageProceedsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QuerySeigniorageProceedsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuerySeigniorageProceedsRequest {
        QuerySeigniorageProceedsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuerySeigniorageProceedsRequest>(
                "QuerySeigniorageProceedsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QuerySeigniorageProceedsRequest {
        static instance: ::protobuf::rt::LazyV2<QuerySeigniorageProceedsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QuerySeigniorageProceedsRequest::new)
    }
}

impl ::protobuf::Clear for QuerySeigniorageProceedsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuerySeigniorageProceedsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuerySeigniorageProceedsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QuerySeigniorageProceedsResponse {
    // message fields
    pub seigniorage_proceeds: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuerySeigniorageProceedsResponse {
    fn default() -> &'a QuerySeigniorageProceedsResponse {
        <QuerySeigniorageProceedsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QuerySeigniorageProceedsResponse {
    pub fn new() -> QuerySeigniorageProceedsResponse {
        ::std::default::Default::default()
    }

    // string seigniorage_proceeds = 1;


    pub fn get_seigniorage_proceeds(&self) -> &str {
        &self.seigniorage_proceeds
    }
    pub fn clear_seigniorage_proceeds(&mut self) {
        self.seigniorage_proceeds.clear();
    }

    // Param is passed by value, moved
    pub fn set_seigniorage_proceeds(&mut self, v: ::std::string::String) {
        self.seigniorage_proceeds = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seigniorage_proceeds(&mut self) -> &mut ::std::string::String {
        &mut self.seigniorage_proceeds
    }

    // Take field
    pub fn take_seigniorage_proceeds(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seigniorage_proceeds, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QuerySeigniorageProceedsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seigniorage_proceeds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.seigniorage_proceeds.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.seigniorage_proceeds);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.seigniorage_proceeds.is_empty() {
            os.write_string(1, &self.seigniorage_proceeds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuerySeigniorageProceedsResponse {
        QuerySeigniorageProceedsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seigniorage_proceeds",
                |m: &QuerySeigniorageProceedsResponse| { &m.seigniorage_proceeds },
                |m: &mut QuerySeigniorageProceedsResponse| { &mut m.seigniorage_proceeds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuerySeigniorageProceedsResponse>(
                "QuerySeigniorageProceedsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QuerySeigniorageProceedsResponse {
        static instance: ::protobuf::rt::LazyV2<QuerySeigniorageProceedsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QuerySeigniorageProceedsResponse::new)
    }
}

impl ::protobuf::Clear for QuerySeigniorageProceedsResponse {
    fn clear(&mut self) {
        self.seigniorage_proceeds.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuerySeigniorageProceedsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuerySeigniorageProceedsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryIndicatorsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryIndicatorsRequest {
    fn default() -> &'a QueryIndicatorsRequest {
        <QueryIndicatorsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryIndicatorsRequest {
    pub fn new() -> QueryIndicatorsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryIndicatorsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryIndicatorsRequest {
        QueryIndicatorsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryIndicatorsRequest>(
                "QueryIndicatorsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryIndicatorsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryIndicatorsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryIndicatorsRequest::new)
    }
}

impl ::protobuf::Clear for QueryIndicatorsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryIndicatorsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryIndicatorsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryIndicatorsResponse {
    // message fields
    pub trl_year: ::std::string::String,
    pub trl_month: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryIndicatorsResponse {
    fn default() -> &'a QueryIndicatorsResponse {
        <QueryIndicatorsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryIndicatorsResponse {
    pub fn new() -> QueryIndicatorsResponse {
        ::std::default::Default::default()
    }

    // string trl_year = 1;


    pub fn get_trl_year(&self) -> &str {
        &self.trl_year
    }
    pub fn clear_trl_year(&mut self) {
        self.trl_year.clear();
    }

    // Param is passed by value, moved
    pub fn set_trl_year(&mut self, v: ::std::string::String) {
        self.trl_year = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trl_year(&mut self) -> &mut ::std::string::String {
        &mut self.trl_year
    }

    // Take field
    pub fn take_trl_year(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trl_year, ::std::string::String::new())
    }

    // string trl_month = 2;


    pub fn get_trl_month(&self) -> &str {
        &self.trl_month
    }
    pub fn clear_trl_month(&mut self) {
        self.trl_month.clear();
    }

    // Param is passed by value, moved
    pub fn set_trl_month(&mut self, v: ::std::string::String) {
        self.trl_month = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trl_month(&mut self) -> &mut ::std::string::String {
        &mut self.trl_month
    }

    // Take field
    pub fn take_trl_month(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trl_month, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryIndicatorsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trl_year)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trl_month)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.trl_year.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.trl_year);
        }
        if !self.trl_month.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.trl_month);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.trl_year.is_empty() {
            os.write_string(1, &self.trl_year)?;
        }
        if !self.trl_month.is_empty() {
            os.write_string(2, &self.trl_month)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryIndicatorsResponse {
        QueryIndicatorsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trl_year",
                |m: &QueryIndicatorsResponse| { &m.trl_year },
                |m: &mut QueryIndicatorsResponse| { &mut m.trl_year },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trl_month",
                |m: &QueryIndicatorsResponse| { &m.trl_month },
                |m: &mut QueryIndicatorsResponse| { &mut m.trl_month },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryIndicatorsResponse>(
                "QueryIndicatorsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryIndicatorsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryIndicatorsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryIndicatorsResponse::new)
    }
}

impl ::protobuf::Clear for QueryIndicatorsResponse {
    fn clear(&mut self) {
        self.trl_year.clear();
        self.trl_month.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryIndicatorsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryIndicatorsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryParamsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryParamsRequest {
    fn default() -> &'a QueryParamsRequest {
        <QueryParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsRequest {
    pub fn new() -> QueryParamsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryParamsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryParamsRequest {
        QueryParamsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryParamsRequest>(
                "QueryParamsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryParamsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryParamsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryParamsRequest::new)
    }
}

impl ::protobuf::Clear for QueryParamsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryParamsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryParamsResponse {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::treasury::Params>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryParamsResponse {
    fn default() -> &'a QueryParamsResponse {
        <QueryParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryParamsResponse {
    pub fn new() -> QueryParamsResponse {
        ::std::default::Default::default()
    }

    // .terra.treasury.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::treasury::Params {
        self.params.as_ref().unwrap_or_else(|| <super::treasury::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::treasury::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::treasury::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::treasury::Params {
        self.params.take().unwrap_or_else(|| super::treasury::Params::new())
    }
}

impl ::protobuf::Message for QueryParamsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryParamsResponse {
        QueryParamsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::treasury::Params>>(
                "params",
                |m: &QueryParamsResponse| { &m.params },
                |m: &mut QueryParamsResponse| { &mut m.params },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryParamsResponse>(
                "QueryParamsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryParamsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryParamsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryParamsResponse::new)
    }
}

impl ::protobuf::Clear for QueryParamsResponse {
    fn clear(&mut self) {
        self.params.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryParamsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryParamsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"terra/treasury/v1beta1/query.proto\x12\x16terra.treasury.v1beta1\x1a\
    \x14gogoproto/gogo.proto\x1a\x1cgoogle/api/annotations.proto\x1a%terra/t\
    reasury/v1beta1/treasury.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\"\
    \x15\n\x13QueryTaxRateRequest\"a\n\x14QueryTaxRateResponse\x12I\n\x08tax\
    _rate\x18\x01\x20\x01(\tR\x07taxRateB.\xda\xde\x1f&github.com/cosmos/cos\
    mos-sdk/types.Dec\xc8\xde\x1f\0\"4\n\x12QueryTaxCapRequest\x12\x14\n\x05\
    denom\x18\x01\x20\x01(\tR\x05denom:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"^\n\
    \x13QueryTaxCapResponse\x12G\n\x07tax_cap\x18\x01\x20\x01(\tR\x06taxCapB\
    .\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0\"\x1f\
    \n\x13QueryTaxCapsRequest:\x08\x88\xa0\x1f\0\xe8\xa0\x1f\0\"y\n\x18Query\
    TaxCapsResponseItem\x12\x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12G\
    \n\x07tax_cap\x18\x02\x20\x01(\tR\x06taxCapB.\xda\xde\x1f&github.com/cos\
    mos/cosmos-sdk/types.Int\xc8\xde\x1f\0\"i\n\x14QueryTaxCapsResponse\x12Q\
    \n\x08tax_caps\x18\x01\x20\x03(\x0b20.terra.treasury.v1beta1.QueryTaxCap\
    sResponseItemR\x07taxCapsB\x04\xc8\xde\x1f\0\"\x1a\n\x18QueryRewardWeigh\
    tRequest\"p\n\x19QueryRewardWeightResponse\x12S\n\rreward_weight\x18\x01\
    \x20\x01(\tR\x0crewardWeightB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/\
    types.Dec\xc8\xde\x1f\0\"\x19\n\x17QueryTaxProceedsRequest\"\x8a\x01\n\
    \x18QueryTaxProceedsResponse\x12n\n\x0ctax_proceeds\x18\x01\x20\x03(\x0b\
    2\x19.cosmos.base.v1beta1.CoinR\x0btaxProceedsB0\xaa\xdf\x1f(github.com/\
    cosmos/cosmos-sdk/types.Coins\xc8\xde\x1f\0\"!\n\x1fQuerySeigniorageProc\
    eedsRequest\"\x85\x01\n\x20QuerySeigniorageProceedsResponse\x12a\n\x14se\
    igniorage_proceeds\x18\x01\x20\x01(\tR\x13seigniorageProceedsB.\xda\xde\
    \x1f&github.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0\"\x18\n\x16Que\
    ryIndicatorsRequest\"\xc8\x01\n\x17QueryIndicatorsResponse\x12T\n\x08trl\
    _year\x18\x01\x20\x01(\tR\x07trlYearB9\xda\xde\x1f&github.com/cosmos/cos\
    mos-sdk/types.Dec\xc8\xde\x1f\0\xe2\xde\x1f\x07TRLYear\x12W\n\ttrl_month\
    \x18\x02\x20\x01(\tR\x08trlMonthB:\xda\xde\x1f&github.com/cosmos/cosmos-\
    sdk/types.Dec\xc8\xde\x1f\0\xe2\xde\x1f\x08TRLMonth\"\x14\n\x12QueryPara\
    msRequest\"S\n\x13QueryParamsResponse\x12<\n\x06params\x18\x01\x20\x01(\
    \x0b2\x1e.terra.treasury.v1beta1.ParamsR\x06paramsB\x04\xc8\xde\x1f\02\
    \xee\t\n\x05Query\x12\x8e\x01\n\x07TaxRate\x12+.terra.treasury.v1beta1.Q\
    ueryTaxRateRequest\x1a,.terra.treasury.v1beta1.QueryTaxRateResponse\"(\
    \x82\xd3\xe4\x93\x02\"\x12\x20/terra/treasury/v1beta1/tax_rate\x12\x93\
    \x01\n\x06TaxCap\x12*.terra.treasury.v1beta1.QueryTaxCapRequest\x1a+.ter\
    ra.treasury.v1beta1.QueryTaxCapResponse\"0\x82\xd3\xe4\x93\x02*\x12(/ter\
    ra/treasury/v1beta1/tax_caps/{denom}\x12\x8e\x01\n\x07TaxCaps\x12+.terra\
    .treasury.v1beta1.QueryTaxCapsRequest\x1a,.terra.treasury.v1beta1.QueryT\
    axCapsResponse\"(\x82\xd3\xe4\x93\x02\"\x12\x20/terra/treasury/v1beta1/t\
    ax_caps\x12\xa2\x01\n\x0cRewardWeight\x120.terra.treasury.v1beta1.QueryR\
    ewardWeightRequest\x1a1.terra.treasury.v1beta1.QueryRewardWeightResponse\
    \"-\x82\xd3\xe4\x93\x02'\x12%/terra/treasury/v1beta1/reward_weight\x12\
    \xbe\x01\n\x13SeigniorageProceeds\x127.terra.treasury.v1beta1.QuerySeign\
    iorageProceedsRequest\x1a8.terra.treasury.v1beta1.QuerySeigniorageProcee\
    dsResponse\"4\x82\xd3\xe4\x93\x02.\x12,/terra/treasury/v1beta1/seigniora\
    ge_proceeds\x12\x9e\x01\n\x0bTaxProceeds\x12/.terra.treasury.v1beta1.Que\
    ryTaxProceedsRequest\x1a0.terra.treasury.v1beta1.QueryTaxProceedsRespons\
    e\",\x82\xd3\xe4\x93\x02&\x12$/terra/treasury/v1beta1/tax_proceeds\x12\
    \x99\x01\n\nIndicators\x12..terra.treasury.v1beta1.QueryIndicatorsReques\
    t\x1a/.terra.treasury.v1beta1.QueryIndicatorsResponse\"*\x82\xd3\xe4\x93\
    \x02$\x12\"/terra/treasury/v1beta1/indicators\x12\x89\x01\n\x06Params\
    \x12*.terra.treasury.v1beta1.QueryParamsRequest\x1a+.terra.treasury.v1be\
    ta1.QueryParamsResponse\"&\x82\xd3\xe4\x93\x02\x20\x12\x1e/terra/treasur\
    y/v1beta1/paramsB.Z,github.com/terra-money/core/x/treasury/typesb\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
