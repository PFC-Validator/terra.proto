// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/treasury/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::treasury::Params>,
    pub tax_rate: ::std::string::String,
    pub reward_weight: ::std::string::String,
    pub tax_caps: ::protobuf::RepeatedField<TaxCap>,
    pub tax_proceeds: ::protobuf::RepeatedField<super::coin::Coin>,
    pub epoch_initial_issuance: ::protobuf::RepeatedField<super::coin::Coin>,
    pub epoch_states: ::protobuf::RepeatedField<EpochState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .terra.treasury.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::treasury::Params {
        self.params.as_ref().unwrap_or_else(|| <super::treasury::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::treasury::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::treasury::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::treasury::Params {
        self.params.take().unwrap_or_else(|| super::treasury::Params::new())
    }

    // string tax_rate = 2;


    pub fn get_tax_rate(&self) -> &str {
        &self.tax_rate
    }
    pub fn clear_tax_rate(&mut self) {
        self.tax_rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_rate(&mut self, v: ::std::string::String) {
        self.tax_rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tax_rate(&mut self) -> &mut ::std::string::String {
        &mut self.tax_rate
    }

    // Take field
    pub fn take_tax_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tax_rate, ::std::string::String::new())
    }

    // string reward_weight = 3;


    pub fn get_reward_weight(&self) -> &str {
        &self.reward_weight
    }
    pub fn clear_reward_weight(&mut self) {
        self.reward_weight.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_weight(&mut self, v: ::std::string::String) {
        self.reward_weight = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_weight(&mut self) -> &mut ::std::string::String {
        &mut self.reward_weight
    }

    // Take field
    pub fn take_reward_weight(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_weight, ::std::string::String::new())
    }

    // repeated .terra.treasury.v1beta1.TaxCap tax_caps = 4;


    pub fn get_tax_caps(&self) -> &[TaxCap] {
        &self.tax_caps
    }
    pub fn clear_tax_caps(&mut self) {
        self.tax_caps.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_caps(&mut self, v: ::protobuf::RepeatedField<TaxCap>) {
        self.tax_caps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tax_caps(&mut self) -> &mut ::protobuf::RepeatedField<TaxCap> {
        &mut self.tax_caps
    }

    // Take field
    pub fn take_tax_caps(&mut self) -> ::protobuf::RepeatedField<TaxCap> {
        ::std::mem::replace(&mut self.tax_caps, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.base.v1beta1.Coin tax_proceeds = 5;


    pub fn get_tax_proceeds(&self) -> &[super::coin::Coin] {
        &self.tax_proceeds
    }
    pub fn clear_tax_proceeds(&mut self) {
        self.tax_proceeds.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_proceeds(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.tax_proceeds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tax_proceeds(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.tax_proceeds
    }

    // Take field
    pub fn take_tax_proceeds(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.tax_proceeds, ::protobuf::RepeatedField::new())
    }

    // repeated .cosmos.base.v1beta1.Coin epoch_initial_issuance = 6;


    pub fn get_epoch_initial_issuance(&self) -> &[super::coin::Coin] {
        &self.epoch_initial_issuance
    }
    pub fn clear_epoch_initial_issuance(&mut self) {
        self.epoch_initial_issuance.clear();
    }

    // Param is passed by value, moved
    pub fn set_epoch_initial_issuance(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.epoch_initial_issuance = v;
    }

    // Mutable pointer to the field.
    pub fn mut_epoch_initial_issuance(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.epoch_initial_issuance
    }

    // Take field
    pub fn take_epoch_initial_issuance(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.epoch_initial_issuance, ::protobuf::RepeatedField::new())
    }

    // repeated .terra.treasury.v1beta1.EpochState epoch_states = 7;


    pub fn get_epoch_states(&self) -> &[EpochState] {
        &self.epoch_states
    }
    pub fn clear_epoch_states(&mut self) {
        self.epoch_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_epoch_states(&mut self, v: ::protobuf::RepeatedField<EpochState>) {
        self.epoch_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_epoch_states(&mut self) -> &mut ::protobuf::RepeatedField<EpochState> {
        &mut self.epoch_states
    }

    // Take field
    pub fn take_epoch_states(&mut self) -> ::protobuf::RepeatedField<EpochState> {
        ::std::mem::replace(&mut self.epoch_states, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tax_caps {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tax_proceeds {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.epoch_initial_issuance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.epoch_states {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tax_rate)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_weight)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tax_caps)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tax_proceeds)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.epoch_initial_issuance)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.epoch_states)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.tax_rate.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tax_rate);
        }
        if !self.reward_weight.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.reward_weight);
        }
        for value in &self.tax_caps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tax_proceeds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.epoch_initial_issuance {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.epoch_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.tax_rate.is_empty() {
            os.write_string(2, &self.tax_rate)?;
        }
        if !self.reward_weight.is_empty() {
            os.write_string(3, &self.reward_weight)?;
        }
        for v in &self.tax_caps {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.tax_proceeds {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.epoch_initial_issuance {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.epoch_states {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::treasury::Params>>(
                "params",
                |m: &GenesisState| { &m.params },
                |m: &mut GenesisState| { &mut m.params },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tax_rate",
                |m: &GenesisState| { &m.tax_rate },
                |m: &mut GenesisState| { &mut m.tax_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reward_weight",
                |m: &GenesisState| { &m.reward_weight },
                |m: &mut GenesisState| { &mut m.reward_weight },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TaxCap>>(
                "tax_caps",
                |m: &GenesisState| { &m.tax_caps },
                |m: &mut GenesisState| { &mut m.tax_caps },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "tax_proceeds",
                |m: &GenesisState| { &m.tax_proceeds },
                |m: &mut GenesisState| { &mut m.tax_proceeds },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "epoch_initial_issuance",
                |m: &GenesisState| { &m.epoch_initial_issuance },
                |m: &mut GenesisState| { &mut m.epoch_initial_issuance },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EpochState>>(
                "epoch_states",
                |m: &GenesisState| { &m.epoch_states },
                |m: &mut GenesisState| { &mut m.epoch_states },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenesisState>(
                "GenesisState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.tax_rate.clear();
        self.reward_weight.clear();
        self.tax_caps.clear();
        self.tax_proceeds.clear();
        self.epoch_initial_issuance.clear();
        self.epoch_states.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenesisState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaxCap {
    // message fields
    pub denom: ::std::string::String,
    pub tax_cap: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaxCap {
    fn default() -> &'a TaxCap {
        <TaxCap as ::protobuf::Message>::default_instance()
    }
}

impl TaxCap {
    pub fn new() -> TaxCap {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string tax_cap = 2;


    pub fn get_tax_cap(&self) -> &str {
        &self.tax_cap
    }
    pub fn clear_tax_cap(&mut self) {
        self.tax_cap.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_cap(&mut self, v: ::std::string::String) {
        self.tax_cap = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tax_cap(&mut self) -> &mut ::std::string::String {
        &mut self.tax_cap
    }

    // Take field
    pub fn take_tax_cap(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tax_cap, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TaxCap {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tax_cap)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.tax_cap.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tax_cap);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.tax_cap.is_empty() {
            os.write_string(2, &self.tax_cap)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaxCap {
        TaxCap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "denom",
                |m: &TaxCap| { &m.denom },
                |m: &mut TaxCap| { &mut m.denom },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tax_cap",
                |m: &TaxCap| { &m.tax_cap },
                |m: &mut TaxCap| { &mut m.tax_cap },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TaxCap>(
                "TaxCap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TaxCap {
        static instance: ::protobuf::rt::LazyV2<TaxCap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TaxCap::new)
    }
}

impl ::protobuf::Clear for TaxCap {
    fn clear(&mut self) {
        self.denom.clear();
        self.tax_cap.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaxCap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaxCap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EpochState {
    // message fields
    pub epoch: u64,
    pub tax_reward: ::std::string::String,
    pub seigniorage_reward: ::std::string::String,
    pub total_staked_luna: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EpochState {
    fn default() -> &'a EpochState {
        <EpochState as ::protobuf::Message>::default_instance()
    }
}

impl EpochState {
    pub fn new() -> EpochState {
        ::std::default::Default::default()
    }

    // uint64 epoch = 1;


    pub fn get_epoch(&self) -> u64 {
        self.epoch
    }
    pub fn clear_epoch(&mut self) {
        self.epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_epoch(&mut self, v: u64) {
        self.epoch = v;
    }

    // string tax_reward = 2;


    pub fn get_tax_reward(&self) -> &str {
        &self.tax_reward
    }
    pub fn clear_tax_reward(&mut self) {
        self.tax_reward.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_reward(&mut self, v: ::std::string::String) {
        self.tax_reward = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tax_reward(&mut self) -> &mut ::std::string::String {
        &mut self.tax_reward
    }

    // Take field
    pub fn take_tax_reward(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tax_reward, ::std::string::String::new())
    }

    // string seigniorage_reward = 3;


    pub fn get_seigniorage_reward(&self) -> &str {
        &self.seigniorage_reward
    }
    pub fn clear_seigniorage_reward(&mut self) {
        self.seigniorage_reward.clear();
    }

    // Param is passed by value, moved
    pub fn set_seigniorage_reward(&mut self, v: ::std::string::String) {
        self.seigniorage_reward = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_seigniorage_reward(&mut self) -> &mut ::std::string::String {
        &mut self.seigniorage_reward
    }

    // Take field
    pub fn take_seigniorage_reward(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.seigniorage_reward, ::std::string::String::new())
    }

    // string total_staked_luna = 4;


    pub fn get_total_staked_luna(&self) -> &str {
        &self.total_staked_luna
    }
    pub fn clear_total_staked_luna(&mut self) {
        self.total_staked_luna.clear();
    }

    // Param is passed by value, moved
    pub fn set_total_staked_luna(&mut self, v: ::std::string::String) {
        self.total_staked_luna = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_total_staked_luna(&mut self) -> &mut ::std::string::String {
        &mut self.total_staked_luna
    }

    // Take field
    pub fn take_total_staked_luna(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.total_staked_luna, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EpochState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.epoch = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tax_reward)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.seigniorage_reward)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.total_staked_luna)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.epoch != 0 {
            my_size += ::protobuf::rt::value_size(1, self.epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.tax_reward.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tax_reward);
        }
        if !self.seigniorage_reward.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.seigniorage_reward);
        }
        if !self.total_staked_luna.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.total_staked_luna);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.epoch != 0 {
            os.write_uint64(1, self.epoch)?;
        }
        if !self.tax_reward.is_empty() {
            os.write_string(2, &self.tax_reward)?;
        }
        if !self.seigniorage_reward.is_empty() {
            os.write_string(3, &self.seigniorage_reward)?;
        }
        if !self.total_staked_luna.is_empty() {
            os.write_string(4, &self.total_staked_luna)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EpochState {
        EpochState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "epoch",
                |m: &EpochState| { &m.epoch },
                |m: &mut EpochState| { &mut m.epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tax_reward",
                |m: &EpochState| { &m.tax_reward },
                |m: &mut EpochState| { &mut m.tax_reward },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "seigniorage_reward",
                |m: &EpochState| { &m.seigniorage_reward },
                |m: &mut EpochState| { &mut m.seigniorage_reward },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "total_staked_luna",
                |m: &EpochState| { &m.total_staked_luna },
                |m: &mut EpochState| { &mut m.total_staked_luna },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EpochState>(
                "EpochState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EpochState {
        static instance: ::protobuf::rt::LazyV2<EpochState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EpochState::new)
    }
}

impl ::protobuf::Clear for EpochState {
    fn clear(&mut self) {
        self.epoch = 0;
        self.tax_reward.clear();
        self.seigniorage_reward.clear();
        self.total_staked_luna.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EpochState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EpochState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$terra/treasury/v1beta1/genesis.proto\x12\x16terra.treasury.v1beta1\
    \x1a\x14gogoproto/gogo.proto\x1a%terra/treasury/v1beta1/treasury.proto\
    \x1a\x1ecosmos/base/v1beta1/coin.proto\"\xee\x04\n\x0cGenesisState\x12<\
    \n\x06params\x18\x01\x20\x01(\x0b2\x1e.terra.treasury.v1beta1.ParamsR\
    \x06paramsB\x04\xc8\xde\x1f\0\x12I\n\x08tax_rate\x18\x02\x20\x01(\tR\x07\
    taxRateB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\
    \0\x12S\n\rreward_weight\x18\x03\x20\x01(\tR\x0crewardWeightB.\xda\xde\
    \x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12?\n\x08tax_\
    caps\x18\x04\x20\x03(\x0b2\x1e.terra.treasury.v1beta1.TaxCapR\x07taxCaps\
    B\x04\xc8\xde\x1f\0\x12n\n\x0ctax_proceeds\x18\x05\x20\x03(\x0b2\x19.cos\
    mos.base.v1beta1.CoinR\x0btaxProceedsB0\xaa\xdf\x1f(github.com/cosmos/co\
    smos-sdk/types.Coins\xc8\xde\x1f\0\x12\x81\x01\n\x16epoch_initial_issuan\
    ce\x18\x06\x20\x03(\x0b2\x19.cosmos.base.v1beta1.CoinR\x14epochInitialIs\
    suanceB0\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.Coins\xc8\xde\
    \x1f\0\x12K\n\x0cepoch_states\x18\x07\x20\x03(\x0b2\".terra.treasury.v1b\
    eta1.EpochStateR\x0bepochStatesB\x04\xc8\xde\x1f\0\"g\n\x06TaxCap\x12\
    \x14\n\x05denom\x18\x01\x20\x01(\tR\x05denom\x12G\n\x07tax_cap\x18\x02\
    \x20\x01(\tR\x06taxCapB.\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.\
    Int\xc8\xde\x1f\0\"\xac\x02\n\nEpochState\x12\x14\n\x05epoch\x18\x01\x20\
    \x01(\x04R\x05epoch\x12M\n\ntax_reward\x18\x02\x20\x01(\tR\ttaxRewardB.\
    \xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12]\n\
    \x12seigniorage_reward\x18\x03\x20\x01(\tR\x11seigniorageRewardB.\xda\
    \xde\x1f&github.com/cosmos/cosmos-sdk/types.Dec\xc8\xde\x1f\0\x12Z\n\x11\
    total_staked_luna\x18\x04\x20\x01(\tR\x0ftotalStakedLunaB.\xda\xde\x1f&g\
    ithub.com/cosmos/cosmos-sdk/types.Int\xc8\xde\x1f\0B.Z,github.com/terra-\
    money/core/x/treasury/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
