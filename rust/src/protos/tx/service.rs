// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `terra/tx/v1beta1/service.proto`

use crate::cosmos::tx::tx::Tx;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ComputeTaxRequest {
    // message fields
    pub tx: ::protobuf::SingularPtrField<Tx>,
    pub tx_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ComputeTaxRequest {
    fn default() -> &'a ComputeTaxRequest {
        <ComputeTaxRequest as ::protobuf::Message>::default_instance()
    }
}

impl ComputeTaxRequest {
    pub fn new() -> ComputeTaxRequest {
        ::std::default::Default::default()
    }

    // .cosmos.tx.v1beta1.Tx tx = 1;


    pub fn get_tx(&self) -> &Tx {
        self.tx.as_ref().unwrap_or_else(|| <Tx as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    pub fn has_tx(&self) -> bool {
        self.tx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: Tx) {
        self.tx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut Tx {
        if self.tx.is_none() {
            self.tx.set_default();
        }
        self.tx.as_mut().unwrap()
    }

    // Take field
    pub fn take_tx(&mut self) -> Tx {
        self.tx.take().unwrap_or_else(|| Tx::new())
    }

    // bytes tx_bytes = 2;


    pub fn get_tx_bytes(&self) -> &[u8] {
        &self.tx_bytes
    }
    pub fn clear_tx_bytes(&mut self) {
        self.tx_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx_bytes
    }

    // Take field
    pub fn take_tx_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ComputeTaxRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.tx {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tx)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.tx_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tx_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tx.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.tx_bytes.is_empty() {
            os.write_bytes(2, &self.tx_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ComputeTaxRequest {
        ComputeTaxRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Tx>>(
                "tx",
                |m: &ComputeTaxRequest| { &m.tx },
                |m: &mut ComputeTaxRequest| { &mut m.tx },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_bytes",
                |m: &ComputeTaxRequest| { &m.tx_bytes },
                |m: &mut ComputeTaxRequest| { &mut m.tx_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ComputeTaxRequest>(
                "ComputeTaxRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ComputeTaxRequest {
        static instance: ::protobuf::rt::LazyV2<ComputeTaxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ComputeTaxRequest::new)
    }
}

impl ::protobuf::Clear for ComputeTaxRequest {
    fn clear(&mut self) {
        self.tx.clear();
        self.tx_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ComputeTaxRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComputeTaxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ComputeTaxResponse {
    // message fields
    pub tax_amount: ::protobuf::RepeatedField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ComputeTaxResponse {
    fn default() -> &'a ComputeTaxResponse {
        <ComputeTaxResponse as ::protobuf::Message>::default_instance()
    }
}

impl ComputeTaxResponse {
    pub fn new() -> ComputeTaxResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin tax_amount = 1;


    pub fn get_tax_amount(&self) -> &[super::coin::Coin] {
        &self.tax_amount
    }
    pub fn clear_tax_amount(&mut self) {
        self.tax_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_tax_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.tax_amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tax_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.tax_amount
    }

    // Take field
    pub fn take_tax_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.tax_amount, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ComputeTaxResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.tax_amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tax_amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tax_amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tax_amount {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ComputeTaxResponse {
        ComputeTaxResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::coin::Coin>>(
                "tax_amount",
                |m: &ComputeTaxResponse| { &m.tax_amount },
                |m: &mut ComputeTaxResponse| { &mut m.tax_amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ComputeTaxResponse>(
                "ComputeTaxResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ComputeTaxResponse {
        static instance: ::protobuf::rt::LazyV2<ComputeTaxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ComputeTaxResponse::new)
    }
}

impl ::protobuf::Clear for ComputeTaxResponse {
    fn clear(&mut self) {
        self.tax_amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ComputeTaxResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComputeTaxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eterra/tx/v1beta1/service.proto\x12\x10terra.tx.v1beta1\x1a\x14gogo\
    proto/gogo.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1ecosmos/base/\
    v1beta1/coin.proto\x1a\x1acosmos/tx/v1beta1/tx.proto\"Y\n\x11ComputeTaxR\
    equest\x12)\n\x02tx\x18\x01\x20\x01(\x0b2\x15.cosmos.tx.v1beta1.TxR\x02t\
    xB\x02\x18\x01\x12\x19\n\x08tx_bytes\x18\x02\x20\x01(\x0cR\x07txBytes\"\
    \x80\x01\n\x12ComputeTaxResponse\x12j\n\ntax_amount\x18\x01\x20\x03(\x0b\
    2\x19.cosmos.base.v1beta1.CoinR\ttaxAmountB0\xaa\xdf\x1f(github.com/cosm\
    os/cosmos-sdk/types.Coins\xc8\xde\x1f\02\x8d\x01\n\x07Service\x12\x81\
    \x01\n\nComputeTax\x12#.terra.tx.v1beta1.ComputeTaxRequest\x1a$.terra.tx\
    .v1beta1.ComputeTaxResponse\"(\x82\xd3\xe4\x93\x02\"\"\x1d/terra/tx/v1be\
    ta1/compute_tax:\x01*B0Z*github.com/terra-money/core/custom/auth/tx\xc0\
    \xe3\x1e\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
