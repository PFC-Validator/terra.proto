// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tendermint/p2p/conn.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct PacketPing {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacketPing {
    fn default() -> &'a PacketPing {
        <PacketPing as ::protobuf::Message>::default_instance()
    }
}

impl PacketPing {
    pub fn new() -> PacketPing {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PacketPing {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacketPing {
        PacketPing::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacketPing>(
                "PacketPing",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacketPing {
        static instance: ::protobuf::rt::LazyV2<PacketPing> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacketPing::new)
    }
}

impl ::protobuf::Clear for PacketPing {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacketPing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketPing {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PacketPong {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacketPong {
    fn default() -> &'a PacketPong {
        <PacketPong as ::protobuf::Message>::default_instance()
    }
}

impl PacketPong {
    pub fn new() -> PacketPong {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PacketPong {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacketPong {
        PacketPong::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacketPong>(
                "PacketPong",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacketPong {
        static instance: ::protobuf::rt::LazyV2<PacketPong> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacketPong::new)
    }
}

impl ::protobuf::Clear for PacketPong {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacketPong {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketPong {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PacketMsg {
    // message fields
    pub channel_id: i32,
    pub eof: bool,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PacketMsg {
    fn default() -> &'a PacketMsg {
        <PacketMsg as ::protobuf::Message>::default_instance()
    }
}

impl PacketMsg {
    pub fn new() -> PacketMsg {
        ::std::default::Default::default()
    }

    // int32 channel_id = 1;


    pub fn get_channel_id(&self) -> i32 {
        self.channel_id
    }
    pub fn clear_channel_id(&mut self) {
        self.channel_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_channel_id(&mut self, v: i32) {
        self.channel_id = v;
    }

    // bool eof = 2;


    pub fn get_eof(&self) -> bool {
        self.eof
    }
    pub fn clear_eof(&mut self) {
        self.eof = false;
    }

    // Param is passed by value, moved
    pub fn set_eof(&mut self, v: bool) {
        self.eof = v;
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PacketMsg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.channel_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.eof = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.channel_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.channel_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.eof != false {
            my_size += 2;
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.channel_id != 0 {
            os.write_int32(1, self.channel_id)?;
        }
        if self.eof != false {
            os.write_bool(2, self.eof)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PacketMsg {
        PacketMsg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "channel_id",
                |m: &PacketMsg| { &m.channel_id },
                |m: &mut PacketMsg| { &mut m.channel_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "eof",
                |m: &PacketMsg| { &m.eof },
                |m: &mut PacketMsg| { &mut m.eof },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &PacketMsg| { &m.data },
                |m: &mut PacketMsg| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PacketMsg>(
                "PacketMsg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PacketMsg {
        static instance: ::protobuf::rt::LazyV2<PacketMsg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PacketMsg::new)
    }
}

impl ::protobuf::Clear for PacketMsg {
    fn clear(&mut self) {
        self.channel_id = 0;
        self.eof = false;
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PacketMsg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PacketMsg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Packet {
    // message oneof groups
    pub sum: ::std::option::Option<Packet_oneof_sum>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Packet {
    fn default() -> &'a Packet {
        <Packet as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Packet_oneof_sum {
    packet_ping(PacketPing),
    packet_pong(PacketPong),
    packet_msg(PacketMsg),
}

impl Packet {
    pub fn new() -> Packet {
        ::std::default::Default::default()
    }

    // .tendermint.p2p.PacketPing packet_ping = 1;


    pub fn get_packet_ping(&self) -> &PacketPing {
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_ping(ref v)) => v,
            _ => <PacketPing as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_packet_ping(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_packet_ping(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_ping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_packet_ping(&mut self, v: PacketPing) {
        self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_ping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_packet_ping(&mut self) -> &mut PacketPing {
        if let ::std::option::Option::Some(Packet_oneof_sum::packet_ping(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_ping(PacketPing::new()));
        }
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_ping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_packet_ping(&mut self) -> PacketPing {
        if self.has_packet_ping() {
            match self.sum.take() {
                ::std::option::Option::Some(Packet_oneof_sum::packet_ping(v)) => v,
                _ => panic!(),
            }
        } else {
            PacketPing::new()
        }
    }

    // .tendermint.p2p.PacketPong packet_pong = 2;


    pub fn get_packet_pong(&self) -> &PacketPong {
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_pong(ref v)) => v,
            _ => <PacketPong as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_packet_pong(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_packet_pong(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_pong(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_packet_pong(&mut self, v: PacketPong) {
        self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_pong(v))
    }

    // Mutable pointer to the field.
    pub fn mut_packet_pong(&mut self) -> &mut PacketPong {
        if let ::std::option::Option::Some(Packet_oneof_sum::packet_pong(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_pong(PacketPong::new()));
        }
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_pong(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_packet_pong(&mut self) -> PacketPong {
        if self.has_packet_pong() {
            match self.sum.take() {
                ::std::option::Option::Some(Packet_oneof_sum::packet_pong(v)) => v,
                _ => panic!(),
            }
        } else {
            PacketPong::new()
        }
    }

    // .tendermint.p2p.PacketMsg packet_msg = 3;


    pub fn get_packet_msg(&self) -> &PacketMsg {
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_msg(ref v)) => v,
            _ => <PacketMsg as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_packet_msg(&mut self) {
        self.sum = ::std::option::Option::None;
    }

    pub fn has_packet_msg(&self) -> bool {
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_msg(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_packet_msg(&mut self, v: PacketMsg) {
        self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_msg(v))
    }

    // Mutable pointer to the field.
    pub fn mut_packet_msg(&mut self) -> &mut PacketMsg {
        if let ::std::option::Option::Some(Packet_oneof_sum::packet_msg(_)) = self.sum {
        } else {
            self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_msg(PacketMsg::new()));
        }
        match self.sum {
            ::std::option::Option::Some(Packet_oneof_sum::packet_msg(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_packet_msg(&mut self) -> PacketMsg {
        if self.has_packet_msg() {
            match self.sum.take() {
                ::std::option::Option::Some(Packet_oneof_sum::packet_msg(v)) => v,
                _ => panic!(),
            }
        } else {
            PacketMsg::new()
        }
    }
}

impl ::protobuf::Message for Packet {
    fn is_initialized(&self) -> bool {
        if let Some(Packet_oneof_sum::packet_ping(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Packet_oneof_sum::packet_pong(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Packet_oneof_sum::packet_msg(ref v)) = self.sum {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_ping(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_pong(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.sum = ::std::option::Option::Some(Packet_oneof_sum::packet_msg(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &Packet_oneof_sum::packet_ping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Packet_oneof_sum::packet_pong(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Packet_oneof_sum::packet_msg(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.sum {
            match v {
                &Packet_oneof_sum::packet_ping(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Packet_oneof_sum::packet_pong(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Packet_oneof_sum::packet_msg(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Packet {
        Packet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PacketPing>(
                "packet_ping",
                Packet::has_packet_ping,
                Packet::get_packet_ping,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PacketPong>(
                "packet_pong",
                Packet::has_packet_pong,
                Packet::get_packet_pong,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PacketMsg>(
                "packet_msg",
                Packet::has_packet_msg,
                Packet::get_packet_msg,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Packet>(
                "Packet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Packet {
        static instance: ::protobuf::rt::LazyV2<Packet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Packet::new)
    }
}

impl ::protobuf::Clear for Packet {
    fn clear(&mut self) {
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.sum = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Packet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Packet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthSigMessage {
    // message fields
    pub pub_key: ::protobuf::SingularPtrField<super::keys::PublicKey>,
    pub sig: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthSigMessage {
    fn default() -> &'a AuthSigMessage {
        <AuthSigMessage as ::protobuf::Message>::default_instance()
    }
}

impl AuthSigMessage {
    pub fn new() -> AuthSigMessage {
        ::std::default::Default::default()
    }

    // .tendermint.crypto.PublicKey pub_key = 1;


    pub fn get_pub_key(&self) -> &super::keys::PublicKey {
        self.pub_key.as_ref().unwrap_or_else(|| <super::keys::PublicKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: super::keys::PublicKey) {
        self.pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut super::keys::PublicKey {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> super::keys::PublicKey {
        self.pub_key.take().unwrap_or_else(|| super::keys::PublicKey::new())
    }

    // bytes sig = 2;


    pub fn get_sig(&self) -> &[u8] {
        &self.sig
    }
    pub fn clear_sig(&mut self) {
        self.sig.clear();
    }

    // Param is passed by value, moved
    pub fn set_sig(&mut self, v: ::std::vec::Vec<u8>) {
        self.sig = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sig(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sig
    }

    // Take field
    pub fn take_sig(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sig, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AuthSigMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pub_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sig)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.sig.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sig);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.sig.is_empty() {
            os.write_bytes(2, &self.sig)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthSigMessage {
        AuthSigMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::keys::PublicKey>>(
                "pub_key",
                |m: &AuthSigMessage| { &m.pub_key },
                |m: &mut AuthSigMessage| { &mut m.pub_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sig",
                |m: &AuthSigMessage| { &m.sig },
                |m: &mut AuthSigMessage| { &mut m.sig },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthSigMessage>(
                "AuthSigMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthSigMessage {
        static instance: ::protobuf::rt::LazyV2<AuthSigMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthSigMessage::new)
    }
}

impl ::protobuf::Clear for AuthSigMessage {
    fn clear(&mut self) {
        self.pub_key.clear();
        self.sig.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthSigMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthSigMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x19tendermint/p2p/conn.proto\x12\x0etendermint.p2p\x1a\x14gogoproto/g\
    ogo.proto\x1a\x1ctendermint/crypto/keys.proto\"\x0c\n\nPacketPing\"\x0c\
    \n\nPacketPong\"h\n\tPacketMsg\x12,\n\nchannel_id\x18\x01\x20\x01(\x05R\
    \tchannelIdB\r\xe2\xde\x1f\tChannelID\x12\x19\n\x03eof\x18\x02\x20\x01(\
    \x08R\x03eofB\x07\xe2\xde\x1f\x03EOF\x12\x12\n\x04data\x18\x03\x20\x01(\
    \x0cR\x04data\"\xc9\x01\n\x06Packet\x12=\n\x0bpacket_ping\x18\x01\x20\
    \x01(\x0b2\x1a.tendermint.p2p.PacketPingH\0R\npacketPing\x12=\n\x0bpacke\
    t_pong\x18\x02\x20\x01(\x0b2\x1a.tendermint.p2p.PacketPongH\0R\npacketPo\
    ng\x12:\n\npacket_msg\x18\x03\x20\x01(\x0b2\x19.tendermint.p2p.PacketMsg\
    H\0R\tpacketMsgB\x05\n\x03sum\"_\n\x0eAuthSigMessage\x12;\n\x07pub_key\
    \x18\x01\x20\x01(\x0b2\x1c.tendermint.crypto.PublicKeyR\x06pubKeyB\x04\
    \xc8\xde\x1f\0\x12\x10\n\x03sig\x18\x02\x20\x01(\x0cR\x03sigB7Z5github.c\
    om/tendermint/tendermint/proto/tendermint/p2pb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
