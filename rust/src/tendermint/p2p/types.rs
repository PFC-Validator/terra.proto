// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tendermint/p2p/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct NetAddress {
    // message fields
    pub id: ::std::string::String,
    pub ip: ::std::string::String,
    pub port: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NetAddress {
    fn default() -> &'a NetAddress {
        <NetAddress as ::protobuf::Message>::default_instance()
    }
}

impl NetAddress {
    pub fn new() -> NetAddress {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string ip = 2;


    pub fn get_ip(&self) -> &str {
        &self.ip
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip, ::std::string::String::new())
    }

    // uint32 port = 3;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }
}

impl ::protobuf::Message for NetAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ip);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.ip.is_empty() {
            os.write_string(2, &self.ip)?;
        }
        if self.port != 0 {
            os.write_uint32(3, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NetAddress {
        NetAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &NetAddress| { &m.id },
                |m: &mut NetAddress| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ip",
                |m: &NetAddress| { &m.ip },
                |m: &mut NetAddress| { &mut m.ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &NetAddress| { &m.port },
                |m: &mut NetAddress| { &mut m.port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NetAddress>(
                "NetAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NetAddress {
        static instance: ::protobuf::rt::LazyV2<NetAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NetAddress::new)
    }
}

impl ::protobuf::Clear for NetAddress {
    fn clear(&mut self) {
        self.id.clear();
        self.ip.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NetAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProtocolVersion {
    // message fields
    pub p2p: u64,
    pub block: u64,
    pub app: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProtocolVersion {
    fn default() -> &'a ProtocolVersion {
        <ProtocolVersion as ::protobuf::Message>::default_instance()
    }
}

impl ProtocolVersion {
    pub fn new() -> ProtocolVersion {
        ::std::default::Default::default()
    }

    // uint64 p2p = 1;


    pub fn get_p2p(&self) -> u64 {
        self.p2p
    }
    pub fn clear_p2p(&mut self) {
        self.p2p = 0;
    }

    // Param is passed by value, moved
    pub fn set_p2p(&mut self, v: u64) {
        self.p2p = v;
    }

    // uint64 block = 2;


    pub fn get_block(&self) -> u64 {
        self.block
    }
    pub fn clear_block(&mut self) {
        self.block = 0;
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: u64) {
        self.block = v;
    }

    // uint64 app = 3;


    pub fn get_app(&self) -> u64 {
        self.app
    }
    pub fn clear_app(&mut self) {
        self.app = 0;
    }

    // Param is passed by value, moved
    pub fn set_app(&mut self, v: u64) {
        self.app = v;
    }
}

impl ::protobuf::Message for ProtocolVersion {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.p2p = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.app = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.p2p != 0 {
            my_size += ::protobuf::rt::value_size(1, self.p2p, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.app != 0 {
            my_size += ::protobuf::rt::value_size(3, self.app, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.p2p != 0 {
            os.write_uint64(1, self.p2p)?;
        }
        if self.block != 0 {
            os.write_uint64(2, self.block)?;
        }
        if self.app != 0 {
            os.write_uint64(3, self.app)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProtocolVersion {
        ProtocolVersion::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "p2p",
                |m: &ProtocolVersion| { &m.p2p },
                |m: &mut ProtocolVersion| { &mut m.p2p },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "block",
                |m: &ProtocolVersion| { &m.block },
                |m: &mut ProtocolVersion| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "app",
                |m: &ProtocolVersion| { &m.app },
                |m: &mut ProtocolVersion| { &mut m.app },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProtocolVersion>(
                "ProtocolVersion",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProtocolVersion {
        static instance: ::protobuf::rt::LazyV2<ProtocolVersion> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProtocolVersion::new)
    }
}

impl ::protobuf::Clear for ProtocolVersion {
    fn clear(&mut self) {
        self.p2p = 0;
        self.block = 0;
        self.app = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProtocolVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DefaultNodeInfo {
    // message fields
    pub protocol_version: ::protobuf::SingularPtrField<ProtocolVersion>,
    pub default_node_id: ::std::string::String,
    pub listen_addr: ::std::string::String,
    pub network: ::std::string::String,
    pub version: ::std::string::String,
    pub channels: ::std::vec::Vec<u8>,
    pub moniker: ::std::string::String,
    pub other: ::protobuf::SingularPtrField<DefaultNodeInfoOther>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DefaultNodeInfo {
    fn default() -> &'a DefaultNodeInfo {
        <DefaultNodeInfo as ::protobuf::Message>::default_instance()
    }
}

impl DefaultNodeInfo {
    pub fn new() -> DefaultNodeInfo {
        ::std::default::Default::default()
    }

    // .tendermint.p2p.ProtocolVersion protocol_version = 1;


    pub fn get_protocol_version(&self) -> &ProtocolVersion {
        self.protocol_version.as_ref().unwrap_or_else(|| <ProtocolVersion as ::protobuf::Message>::default_instance())
    }
    pub fn clear_protocol_version(&mut self) {
        self.protocol_version.clear();
    }

    pub fn has_protocol_version(&self) -> bool {
        self.protocol_version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: ProtocolVersion) {
        self.protocol_version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol_version(&mut self) -> &mut ProtocolVersion {
        if self.protocol_version.is_none() {
            self.protocol_version.set_default();
        }
        self.protocol_version.as_mut().unwrap()
    }

    // Take field
    pub fn take_protocol_version(&mut self) -> ProtocolVersion {
        self.protocol_version.take().unwrap_or_else(|| ProtocolVersion::new())
    }

    // string default_node_id = 2;


    pub fn get_default_node_id(&self) -> &str {
        &self.default_node_id
    }
    pub fn clear_default_node_id(&mut self) {
        self.default_node_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_default_node_id(&mut self, v: ::std::string::String) {
        self.default_node_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_node_id(&mut self) -> &mut ::std::string::String {
        &mut self.default_node_id
    }

    // Take field
    pub fn take_default_node_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.default_node_id, ::std::string::String::new())
    }

    // string listen_addr = 3;


    pub fn get_listen_addr(&self) -> &str {
        &self.listen_addr
    }
    pub fn clear_listen_addr(&mut self) {
        self.listen_addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_listen_addr(&mut self, v: ::std::string::String) {
        self.listen_addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listen_addr(&mut self) -> &mut ::std::string::String {
        &mut self.listen_addr
    }

    // Take field
    pub fn take_listen_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.listen_addr, ::std::string::String::new())
    }

    // string network = 4;


    pub fn get_network(&self) -> &str {
        &self.network
    }
    pub fn clear_network(&mut self) {
        self.network.clear();
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: ::std::string::String) {
        self.network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network(&mut self) -> &mut ::std::string::String {
        &mut self.network
    }

    // Take field
    pub fn take_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network, ::std::string::String::new())
    }

    // string version = 5;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // bytes channels = 6;


    pub fn get_channels(&self) -> &[u8] {
        &self.channels
    }
    pub fn clear_channels(&mut self) {
        self.channels.clear();
    }

    // Param is passed by value, moved
    pub fn set_channels(&mut self, v: ::std::vec::Vec<u8>) {
        self.channels = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channels(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.channels
    }

    // Take field
    pub fn take_channels(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.channels, ::std::vec::Vec::new())
    }

    // string moniker = 7;


    pub fn get_moniker(&self) -> &str {
        &self.moniker
    }
    pub fn clear_moniker(&mut self) {
        self.moniker.clear();
    }

    // Param is passed by value, moved
    pub fn set_moniker(&mut self, v: ::std::string::String) {
        self.moniker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_moniker(&mut self) -> &mut ::std::string::String {
        &mut self.moniker
    }

    // Take field
    pub fn take_moniker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.moniker, ::std::string::String::new())
    }

    // .tendermint.p2p.DefaultNodeInfoOther other = 8;


    pub fn get_other(&self) -> &DefaultNodeInfoOther {
        self.other.as_ref().unwrap_or_else(|| <DefaultNodeInfoOther as ::protobuf::Message>::default_instance())
    }
    pub fn clear_other(&mut self) {
        self.other.clear();
    }

    pub fn has_other(&self) -> bool {
        self.other.is_some()
    }

    // Param is passed by value, moved
    pub fn set_other(&mut self, v: DefaultNodeInfoOther) {
        self.other = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_other(&mut self) -> &mut DefaultNodeInfoOther {
        if self.other.is_none() {
            self.other.set_default();
        }
        self.other.as_mut().unwrap()
    }

    // Take field
    pub fn take_other(&mut self) -> DefaultNodeInfoOther {
        self.other.take().unwrap_or_else(|| DefaultNodeInfoOther::new())
    }
}

impl ::protobuf::Message for DefaultNodeInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.protocol_version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.other {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.protocol_version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.default_node_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.listen_addr)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.channels)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.moniker)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.other)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.protocol_version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.default_node_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.default_node_id);
        }
        if !self.listen_addr.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.listen_addr);
        }
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.network);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.version);
        }
        if !self.channels.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.channels);
        }
        if !self.moniker.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.moniker);
        }
        if let Some(ref v) = self.other.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.protocol_version.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.default_node_id.is_empty() {
            os.write_string(2, &self.default_node_id)?;
        }
        if !self.listen_addr.is_empty() {
            os.write_string(3, &self.listen_addr)?;
        }
        if !self.network.is_empty() {
            os.write_string(4, &self.network)?;
        }
        if !self.version.is_empty() {
            os.write_string(5, &self.version)?;
        }
        if !self.channels.is_empty() {
            os.write_bytes(6, &self.channels)?;
        }
        if !self.moniker.is_empty() {
            os.write_string(7, &self.moniker)?;
        }
        if let Some(ref v) = self.other.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DefaultNodeInfo {
        DefaultNodeInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProtocolVersion>>(
                "protocol_version",
                |m: &DefaultNodeInfo| { &m.protocol_version },
                |m: &mut DefaultNodeInfo| { &mut m.protocol_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "default_node_id",
                |m: &DefaultNodeInfo| { &m.default_node_id },
                |m: &mut DefaultNodeInfo| { &mut m.default_node_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "listen_addr",
                |m: &DefaultNodeInfo| { &m.listen_addr },
                |m: &mut DefaultNodeInfo| { &mut m.listen_addr },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "network",
                |m: &DefaultNodeInfo| { &m.network },
                |m: &mut DefaultNodeInfo| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &DefaultNodeInfo| { &m.version },
                |m: &mut DefaultNodeInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "channels",
                |m: &DefaultNodeInfo| { &m.channels },
                |m: &mut DefaultNodeInfo| { &mut m.channels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "moniker",
                |m: &DefaultNodeInfo| { &m.moniker },
                |m: &mut DefaultNodeInfo| { &mut m.moniker },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DefaultNodeInfoOther>>(
                "other",
                |m: &DefaultNodeInfo| { &m.other },
                |m: &mut DefaultNodeInfo| { &mut m.other },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DefaultNodeInfo>(
                "DefaultNodeInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DefaultNodeInfo {
        static instance: ::protobuf::rt::LazyV2<DefaultNodeInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DefaultNodeInfo::new)
    }
}

impl ::protobuf::Clear for DefaultNodeInfo {
    fn clear(&mut self) {
        self.protocol_version.clear();
        self.default_node_id.clear();
        self.listen_addr.clear();
        self.network.clear();
        self.version.clear();
        self.channels.clear();
        self.moniker.clear();
        self.other.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DefaultNodeInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DefaultNodeInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DefaultNodeInfoOther {
    // message fields
    pub tx_index: ::std::string::String,
    pub rpc_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DefaultNodeInfoOther {
    fn default() -> &'a DefaultNodeInfoOther {
        <DefaultNodeInfoOther as ::protobuf::Message>::default_instance()
    }
}

impl DefaultNodeInfoOther {
    pub fn new() -> DefaultNodeInfoOther {
        ::std::default::Default::default()
    }

    // string tx_index = 1;


    pub fn get_tx_index(&self) -> &str {
        &self.tx_index
    }
    pub fn clear_tx_index(&mut self) {
        self.tx_index.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_index(&mut self, v: ::std::string::String) {
        self.tx_index = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_index(&mut self) -> &mut ::std::string::String {
        &mut self.tx_index
    }

    // Take field
    pub fn take_tx_index(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tx_index, ::std::string::String::new())
    }

    // string rpc_address = 2;


    pub fn get_rpc_address(&self) -> &str {
        &self.rpc_address
    }
    pub fn clear_rpc_address(&mut self) {
        self.rpc_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_rpc_address(&mut self, v: ::std::string::String) {
        self.rpc_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rpc_address(&mut self) -> &mut ::std::string::String {
        &mut self.rpc_address
    }

    // Take field
    pub fn take_rpc_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rpc_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DefaultNodeInfoOther {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tx_index)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rpc_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tx_index.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tx_index);
        }
        if !self.rpc_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rpc_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tx_index.is_empty() {
            os.write_string(1, &self.tx_index)?;
        }
        if !self.rpc_address.is_empty() {
            os.write_string(2, &self.rpc_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DefaultNodeInfoOther {
        DefaultNodeInfoOther::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tx_index",
                |m: &DefaultNodeInfoOther| { &m.tx_index },
                |m: &mut DefaultNodeInfoOther| { &mut m.tx_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rpc_address",
                |m: &DefaultNodeInfoOther| { &m.rpc_address },
                |m: &mut DefaultNodeInfoOther| { &mut m.rpc_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DefaultNodeInfoOther>(
                "DefaultNodeInfoOther",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DefaultNodeInfoOther {
        static instance: ::protobuf::rt::LazyV2<DefaultNodeInfoOther> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DefaultNodeInfoOther::new)
    }
}

impl ::protobuf::Clear for DefaultNodeInfoOther {
    fn clear(&mut self) {
        self.tx_index.clear();
        self.rpc_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DefaultNodeInfoOther {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DefaultNodeInfoOther {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1atendermint/p2p/types.proto\x12\x0etendermint.p2p\x1a\x14gogoproto/\
    gogo.proto\"P\n\nNetAddress\x12\x16\n\x02id\x18\x01\x20\x01(\tR\x02idB\
    \x06\xe2\xde\x1f\x02ID\x12\x16\n\x02ip\x18\x02\x20\x01(\tR\x02ipB\x06\
    \xe2\xde\x1f\x02IP\x12\x12\n\x04port\x18\x03\x20\x01(\rR\x04port\"T\n\
    \x0fProtocolVersion\x12\x19\n\x03p2p\x18\x01\x20\x01(\x04R\x03p2pB\x07\
    \xe2\xde\x1f\x03P2P\x12\x14\n\x05block\x18\x02\x20\x01(\x04R\x05block\
    \x12\x10\n\x03app\x18\x03\x20\x01(\x04R\x03app\"\xeb\x02\n\x0fDefaultNod\
    eInfo\x12P\n\x10protocol_version\x18\x01\x20\x01(\x0b2\x1f.tendermint.p2\
    p.ProtocolVersionR\x0fprotocolVersionB\x04\xc8\xde\x1f\0\x129\n\x0fdefau\
    lt_node_id\x18\x02\x20\x01(\tR\rdefaultNodeIdB\x11\xe2\xde\x1f\rDefaultN\
    odeID\x12\x1f\n\x0blisten_addr\x18\x03\x20\x01(\tR\nlistenAddr\x12\x18\n\
    \x07network\x18\x04\x20\x01(\tR\x07network\x12\x18\n\x07version\x18\x05\
    \x20\x01(\tR\x07version\x12\x1a\n\x08channels\x18\x06\x20\x01(\x0cR\x08c\
    hannels\x12\x18\n\x07moniker\x18\x07\x20\x01(\tR\x07moniker\x12@\n\x05ot\
    her\x18\x08\x20\x01(\x0b2$.tendermint.p2p.DefaultNodeInfoOtherR\x05other\
    B\x04\xc8\xde\x1f\0\"b\n\x14DefaultNodeInfoOther\x12\x19\n\x08tx_index\
    \x18\x01\x20\x01(\tR\x07txIndex\x12/\n\x0brpc_address\x18\x02\x20\x01(\t\
    R\nrpcAddressB\x0e\xe2\xde\x1f\nRPCAddressB7Z5github.com/tendermint/tend\
    ermint/proto/tendermint/p2pb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
