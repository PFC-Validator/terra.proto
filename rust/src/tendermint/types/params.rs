// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tendermint/types/params.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct ConsensusParams {
    // message fields
    pub block: ::protobuf::SingularPtrField<BlockParams>,
    pub evidence: ::protobuf::SingularPtrField<EvidenceParams>,
    pub validator: ::protobuf::SingularPtrField<ValidatorParams>,
    pub version: ::protobuf::SingularPtrField<VersionParams>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsensusParams {
    fn default() -> &'a ConsensusParams {
        <ConsensusParams as ::protobuf::Message>::default_instance()
    }
}

impl ConsensusParams {
    pub fn new() -> ConsensusParams {
        ::std::default::Default::default()
    }

    // .tendermint.types.BlockParams block = 1;


    pub fn get_block(&self) -> &BlockParams {
        self.block.as_ref().unwrap_or_else(|| <BlockParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: BlockParams) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut BlockParams {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> BlockParams {
        self.block.take().unwrap_or_else(|| BlockParams::new())
    }

    // .tendermint.types.EvidenceParams evidence = 2;


    pub fn get_evidence(&self) -> &EvidenceParams {
        self.evidence.as_ref().unwrap_or_else(|| <EvidenceParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_evidence(&mut self) {
        self.evidence.clear();
    }

    pub fn has_evidence(&self) -> bool {
        self.evidence.is_some()
    }

    // Param is passed by value, moved
    pub fn set_evidence(&mut self, v: EvidenceParams) {
        self.evidence = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_evidence(&mut self) -> &mut EvidenceParams {
        if self.evidence.is_none() {
            self.evidence.set_default();
        }
        self.evidence.as_mut().unwrap()
    }

    // Take field
    pub fn take_evidence(&mut self) -> EvidenceParams {
        self.evidence.take().unwrap_or_else(|| EvidenceParams::new())
    }

    // .tendermint.types.ValidatorParams validator = 3;


    pub fn get_validator(&self) -> &ValidatorParams {
        self.validator.as_ref().unwrap_or_else(|| <ValidatorParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_validator(&mut self) {
        self.validator.clear();
    }

    pub fn has_validator(&self) -> bool {
        self.validator.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validator(&mut self, v: ValidatorParams) {
        self.validator = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator(&mut self) -> &mut ValidatorParams {
        if self.validator.is_none() {
            self.validator.set_default();
        }
        self.validator.as_mut().unwrap()
    }

    // Take field
    pub fn take_validator(&mut self) -> ValidatorParams {
        self.validator.take().unwrap_or_else(|| ValidatorParams::new())
    }

    // .tendermint.types.VersionParams version = 4;


    pub fn get_version(&self) -> &VersionParams {
        self.version.as_ref().unwrap_or_else(|| <VersionParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: VersionParams) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut VersionParams {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> VersionParams {
        self.version.take().unwrap_or_else(|| VersionParams::new())
    }
}

impl ::protobuf::Message for ConsensusParams {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.evidence {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validator {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.evidence)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validator)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.evidence.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.validator.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.evidence.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.validator.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsensusParams {
        ConsensusParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockParams>>(
                "block",
                |m: &ConsensusParams| { &m.block },
                |m: &mut ConsensusParams| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EvidenceParams>>(
                "evidence",
                |m: &ConsensusParams| { &m.evidence },
                |m: &mut ConsensusParams| { &mut m.evidence },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidatorParams>>(
                "validator",
                |m: &ConsensusParams| { &m.validator },
                |m: &mut ConsensusParams| { &mut m.validator },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VersionParams>>(
                "version",
                |m: &ConsensusParams| { &m.version },
                |m: &mut ConsensusParams| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsensusParams>(
                "ConsensusParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsensusParams {
        static instance: ::protobuf::rt::LazyV2<ConsensusParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsensusParams::new)
    }
}

impl ::protobuf::Clear for ConsensusParams {
    fn clear(&mut self) {
        self.block.clear();
        self.evidence.clear();
        self.validator.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsensusParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsensusParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockParams {
    // message fields
    pub max_bytes: i64,
    pub max_gas: i64,
    pub time_iota_ms: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockParams {
    fn default() -> &'a BlockParams {
        <BlockParams as ::protobuf::Message>::default_instance()
    }
}

impl BlockParams {
    pub fn new() -> BlockParams {
        ::std::default::Default::default()
    }

    // int64 max_bytes = 1;


    pub fn get_max_bytes(&self) -> i64 {
        self.max_bytes
    }
    pub fn clear_max_bytes(&mut self) {
        self.max_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_bytes(&mut self, v: i64) {
        self.max_bytes = v;
    }

    // int64 max_gas = 2;


    pub fn get_max_gas(&self) -> i64 {
        self.max_gas
    }
    pub fn clear_max_gas(&mut self) {
        self.max_gas = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_gas(&mut self, v: i64) {
        self.max_gas = v;
    }

    // int64 time_iota_ms = 3;


    pub fn get_time_iota_ms(&self) -> i64 {
        self.time_iota_ms
    }
    pub fn clear_time_iota_ms(&mut self) {
        self.time_iota_ms = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_iota_ms(&mut self, v: i64) {
        self.time_iota_ms = v;
    }
}

impl ::protobuf::Message for BlockParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_bytes = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_gas = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.time_iota_ms = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.max_bytes != 0 {
            my_size += ::protobuf::rt::value_size(1, self.max_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_gas != 0 {
            my_size += ::protobuf::rt::value_size(2, self.max_gas, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time_iota_ms != 0 {
            my_size += ::protobuf::rt::value_size(3, self.time_iota_ms, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.max_bytes != 0 {
            os.write_int64(1, self.max_bytes)?;
        }
        if self.max_gas != 0 {
            os.write_int64(2, self.max_gas)?;
        }
        if self.time_iota_ms != 0 {
            os.write_int64(3, self.time_iota_ms)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockParams {
        BlockParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "max_bytes",
                |m: &BlockParams| { &m.max_bytes },
                |m: &mut BlockParams| { &mut m.max_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "max_gas",
                |m: &BlockParams| { &m.max_gas },
                |m: &mut BlockParams| { &mut m.max_gas },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "time_iota_ms",
                |m: &BlockParams| { &m.time_iota_ms },
                |m: &mut BlockParams| { &mut m.time_iota_ms },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockParams>(
                "BlockParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockParams {
        static instance: ::protobuf::rt::LazyV2<BlockParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockParams::new)
    }
}

impl ::protobuf::Clear for BlockParams {
    fn clear(&mut self) {
        self.max_bytes = 0;
        self.max_gas = 0;
        self.time_iota_ms = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EvidenceParams {
    // message fields
    pub max_age_num_blocks: i64,
    pub max_age_duration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub max_bytes: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EvidenceParams {
    fn default() -> &'a EvidenceParams {
        <EvidenceParams as ::protobuf::Message>::default_instance()
    }
}

impl EvidenceParams {
    pub fn new() -> EvidenceParams {
        ::std::default::Default::default()
    }

    // int64 max_age_num_blocks = 1;


    pub fn get_max_age_num_blocks(&self) -> i64 {
        self.max_age_num_blocks
    }
    pub fn clear_max_age_num_blocks(&mut self) {
        self.max_age_num_blocks = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_age_num_blocks(&mut self, v: i64) {
        self.max_age_num_blocks = v;
    }

    // .google.protobuf.Duration max_age_duration = 2;


    pub fn get_max_age_duration(&self) -> &::protobuf::well_known_types::Duration {
        self.max_age_duration.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_age_duration(&mut self) {
        self.max_age_duration.clear();
    }

    pub fn has_max_age_duration(&self) -> bool {
        self.max_age_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_age_duration(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.max_age_duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_age_duration(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.max_age_duration.is_none() {
            self.max_age_duration.set_default();
        }
        self.max_age_duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_age_duration(&mut self) -> ::protobuf::well_known_types::Duration {
        self.max_age_duration.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // int64 max_bytes = 3;


    pub fn get_max_bytes(&self) -> i64 {
        self.max_bytes
    }
    pub fn clear_max_bytes(&mut self) {
        self.max_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_bytes(&mut self, v: i64) {
        self.max_bytes = v;
    }
}

impl ::protobuf::Message for EvidenceParams {
    fn is_initialized(&self) -> bool {
        for v in &self.max_age_duration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_age_num_blocks = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_age_duration)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.max_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.max_age_num_blocks != 0 {
            my_size += ::protobuf::rt::value_size(1, self.max_age_num_blocks, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.max_age_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.max_bytes != 0 {
            my_size += ::protobuf::rt::value_size(3, self.max_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.max_age_num_blocks != 0 {
            os.write_int64(1, self.max_age_num_blocks)?;
        }
        if let Some(ref v) = self.max_age_duration.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.max_bytes != 0 {
            os.write_int64(3, self.max_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EvidenceParams {
        EvidenceParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "max_age_num_blocks",
                |m: &EvidenceParams| { &m.max_age_num_blocks },
                |m: &mut EvidenceParams| { &mut m.max_age_num_blocks },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "max_age_duration",
                |m: &EvidenceParams| { &m.max_age_duration },
                |m: &mut EvidenceParams| { &mut m.max_age_duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "max_bytes",
                |m: &EvidenceParams| { &m.max_bytes },
                |m: &mut EvidenceParams| { &mut m.max_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EvidenceParams>(
                "EvidenceParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EvidenceParams {
        static instance: ::protobuf::rt::LazyV2<EvidenceParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EvidenceParams::new)
    }
}

impl ::protobuf::Clear for EvidenceParams {
    fn clear(&mut self) {
        self.max_age_num_blocks = 0;
        self.max_age_duration.clear();
        self.max_bytes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EvidenceParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvidenceParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ValidatorParams {
    // message fields
    pub pub_key_types: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidatorParams {
    fn default() -> &'a ValidatorParams {
        <ValidatorParams as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorParams {
    pub fn new() -> ValidatorParams {
        ::std::default::Default::default()
    }

    // repeated string pub_key_types = 1;


    pub fn get_pub_key_types(&self) -> &[::std::string::String] {
        &self.pub_key_types
    }
    pub fn clear_pub_key_types(&mut self) {
        self.pub_key_types.clear();
    }

    // Param is passed by value, moved
    pub fn set_pub_key_types(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.pub_key_types = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pub_key_types(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.pub_key_types
    }

    // Take field
    pub fn take_pub_key_types(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.pub_key_types, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ValidatorParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.pub_key_types)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.pub_key_types {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.pub_key_types {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidatorParams {
        ValidatorParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pub_key_types",
                |m: &ValidatorParams| { &m.pub_key_types },
                |m: &mut ValidatorParams| { &mut m.pub_key_types },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidatorParams>(
                "ValidatorParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidatorParams {
        static instance: ::protobuf::rt::LazyV2<ValidatorParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidatorParams::new)
    }
}

impl ::protobuf::Clear for ValidatorParams {
    fn clear(&mut self) {
        self.pub_key_types.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidatorParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VersionParams {
    // message fields
    pub app_version: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VersionParams {
    fn default() -> &'a VersionParams {
        <VersionParams as ::protobuf::Message>::default_instance()
    }
}

impl VersionParams {
    pub fn new() -> VersionParams {
        ::std::default::Default::default()
    }

    // uint64 app_version = 1;


    pub fn get_app_version(&self) -> u64 {
        self.app_version
    }
    pub fn clear_app_version(&mut self) {
        self.app_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_app_version(&mut self, v: u64) {
        self.app_version = v;
    }
}

impl ::protobuf::Message for VersionParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.app_version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.app_version != 0 {
            my_size += ::protobuf::rt::value_size(1, self.app_version, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.app_version != 0 {
            os.write_uint64(1, self.app_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VersionParams {
        VersionParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "app_version",
                |m: &VersionParams| { &m.app_version },
                |m: &mut VersionParams| { &mut m.app_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VersionParams>(
                "VersionParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VersionParams {
        static instance: ::protobuf::rt::LazyV2<VersionParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VersionParams::new)
    }
}

impl ::protobuf::Clear for VersionParams {
    fn clear(&mut self) {
        self.app_version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VersionParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VersionParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HashedParams {
    // message fields
    pub block_max_bytes: i64,
    pub block_max_gas: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HashedParams {
    fn default() -> &'a HashedParams {
        <HashedParams as ::protobuf::Message>::default_instance()
    }
}

impl HashedParams {
    pub fn new() -> HashedParams {
        ::std::default::Default::default()
    }

    // int64 block_max_bytes = 1;


    pub fn get_block_max_bytes(&self) -> i64 {
        self.block_max_bytes
    }
    pub fn clear_block_max_bytes(&mut self) {
        self.block_max_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_max_bytes(&mut self, v: i64) {
        self.block_max_bytes = v;
    }

    // int64 block_max_gas = 2;


    pub fn get_block_max_gas(&self) -> i64 {
        self.block_max_gas
    }
    pub fn clear_block_max_gas(&mut self) {
        self.block_max_gas = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_max_gas(&mut self, v: i64) {
        self.block_max_gas = v;
    }
}

impl ::protobuf::Message for HashedParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.block_max_bytes = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.block_max_gas = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.block_max_bytes != 0 {
            my_size += ::protobuf::rt::value_size(1, self.block_max_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_max_gas != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block_max_gas, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.block_max_bytes != 0 {
            os.write_int64(1, self.block_max_bytes)?;
        }
        if self.block_max_gas != 0 {
            os.write_int64(2, self.block_max_gas)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HashedParams {
        HashedParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "block_max_bytes",
                |m: &HashedParams| { &m.block_max_bytes },
                |m: &mut HashedParams| { &mut m.block_max_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "block_max_gas",
                |m: &HashedParams| { &m.block_max_gas },
                |m: &mut HashedParams| { &mut m.block_max_gas },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HashedParams>(
                "HashedParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HashedParams {
        static instance: ::protobuf::rt::LazyV2<HashedParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HashedParams::new)
    }
}

impl ::protobuf::Clear for HashedParams {
    fn clear(&mut self) {
        self.block_max_bytes = 0;
        self.block_max_gas = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HashedParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HashedParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dtendermint/types/params.proto\x12\x10tendermint.types\x1a\x14gogop\
    roto/gogo.proto\x1a\x1egoogle/protobuf/duration.proto\"\x98\x02\n\x0fCon\
    sensusParams\x129\n\x05block\x18\x01\x20\x01(\x0b2\x1d.tendermint.types.\
    BlockParamsR\x05blockB\x04\xc8\xde\x1f\0\x12B\n\x08evidence\x18\x02\x20\
    \x01(\x0b2\x20.tendermint.types.EvidenceParamsR\x08evidenceB\x04\xc8\xde\
    \x1f\0\x12E\n\tvalidator\x18\x03\x20\x01(\x0b2!.tendermint.types.Validat\
    orParamsR\tvalidatorB\x04\xc8\xde\x1f\0\x12?\n\x07version\x18\x04\x20\
    \x01(\x0b2\x1f.tendermint.types.VersionParamsR\x07versionB\x04\xc8\xde\
    \x1f\0\"e\n\x0bBlockParams\x12\x1b\n\tmax_bytes\x18\x01\x20\x01(\x03R\
    \x08maxBytes\x12\x17\n\x07max_gas\x18\x02\x20\x01(\x03R\x06maxGas\x12\
    \x20\n\x0ctime_iota_ms\x18\x03\x20\x01(\x03R\ntimeIotaMs\"\xa9\x01\n\x0e\
    EvidenceParams\x12+\n\x12max_age_num_blocks\x18\x01\x20\x01(\x03R\x0fmax\
    AgeNumBlocks\x12M\n\x10max_age_duration\x18\x02\x20\x01(\x0b2\x19.google\
    .protobuf.DurationR\x0emaxAgeDurationB\x08\xc8\xde\x1f\0\x98\xdf\x1f\x01\
    \x12\x1b\n\tmax_bytes\x18\x03\x20\x01(\x03R\x08maxBytes\"?\n\x0fValidato\
    rParams\x12\"\n\rpub_key_types\x18\x01\x20\x03(\tR\x0bpubKeyTypes:\x08\
    \xe8\xa0\x1f\x01\xb8\xa0\x1f\x01\":\n\rVersionParams\x12\x1f\n\x0bapp_ve\
    rsion\x18\x01\x20\x01(\x04R\nappVersion:\x08\xe8\xa0\x1f\x01\xb8\xa0\x1f\
    \x01\"Z\n\x0cHashedParams\x12&\n\x0fblock_max_bytes\x18\x01\x20\x01(\x03\
    R\rblockMaxBytes\x12\"\n\rblock_max_gas\x18\x02\x20\x01(\x03R\x0bblockMa\
    xGasB=Z7github.com/tendermint/tendermint/proto/tendermint/types\xa8\xe2\
    \x1e\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
