// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tendermint/types/canonical.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct CanonicalBlockID {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    pub part_set_header: ::protobuf::SingularPtrField<CanonicalPartSetHeader>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CanonicalBlockID {
    fn default() -> &'a CanonicalBlockID {
        <CanonicalBlockID as ::protobuf::Message>::default_instance()
    }
}

impl CanonicalBlockID {
    pub fn new() -> CanonicalBlockID {
        ::std::default::Default::default()
    }

    // bytes hash = 1;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // .tendermint.types.CanonicalPartSetHeader part_set_header = 2;


    pub fn get_part_set_header(&self) -> &CanonicalPartSetHeader {
        self.part_set_header.as_ref().unwrap_or_else(|| <CanonicalPartSetHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_part_set_header(&mut self) {
        self.part_set_header.clear();
    }

    pub fn has_part_set_header(&self) -> bool {
        self.part_set_header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_part_set_header(&mut self, v: CanonicalPartSetHeader) {
        self.part_set_header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_part_set_header(&mut self) -> &mut CanonicalPartSetHeader {
        if self.part_set_header.is_none() {
            self.part_set_header.set_default();
        }
        self.part_set_header.as_mut().unwrap()
    }

    // Take field
    pub fn take_part_set_header(&mut self) -> CanonicalPartSetHeader {
        self.part_set_header.take().unwrap_or_else(|| CanonicalPartSetHeader::new())
    }
}

impl ::protobuf::Message for CanonicalBlockID {
    fn is_initialized(&self) -> bool {
        for v in &self.part_set_header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.part_set_header)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if let Some(ref v) = self.part_set_header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if let Some(ref v) = self.part_set_header.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CanonicalBlockID {
        CanonicalBlockID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &CanonicalBlockID| { &m.hash },
                |m: &mut CanonicalBlockID| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CanonicalPartSetHeader>>(
                "part_set_header",
                |m: &CanonicalBlockID| { &m.part_set_header },
                |m: &mut CanonicalBlockID| { &mut m.part_set_header },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CanonicalBlockID>(
                "CanonicalBlockID",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CanonicalBlockID {
        static instance: ::protobuf::rt::LazyV2<CanonicalBlockID> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CanonicalBlockID::new)
    }
}

impl ::protobuf::Clear for CanonicalBlockID {
    fn clear(&mut self) {
        self.hash.clear();
        self.part_set_header.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CanonicalBlockID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CanonicalBlockID {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CanonicalPartSetHeader {
    // message fields
    pub total: u32,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CanonicalPartSetHeader {
    fn default() -> &'a CanonicalPartSetHeader {
        <CanonicalPartSetHeader as ::protobuf::Message>::default_instance()
    }
}

impl CanonicalPartSetHeader {
    pub fn new() -> CanonicalPartSetHeader {
        ::std::default::Default::default()
    }

    // uint32 total = 1;


    pub fn get_total(&self) -> u32 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: u32) {
        self.total = v;
    }

    // bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CanonicalPartSetHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.total = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_uint32(1, self.total)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CanonicalPartSetHeader {
        CanonicalPartSetHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "total",
                |m: &CanonicalPartSetHeader| { &m.total },
                |m: &mut CanonicalPartSetHeader| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &CanonicalPartSetHeader| { &m.hash },
                |m: &mut CanonicalPartSetHeader| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CanonicalPartSetHeader>(
                "CanonicalPartSetHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CanonicalPartSetHeader {
        static instance: ::protobuf::rt::LazyV2<CanonicalPartSetHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CanonicalPartSetHeader::new)
    }
}

impl ::protobuf::Clear for CanonicalPartSetHeader {
    fn clear(&mut self) {
        self.total = 0;
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CanonicalPartSetHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CanonicalPartSetHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CanonicalProposal {
    // message fields
    pub field_type: super::types::SignedMsgType,
    pub height: i64,
    pub round: i64,
    pub pol_round: i64,
    pub block_id: ::protobuf::SingularPtrField<CanonicalBlockID>,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub chain_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CanonicalProposal {
    fn default() -> &'a CanonicalProposal {
        <CanonicalProposal as ::protobuf::Message>::default_instance()
    }
}

impl CanonicalProposal {
    pub fn new() -> CanonicalProposal {
        ::std::default::Default::default()
    }

    // .tendermint.types.SignedMsgType type = 1;


    pub fn get_field_type(&self) -> super::types::SignedMsgType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: super::types::SignedMsgType) {
        self.field_type = v;
    }

    // sfixed64 height = 2;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // sfixed64 round = 3;


    pub fn get_round(&self) -> i64 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: i64) {
        self.round = v;
    }

    // int64 pol_round = 4;


    pub fn get_pol_round(&self) -> i64 {
        self.pol_round
    }
    pub fn clear_pol_round(&mut self) {
        self.pol_round = 0;
    }

    // Param is passed by value, moved
    pub fn set_pol_round(&mut self, v: i64) {
        self.pol_round = v;
    }

    // .tendermint.types.CanonicalBlockID block_id = 5;


    pub fn get_block_id(&self) -> &CanonicalBlockID {
        self.block_id.as_ref().unwrap_or_else(|| <CanonicalBlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    pub fn has_block_id(&self) -> bool {
        self.block_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: CanonicalBlockID) {
        self.block_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut CanonicalBlockID {
        if self.block_id.is_none() {
            self.block_id.set_default();
        }
        self.block_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_id(&mut self) -> CanonicalBlockID {
        self.block_id.take().unwrap_or_else(|| CanonicalBlockID::new())
    }

    // .google.protobuf.Timestamp timestamp = 6;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string chain_id = 7;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CanonicalProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.block_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.round = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.pol_round = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.height != 0 {
            my_size += 9;
        }
        if self.round != 0 {
            my_size += 9;
        }
        if self.pol_round != 0 {
            my_size += ::protobuf::rt::value_size(4, self.pol_round, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.chain_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.height != 0 {
            os.write_sfixed64(2, self.height)?;
        }
        if self.round != 0 {
            os.write_sfixed64(3, self.round)?;
        }
        if self.pol_round != 0 {
            os.write_int64(4, self.pol_round)?;
        }
        if let Some(ref v) = self.block_id.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(7, &self.chain_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CanonicalProposal {
        CanonicalProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::types::SignedMsgType>>(
                "type",
                |m: &CanonicalProposal| { &m.field_type },
                |m: &mut CanonicalProposal| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "height",
                |m: &CanonicalProposal| { &m.height },
                |m: &mut CanonicalProposal| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "round",
                |m: &CanonicalProposal| { &m.round },
                |m: &mut CanonicalProposal| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "pol_round",
                |m: &CanonicalProposal| { &m.pol_round },
                |m: &mut CanonicalProposal| { &mut m.pol_round },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CanonicalBlockID>>(
                "block_id",
                |m: &CanonicalProposal| { &m.block_id },
                |m: &mut CanonicalProposal| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &CanonicalProposal| { &m.timestamp },
                |m: &mut CanonicalProposal| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &CanonicalProposal| { &m.chain_id },
                |m: &mut CanonicalProposal| { &mut m.chain_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CanonicalProposal>(
                "CanonicalProposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CanonicalProposal {
        static instance: ::protobuf::rt::LazyV2<CanonicalProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CanonicalProposal::new)
    }
}

impl ::protobuf::Clear for CanonicalProposal {
    fn clear(&mut self) {
        self.field_type = super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN;
        self.height = 0;
        self.round = 0;
        self.pol_round = 0;
        self.block_id.clear();
        self.timestamp.clear();
        self.chain_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CanonicalProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CanonicalProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CanonicalVote {
    // message fields
    pub field_type: super::types::SignedMsgType,
    pub height: i64,
    pub round: i64,
    pub block_id: ::protobuf::SingularPtrField<CanonicalBlockID>,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub chain_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CanonicalVote {
    fn default() -> &'a CanonicalVote {
        <CanonicalVote as ::protobuf::Message>::default_instance()
    }
}

impl CanonicalVote {
    pub fn new() -> CanonicalVote {
        ::std::default::Default::default()
    }

    // .tendermint.types.SignedMsgType type = 1;


    pub fn get_field_type(&self) -> super::types::SignedMsgType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: super::types::SignedMsgType) {
        self.field_type = v;
    }

    // sfixed64 height = 2;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // sfixed64 round = 3;


    pub fn get_round(&self) -> i64 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: i64) {
        self.round = v;
    }

    // .tendermint.types.CanonicalBlockID block_id = 4;


    pub fn get_block_id(&self) -> &CanonicalBlockID {
        self.block_id.as_ref().unwrap_or_else(|| <CanonicalBlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    pub fn has_block_id(&self) -> bool {
        self.block_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: CanonicalBlockID) {
        self.block_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut CanonicalBlockID {
        if self.block_id.is_none() {
            self.block_id.set_default();
        }
        self.block_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_id(&mut self) -> CanonicalBlockID {
        self.block_id.take().unwrap_or_else(|| CanonicalBlockID::new())
    }

    // .google.protobuf.Timestamp timestamp = 5;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // string chain_id = 6;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CanonicalVote {
    fn is_initialized(&self) -> bool {
        for v in &self.block_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.round = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.height != 0 {
            my_size += 9;
        }
        if self.round != 0 {
            my_size += 9;
        }
        if let Some(ref v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.chain_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.height != 0 {
            os.write_sfixed64(2, self.height)?;
        }
        if self.round != 0 {
            os.write_sfixed64(3, self.round)?;
        }
        if let Some(ref v) = self.block_id.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(6, &self.chain_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CanonicalVote {
        CanonicalVote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::types::SignedMsgType>>(
                "type",
                |m: &CanonicalVote| { &m.field_type },
                |m: &mut CanonicalVote| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "height",
                |m: &CanonicalVote| { &m.height },
                |m: &mut CanonicalVote| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "round",
                |m: &CanonicalVote| { &m.round },
                |m: &mut CanonicalVote| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CanonicalBlockID>>(
                "block_id",
                |m: &CanonicalVote| { &m.block_id },
                |m: &mut CanonicalVote| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &CanonicalVote| { &m.timestamp },
                |m: &mut CanonicalVote| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &CanonicalVote| { &m.chain_id },
                |m: &mut CanonicalVote| { &mut m.chain_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CanonicalVote>(
                "CanonicalVote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CanonicalVote {
        static instance: ::protobuf::rt::LazyV2<CanonicalVote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CanonicalVote::new)
    }
}

impl ::protobuf::Clear for CanonicalVote {
    fn clear(&mut self) {
        self.field_type = super::types::SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN;
        self.height = 0;
        self.round = 0;
        self.block_id.clear();
        self.timestamp.clear();
        self.chain_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CanonicalVote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CanonicalVote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20tendermint/types/canonical.proto\x12\x10tendermint.types\x1a\x14go\
    goproto/gogo.proto\x1a\x1ctendermint/types/types.proto\x1a\x1fgoogle/pro\
    tobuf/timestamp.proto\"~\n\x10CanonicalBlockID\x12\x12\n\x04hash\x18\x01\
    \x20\x01(\x0cR\x04hash\x12V\n\x0fpart_set_header\x18\x02\x20\x01(\x0b2(.\
    tendermint.types.CanonicalPartSetHeaderR\rpartSetHeaderB\x04\xc8\xde\x1f\
    \0\"B\n\x16CanonicalPartSetHeader\x12\x14\n\x05total\x18\x01\x20\x01(\rR\
    \x05total\x12\x12\n\x04hash\x18\x02\x20\x01(\x0cR\x04hash\"\xd9\x02\n\
    \x11CanonicalProposal\x123\n\x04type\x18\x01\x20\x01(\x0e2\x1f.tendermin\
    t.types.SignedMsgTypeR\x04type\x12\x16\n\x06height\x18\x02\x20\x01(\x10R\
    \x06height\x12\x14\n\x05round\x18\x03\x20\x01(\x10R\x05round\x12)\n\tpol\
    _round\x18\x04\x20\x01(\x03R\x08polRoundB\x0c\xe2\xde\x1f\x08POLRound\
    \x12J\n\x08block_id\x18\x05\x20\x01(\x0b2\".tendermint.types.CanonicalBl\
    ockIDR\x07blockIdB\x0b\xe2\xde\x1f\x07BlockID\x12B\n\ttimestamp\x18\x06\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\xc8\xde\
    \x1f\0\x90\xdf\x1f\x01\x12&\n\x08chain_id\x18\x07\x20\x01(\tR\x07chainId\
    B\x0b\xe2\xde\x1f\x07ChainID\"\xaa\x02\n\rCanonicalVote\x123\n\x04type\
    \x18\x01\x20\x01(\x0e2\x1f.tendermint.types.SignedMsgTypeR\x04type\x12\
    \x16\n\x06height\x18\x02\x20\x01(\x10R\x06height\x12\x14\n\x05round\x18\
    \x03\x20\x01(\x10R\x05round\x12J\n\x08block_id\x18\x04\x20\x01(\x0b2\".t\
    endermint.types.CanonicalBlockIDR\x07blockIdB\x0b\xe2\xde\x1f\x07BlockID\
    \x12B\n\ttimestamp\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \ttimestampB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x01\x12&\n\x08chain_id\x18\
    \x06\x20\x01(\tR\x07chainIdB\x0b\xe2\xde\x1f\x07ChainIDB9Z7github.com/te\
    ndermint/tendermint/proto/tendermint/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
