// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tendermint/types/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct PartSetHeader {
    // message fields
    pub total: u32,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PartSetHeader {
    fn default() -> &'a PartSetHeader {
        <PartSetHeader as ::protobuf::Message>::default_instance()
    }
}

impl PartSetHeader {
    pub fn new() -> PartSetHeader {
        ::std::default::Default::default()
    }

    // uint32 total = 1;


    pub fn get_total(&self) -> u32 {
        self.total
    }
    pub fn clear_total(&mut self) {
        self.total = 0;
    }

    // Param is passed by value, moved
    pub fn set_total(&mut self, v: u32) {
        self.total = v;
    }

    // bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PartSetHeader {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.total = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.total != 0 {
            my_size += ::protobuf::rt::value_size(1, self.total, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.total != 0 {
            os.write_uint32(1, self.total)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PartSetHeader {
        PartSetHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "total",
                |m: &PartSetHeader| { &m.total },
                |m: &mut PartSetHeader| { &mut m.total },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &PartSetHeader| { &m.hash },
                |m: &mut PartSetHeader| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PartSetHeader>(
                "PartSetHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PartSetHeader {
        static instance: ::protobuf::rt::LazyV2<PartSetHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PartSetHeader::new)
    }
}

impl ::protobuf::Clear for PartSetHeader {
    fn clear(&mut self) {
        self.total = 0;
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PartSetHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PartSetHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Part {
    // message fields
    pub index: u32,
    pub bytes: ::std::vec::Vec<u8>,
    pub proof: ::protobuf::SingularPtrField<super::proof::Proof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Part {
    fn default() -> &'a Part {
        <Part as ::protobuf::Message>::default_instance()
    }
}

impl Part {
    pub fn new() -> Part {
        ::std::default::Default::default()
    }

    // uint32 index = 1;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // bytes bytes = 2;


    pub fn get_bytes(&self) -> &[u8] {
        &self.bytes
    }
    pub fn clear_bytes(&mut self) {
        self.bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bytes
    }

    // Take field
    pub fn take_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bytes, ::std::vec::Vec::new())
    }

    // .tendermint.crypto.Proof proof = 3;


    pub fn get_proof(&self) -> &super::proof::Proof {
        self.proof.as_ref().unwrap_or_else(|| <super::proof::Proof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    pub fn has_proof(&self) -> bool {
        self.proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: super::proof::Proof) {
        self.proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut super::proof::Proof {
        if self.proof.is_none() {
            self.proof.set_default();
        }
        self.proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof(&mut self) -> super::proof::Proof {
        self.proof.take().unwrap_or_else(|| super::proof::Proof::new())
    }
}

impl ::protobuf::Message for Part {
    fn is_initialized(&self) -> bool {
        for v in &self.proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.bytes);
        }
        if let Some(ref v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if !self.bytes.is_empty() {
            os.write_bytes(2, &self.bytes)?;
        }
        if let Some(ref v) = self.proof.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Part {
        Part::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "index",
                |m: &Part| { &m.index },
                |m: &mut Part| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "bytes",
                |m: &Part| { &m.bytes },
                |m: &mut Part| { &mut m.bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proof::Proof>>(
                "proof",
                |m: &Part| { &m.proof },
                |m: &mut Part| { &mut m.proof },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Part>(
                "Part",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Part {
        static instance: ::protobuf::rt::LazyV2<Part> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Part::new)
    }
}

impl ::protobuf::Clear for Part {
    fn clear(&mut self) {
        self.index = 0;
        self.bytes.clear();
        self.proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Part {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Part {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockID {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    pub part_set_header: ::protobuf::SingularPtrField<PartSetHeader>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockID {
    fn default() -> &'a BlockID {
        <BlockID as ::protobuf::Message>::default_instance()
    }
}

impl BlockID {
    pub fn new() -> BlockID {
        ::std::default::Default::default()
    }

    // bytes hash = 1;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // .tendermint.types.PartSetHeader part_set_header = 2;


    pub fn get_part_set_header(&self) -> &PartSetHeader {
        self.part_set_header.as_ref().unwrap_or_else(|| <PartSetHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_part_set_header(&mut self) {
        self.part_set_header.clear();
    }

    pub fn has_part_set_header(&self) -> bool {
        self.part_set_header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_part_set_header(&mut self, v: PartSetHeader) {
        self.part_set_header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_part_set_header(&mut self) -> &mut PartSetHeader {
        if self.part_set_header.is_none() {
            self.part_set_header.set_default();
        }
        self.part_set_header.as_mut().unwrap()
    }

    // Take field
    pub fn take_part_set_header(&mut self) -> PartSetHeader {
        self.part_set_header.take().unwrap_or_else(|| PartSetHeader::new())
    }
}

impl ::protobuf::Message for BlockID {
    fn is_initialized(&self) -> bool {
        for v in &self.part_set_header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.part_set_header)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if let Some(ref v) = self.part_set_header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if let Some(ref v) = self.part_set_header.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockID {
        BlockID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &BlockID| { &m.hash },
                |m: &mut BlockID| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PartSetHeader>>(
                "part_set_header",
                |m: &BlockID| { &m.part_set_header },
                |m: &mut BlockID| { &mut m.part_set_header },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockID>(
                "BlockID",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockID {
        static instance: ::protobuf::rt::LazyV2<BlockID> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockID::new)
    }
}

impl ::protobuf::Clear for BlockID {
    fn clear(&mut self) {
        self.hash.clear();
        self.part_set_header.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockID {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Header {
    // message fields
    pub version: ::protobuf::SingularPtrField<crate::tendermint::version::types::Consensus>,
    pub chain_id: ::std::string::String,
    pub height: i64,
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub last_block_id: ::protobuf::SingularPtrField<BlockID>,
    pub last_commit_hash: ::std::vec::Vec<u8>,
    pub data_hash: ::std::vec::Vec<u8>,
    pub validators_hash: ::std::vec::Vec<u8>,
    pub next_validators_hash: ::std::vec::Vec<u8>,
    pub consensus_hash: ::std::vec::Vec<u8>,
    pub app_hash: ::std::vec::Vec<u8>,
    pub last_results_hash: ::std::vec::Vec<u8>,
    pub evidence_hash: ::std::vec::Vec<u8>,
    pub proposer_address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Header {
    fn default() -> &'a Header {
        <Header as ::protobuf::Message>::default_instance()
    }
}

impl Header {
    pub fn new() -> Header {
        ::std::default::Default::default()
    }

    // .tendermint.version.Consensus version = 1;


    pub fn get_version(&self) -> &crate::tendermint::version::types::Consensus{
        self.version.as_ref().unwrap_or_else(|| <crate::tendermint::version::types::Consensus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: crate::tendermint::version::types::Consensus) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut crate::tendermint::version::types::Consensus {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> crate::tendermint::version::types::Consensus {
        self.version.take().unwrap_or_else(|| crate::tendermint::version::types::Consensus::new())
    }

    // string chain_id = 2;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }

    // int64 height = 3;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // .google.protobuf.Timestamp time = 4;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .tendermint.types.BlockID last_block_id = 5;


    pub fn get_last_block_id(&self) -> &BlockID {
        self.last_block_id.as_ref().unwrap_or_else(|| <BlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_last_block_id(&mut self) {
        self.last_block_id.clear();
    }

    pub fn has_last_block_id(&self) -> bool {
        self.last_block_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_block_id(&mut self, v: BlockID) {
        self.last_block_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_block_id(&mut self) -> &mut BlockID {
        if self.last_block_id.is_none() {
            self.last_block_id.set_default();
        }
        self.last_block_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_block_id(&mut self) -> BlockID {
        self.last_block_id.take().unwrap_or_else(|| BlockID::new())
    }

    // bytes last_commit_hash = 6;


    pub fn get_last_commit_hash(&self) -> &[u8] {
        &self.last_commit_hash
    }
    pub fn clear_last_commit_hash(&mut self) {
        self.last_commit_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_commit_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.last_commit_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_commit_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.last_commit_hash
    }

    // Take field
    pub fn take_last_commit_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.last_commit_hash, ::std::vec::Vec::new())
    }

    // bytes data_hash = 7;


    pub fn get_data_hash(&self) -> &[u8] {
        &self.data_hash
    }
    pub fn clear_data_hash(&mut self) {
        self.data_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data_hash
    }

    // Take field
    pub fn take_data_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data_hash, ::std::vec::Vec::new())
    }

    // bytes validators_hash = 8;


    pub fn get_validators_hash(&self) -> &[u8] {
        &self.validators_hash
    }
    pub fn clear_validators_hash(&mut self) {
        self.validators_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_validators_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.validators_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validators_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.validators_hash
    }

    // Take field
    pub fn take_validators_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.validators_hash, ::std::vec::Vec::new())
    }

    // bytes next_validators_hash = 9;


    pub fn get_next_validators_hash(&self) -> &[u8] {
        &self.next_validators_hash
    }
    pub fn clear_next_validators_hash(&mut self) {
        self.next_validators_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_next_validators_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.next_validators_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_next_validators_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.next_validators_hash
    }

    // Take field
    pub fn take_next_validators_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.next_validators_hash, ::std::vec::Vec::new())
    }

    // bytes consensus_hash = 10;


    pub fn get_consensus_hash(&self) -> &[u8] {
        &self.consensus_hash
    }
    pub fn clear_consensus_hash(&mut self) {
        self.consensus_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensus_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.consensus_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.consensus_hash
    }

    // Take field
    pub fn take_consensus_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.consensus_hash, ::std::vec::Vec::new())
    }

    // bytes app_hash = 11;


    pub fn get_app_hash(&self) -> &[u8] {
        &self.app_hash
    }
    pub fn clear_app_hash(&mut self) {
        self.app_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.app_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.app_hash
    }

    // Take field
    pub fn take_app_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.app_hash, ::std::vec::Vec::new())
    }

    // bytes last_results_hash = 12;


    pub fn get_last_results_hash(&self) -> &[u8] {
        &self.last_results_hash
    }
    pub fn clear_last_results_hash(&mut self) {
        self.last_results_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_results_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.last_results_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_results_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.last_results_hash
    }

    // Take field
    pub fn take_last_results_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.last_results_hash, ::std::vec::Vec::new())
    }

    // bytes evidence_hash = 13;


    pub fn get_evidence_hash(&self) -> &[u8] {
        &self.evidence_hash
    }
    pub fn clear_evidence_hash(&mut self) {
        self.evidence_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_evidence_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.evidence_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_evidence_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.evidence_hash
    }

    // Take field
    pub fn take_evidence_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.evidence_hash, ::std::vec::Vec::new())
    }

    // bytes proposer_address = 14;


    pub fn get_proposer_address(&self) -> &[u8] {
        &self.proposer_address
    }
    pub fn clear_proposer_address(&mut self) {
        self.proposer_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_proposer_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.proposer_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proposer_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proposer_address
    }

    // Take field
    pub fn take_proposer_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proposer_address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Header {
    fn is_initialized(&self) -> bool {
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_block_id {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_block_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.last_commit_hash)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data_hash)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.validators_hash)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.next_validators_hash)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.consensus_hash)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.app_hash)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.last_results_hash)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.evidence_hash)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proposer_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.chain_id);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.last_block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.last_commit_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.last_commit_hash);
        }
        if !self.data_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.data_hash);
        }
        if !self.validators_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.validators_hash);
        }
        if !self.next_validators_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(9, &self.next_validators_hash);
        }
        if !self.consensus_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.consensus_hash);
        }
        if !self.app_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.app_hash);
        }
        if !self.last_results_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.last_results_hash);
        }
        if !self.evidence_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(13, &self.evidence_hash);
        }
        if !self.proposer_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(14, &self.proposer_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(2, &self.chain_id)?;
        }
        if self.height != 0 {
            os.write_int64(3, self.height)?;
        }
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.last_block_id.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.last_commit_hash.is_empty() {
            os.write_bytes(6, &self.last_commit_hash)?;
        }
        if !self.data_hash.is_empty() {
            os.write_bytes(7, &self.data_hash)?;
        }
        if !self.validators_hash.is_empty() {
            os.write_bytes(8, &self.validators_hash)?;
        }
        if !self.next_validators_hash.is_empty() {
            os.write_bytes(9, &self.next_validators_hash)?;
        }
        if !self.consensus_hash.is_empty() {
            os.write_bytes(10, &self.consensus_hash)?;
        }
        if !self.app_hash.is_empty() {
            os.write_bytes(11, &self.app_hash)?;
        }
        if !self.last_results_hash.is_empty() {
            os.write_bytes(12, &self.last_results_hash)?;
        }
        if !self.evidence_hash.is_empty() {
            os.write_bytes(13, &self.evidence_hash)?;
        }
        if !self.proposer_address.is_empty() {
            os.write_bytes(14, &self.proposer_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Header {
        Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<crate::tendermint::version::types::Consensus>>(
                "version",
                |m: &Header| { &m.version },
                |m: &mut Header| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &Header| { &m.chain_id },
                |m: &mut Header| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &Header| { &m.height },
                |m: &mut Header| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "time",
                |m: &Header| { &m.time },
                |m: &mut Header| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                "last_block_id",
                |m: &Header| { &m.last_block_id },
                |m: &mut Header| { &mut m.last_block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "last_commit_hash",
                |m: &Header| { &m.last_commit_hash },
                |m: &mut Header| { &mut m.last_commit_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data_hash",
                |m: &Header| { &m.data_hash },
                |m: &mut Header| { &mut m.data_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "validators_hash",
                |m: &Header| { &m.validators_hash },
                |m: &mut Header| { &mut m.validators_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "next_validators_hash",
                |m: &Header| { &m.next_validators_hash },
                |m: &mut Header| { &mut m.next_validators_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "consensus_hash",
                |m: &Header| { &m.consensus_hash },
                |m: &mut Header| { &mut m.consensus_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "app_hash",
                |m: &Header| { &m.app_hash },
                |m: &mut Header| { &mut m.app_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "last_results_hash",
                |m: &Header| { &m.last_results_hash },
                |m: &mut Header| { &mut m.last_results_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "evidence_hash",
                |m: &Header| { &m.evidence_hash },
                |m: &mut Header| { &mut m.evidence_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proposer_address",
                |m: &Header| { &m.proposer_address },
                |m: &mut Header| { &mut m.proposer_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Header>(
                "Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Header {
        static instance: ::protobuf::rt::LazyV2<Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Header::new)
    }
}

impl ::protobuf::Clear for Header {
    fn clear(&mut self) {
        self.version.clear();
        self.chain_id.clear();
        self.height = 0;
        self.time.clear();
        self.last_block_id.clear();
        self.last_commit_hash.clear();
        self.data_hash.clear();
        self.validators_hash.clear();
        self.next_validators_hash.clear();
        self.consensus_hash.clear();
        self.app_hash.clear();
        self.last_results_hash.clear();
        self.evidence_hash.clear();
        self.proposer_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Data {
    // message fields
    pub txs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    // repeated bytes txs = 1;


    pub fn get_txs(&self) -> &[::std::vec::Vec<u8>] {
        &self.txs
    }
    pub fn clear_txs(&mut self) {
        self.txs.clear();
    }

    // Param is passed by value, moved
    pub fn set_txs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.txs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_txs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.txs
    }

    // Take field
    pub fn take_txs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.txs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Data {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.txs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.txs {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.txs {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Data {
        Data::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "txs",
                |m: &Data| { &m.txs },
                |m: &mut Data| { &mut m.txs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Data>(
                "Data",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Data {
        static instance: ::protobuf::rt::LazyV2<Data> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Data::new)
    }
}

impl ::protobuf::Clear for Data {
    fn clear(&mut self) {
        self.txs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Data {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Vote {
    // message fields
    pub field_type: SignedMsgType,
    pub height: i64,
    pub round: i32,
    pub block_id: ::protobuf::SingularPtrField<BlockID>,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub validator_address: ::std::vec::Vec<u8>,
    pub validator_index: i32,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Vote {
    fn default() -> &'a Vote {
        <Vote as ::protobuf::Message>::default_instance()
    }
}

impl Vote {
    pub fn new() -> Vote {
        ::std::default::Default::default()
    }

    // .tendermint.types.SignedMsgType type = 1;


    pub fn get_field_type(&self) -> SignedMsgType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: SignedMsgType) {
        self.field_type = v;
    }

    // int64 height = 2;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // int32 round = 3;


    pub fn get_round(&self) -> i32 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: i32) {
        self.round = v;
    }

    // .tendermint.types.BlockID block_id = 4;


    pub fn get_block_id(&self) -> &BlockID {
        self.block_id.as_ref().unwrap_or_else(|| <BlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    pub fn has_block_id(&self) -> bool {
        self.block_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: BlockID) {
        self.block_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut BlockID {
        if self.block_id.is_none() {
            self.block_id.set_default();
        }
        self.block_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_id(&mut self) -> BlockID {
        self.block_id.take().unwrap_or_else(|| BlockID::new())
    }

    // .google.protobuf.Timestamp timestamp = 5;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // bytes validator_address = 6;


    pub fn get_validator_address(&self) -> &[u8] {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.validator_address, ::std::vec::Vec::new())
    }

    // int32 validator_index = 7;


    pub fn get_validator_index(&self) -> i32 {
        self.validator_index
    }
    pub fn clear_validator_index(&mut self) {
        self.validator_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_validator_index(&mut self, v: i32) {
        self.validator_index = v;
    }

    // bytes signature = 8;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Vote {
    fn is_initialized(&self) -> bool {
        for v in &self.block_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.round = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.validator_address)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.validator_index = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::value_size(3, self.round, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.validator_address);
        }
        if self.validator_index != 0 {
            my_size += ::protobuf::rt::value_size(7, self.validator_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.height != 0 {
            os.write_int64(2, self.height)?;
        }
        if self.round != 0 {
            os.write_int32(3, self.round)?;
        }
        if let Some(ref v) = self.block_id.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.validator_address.is_empty() {
            os.write_bytes(6, &self.validator_address)?;
        }
        if self.validator_index != 0 {
            os.write_int32(7, self.validator_index)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(8, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Vote {
        Vote::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SignedMsgType>>(
                "type",
                |m: &Vote| { &m.field_type },
                |m: &mut Vote| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &Vote| { &m.height },
                |m: &mut Vote| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "round",
                |m: &Vote| { &m.round },
                |m: &mut Vote| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                "block_id",
                |m: &Vote| { &m.block_id },
                |m: &mut Vote| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &Vote| { &m.timestamp },
                |m: &mut Vote| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "validator_address",
                |m: &Vote| { &m.validator_address },
                |m: &mut Vote| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "validator_index",
                |m: &Vote| { &m.validator_index },
                |m: &mut Vote| { &mut m.validator_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &Vote| { &m.signature },
                |m: &mut Vote| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Vote>(
                "Vote",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Vote {
        static instance: ::protobuf::rt::LazyV2<Vote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Vote::new)
    }
}

impl ::protobuf::Clear for Vote {
    fn clear(&mut self) {
        self.field_type = SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN;
        self.height = 0;
        self.round = 0;
        self.block_id.clear();
        self.timestamp.clear();
        self.validator_address.clear();
        self.validator_index = 0;
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Vote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Commit {
    // message fields
    pub height: i64,
    pub round: i32,
    pub block_id: ::protobuf::SingularPtrField<BlockID>,
    pub signatures: ::protobuf::RepeatedField<CommitSig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Commit {
    fn default() -> &'a Commit {
        <Commit as ::protobuf::Message>::default_instance()
    }
}

impl Commit {
    pub fn new() -> Commit {
        ::std::default::Default::default()
    }

    // int64 height = 1;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // int32 round = 2;


    pub fn get_round(&self) -> i32 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: i32) {
        self.round = v;
    }

    // .tendermint.types.BlockID block_id = 3;


    pub fn get_block_id(&self) -> &BlockID {
        self.block_id.as_ref().unwrap_or_else(|| <BlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    pub fn has_block_id(&self) -> bool {
        self.block_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: BlockID) {
        self.block_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut BlockID {
        if self.block_id.is_none() {
            self.block_id.set_default();
        }
        self.block_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_id(&mut self) -> BlockID {
        self.block_id.take().unwrap_or_else(|| BlockID::new())
    }

    // repeated .tendermint.types.CommitSig signatures = 4;


    pub fn get_signatures(&self) -> &[CommitSig] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<CommitSig>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<CommitSig> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<CommitSig> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Commit {
    fn is_initialized(&self) -> bool {
        for v in &self.block_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signatures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.round = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_id)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signatures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::value_size(2, self.round, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.signatures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if self.round != 0 {
            os.write_int32(2, self.round)?;
        }
        if let Some(ref v) = self.block_id.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.signatures {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Commit {
        Commit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &Commit| { &m.height },
                |m: &mut Commit| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "round",
                |m: &Commit| { &m.round },
                |m: &mut Commit| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                "block_id",
                |m: &Commit| { &m.block_id },
                |m: &mut Commit| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommitSig>>(
                "signatures",
                |m: &Commit| { &m.signatures },
                |m: &mut Commit| { &mut m.signatures },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Commit>(
                "Commit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Commit {
        static instance: ::protobuf::rt::LazyV2<Commit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Commit::new)
    }
}

impl ::protobuf::Clear for Commit {
    fn clear(&mut self) {
        self.height = 0;
        self.round = 0;
        self.block_id.clear();
        self.signatures.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Commit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Commit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommitSig {
    // message fields
    pub block_id_flag: BlockIDFlag,
    pub validator_address: ::std::vec::Vec<u8>,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommitSig {
    fn default() -> &'a CommitSig {
        <CommitSig as ::protobuf::Message>::default_instance()
    }
}

impl CommitSig {
    pub fn new() -> CommitSig {
        ::std::default::Default::default()
    }

    // .tendermint.types.BlockIDFlag block_id_flag = 1;


    pub fn get_block_id_flag(&self) -> BlockIDFlag {
        self.block_id_flag
    }
    pub fn clear_block_id_flag(&mut self) {
        self.block_id_flag = BlockIDFlag::BLOCK_ID_FLAG_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_block_id_flag(&mut self, v: BlockIDFlag) {
        self.block_id_flag = v;
    }

    // bytes validator_address = 2;


    pub fn get_validator_address(&self) -> &[u8] {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.validator_address, ::std::vec::Vec::new())
    }

    // .google.protobuf.Timestamp timestamp = 3;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // bytes signature = 4;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CommitSig {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.block_id_flag, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.validator_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.block_id_flag != BlockIDFlag::BLOCK_ID_FLAG_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.block_id_flag);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.validator_address);
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.block_id_flag != BlockIDFlag::BLOCK_ID_FLAG_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.block_id_flag))?;
        }
        if !self.validator_address.is_empty() {
            os.write_bytes(2, &self.validator_address)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(4, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommitSig {
        CommitSig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BlockIDFlag>>(
                "block_id_flag",
                |m: &CommitSig| { &m.block_id_flag },
                |m: &mut CommitSig| { &mut m.block_id_flag },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "validator_address",
                |m: &CommitSig| { &m.validator_address },
                |m: &mut CommitSig| { &mut m.validator_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &CommitSig| { &m.timestamp },
                |m: &mut CommitSig| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &CommitSig| { &m.signature },
                |m: &mut CommitSig| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommitSig>(
                "CommitSig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommitSig {
        static instance: ::protobuf::rt::LazyV2<CommitSig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommitSig::new)
    }
}

impl ::protobuf::Clear for CommitSig {
    fn clear(&mut self) {
        self.block_id_flag = BlockIDFlag::BLOCK_ID_FLAG_UNKNOWN;
        self.validator_address.clear();
        self.timestamp.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommitSig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommitSig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Proposal {
    // message fields
    pub field_type: SignedMsgType,
    pub height: i64,
    pub round: i32,
    pub pol_round: i32,
    pub block_id: ::protobuf::SingularPtrField<BlockID>,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Proposal {
    fn default() -> &'a Proposal {
        <Proposal as ::protobuf::Message>::default_instance()
    }
}

impl Proposal {
    pub fn new() -> Proposal {
        ::std::default::Default::default()
    }

    // .tendermint.types.SignedMsgType type = 1;


    pub fn get_field_type(&self) -> SignedMsgType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: SignedMsgType) {
        self.field_type = v;
    }

    // int64 height = 2;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // int32 round = 3;


    pub fn get_round(&self) -> i32 {
        self.round
    }
    pub fn clear_round(&mut self) {
        self.round = 0;
    }

    // Param is passed by value, moved
    pub fn set_round(&mut self, v: i32) {
        self.round = v;
    }

    // int32 pol_round = 4;


    pub fn get_pol_round(&self) -> i32 {
        self.pol_round
    }
    pub fn clear_pol_round(&mut self) {
        self.pol_round = 0;
    }

    // Param is passed by value, moved
    pub fn set_pol_round(&mut self, v: i32) {
        self.pol_round = v;
    }

    // .tendermint.types.BlockID block_id = 5;


    pub fn get_block_id(&self) -> &BlockID {
        self.block_id.as_ref().unwrap_or_else(|| <BlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    pub fn has_block_id(&self) -> bool {
        self.block_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: BlockID) {
        self.block_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut BlockID {
        if self.block_id.is_none() {
            self.block_id.set_default();
        }
        self.block_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_id(&mut self) -> BlockID {
        self.block_id.take().unwrap_or_else(|| BlockID::new())
    }

    // .google.protobuf.Timestamp timestamp = 6;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // bytes signature = 7;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Proposal {
    fn is_initialized(&self) -> bool {
        for v in &self.block_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.round = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.pol_round = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_id)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.round != 0 {
            my_size += ::protobuf::rt::value_size(3, self.round, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.pol_round != 0 {
            my_size += ::protobuf::rt::value_size(4, self.pol_round, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.height != 0 {
            os.write_int64(2, self.height)?;
        }
        if self.round != 0 {
            os.write_int32(3, self.round)?;
        }
        if self.pol_round != 0 {
            os.write_int32(4, self.pol_round)?;
        }
        if let Some(ref v) = self.block_id.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(7, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Proposal {
        Proposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SignedMsgType>>(
                "type",
                |m: &Proposal| { &m.field_type },
                |m: &mut Proposal| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &Proposal| { &m.height },
                |m: &mut Proposal| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "round",
                |m: &Proposal| { &m.round },
                |m: &mut Proposal| { &mut m.round },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "pol_round",
                |m: &Proposal| { &m.pol_round },
                |m: &mut Proposal| { &mut m.pol_round },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                "block_id",
                |m: &Proposal| { &m.block_id },
                |m: &mut Proposal| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &Proposal| { &m.timestamp },
                |m: &mut Proposal| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &Proposal| { &m.signature },
                |m: &mut Proposal| { &mut m.signature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Proposal>(
                "Proposal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Proposal {
        static instance: ::protobuf::rt::LazyV2<Proposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Proposal::new)
    }
}

impl ::protobuf::Clear for Proposal {
    fn clear(&mut self) {
        self.field_type = SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN;
        self.height = 0;
        self.round = 0;
        self.pol_round = 0;
        self.block_id.clear();
        self.timestamp.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Proposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignedHeader {
    // message fields
    pub header: ::protobuf::SingularPtrField<Header>,
    pub commit: ::protobuf::SingularPtrField<Commit>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignedHeader {
    fn default() -> &'a SignedHeader {
        <SignedHeader as ::protobuf::Message>::default_instance()
    }
}

impl SignedHeader {
    pub fn new() -> SignedHeader {
        ::std::default::Default::default()
    }

    // .tendermint.types.Header header = 1;


    pub fn get_header(&self) -> &Header {
        self.header.as_ref().unwrap_or_else(|| <Header as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> Header {
        self.header.take().unwrap_or_else(|| Header::new())
    }

    // .tendermint.types.Commit commit = 2;


    pub fn get_commit(&self) -> &Commit {
        self.commit.as_ref().unwrap_or_else(|| <Commit as ::protobuf::Message>::default_instance())
    }
    pub fn clear_commit(&mut self) {
        self.commit.clear();
    }

    pub fn has_commit(&self) -> bool {
        self.commit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_commit(&mut self, v: Commit) {
        self.commit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_commit(&mut self) -> &mut Commit {
        if self.commit.is_none() {
            self.commit.set_default();
        }
        self.commit.as_mut().unwrap()
    }

    // Take field
    pub fn take_commit(&mut self) -> Commit {
        self.commit.take().unwrap_or_else(|| Commit::new())
    }
}

impl ::protobuf::Message for SignedHeader {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.commit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.commit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.commit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.commit.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignedHeader {
        SignedHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                "header",
                |m: &SignedHeader| { &m.header },
                |m: &mut SignedHeader| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Commit>>(
                "commit",
                |m: &SignedHeader| { &m.commit },
                |m: &mut SignedHeader| { &mut m.commit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignedHeader>(
                "SignedHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignedHeader {
        static instance: ::protobuf::rt::LazyV2<SignedHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignedHeader::new)
    }
}

impl ::protobuf::Clear for SignedHeader {
    fn clear(&mut self) {
        self.header.clear();
        self.commit.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignedHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LightBlock {
    // message fields
    pub signed_header: ::protobuf::SingularPtrField<SignedHeader>,
    pub validator_set: ::protobuf::SingularPtrField<super::validator::ValidatorSet>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LightBlock {
    fn default() -> &'a LightBlock {
        <LightBlock as ::protobuf::Message>::default_instance()
    }
}

impl LightBlock {
    pub fn new() -> LightBlock {
        ::std::default::Default::default()
    }

    // .tendermint.types.SignedHeader signed_header = 1;


    pub fn get_signed_header(&self) -> &SignedHeader {
        self.signed_header.as_ref().unwrap_or_else(|| <SignedHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signed_header(&mut self) {
        self.signed_header.clear();
    }

    pub fn has_signed_header(&self) -> bool {
        self.signed_header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signed_header(&mut self, v: SignedHeader) {
        self.signed_header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signed_header(&mut self) -> &mut SignedHeader {
        if self.signed_header.is_none() {
            self.signed_header.set_default();
        }
        self.signed_header.as_mut().unwrap()
    }

    // Take field
    pub fn take_signed_header(&mut self) -> SignedHeader {
        self.signed_header.take().unwrap_or_else(|| SignedHeader::new())
    }

    // .tendermint.types.ValidatorSet validator_set = 2;


    pub fn get_validator_set(&self) -> &super::validator::ValidatorSet {
        self.validator_set.as_ref().unwrap_or_else(|| <super::validator::ValidatorSet as ::protobuf::Message>::default_instance())
    }
    pub fn clear_validator_set(&mut self) {
        self.validator_set.clear();
    }

    pub fn has_validator_set(&self) -> bool {
        self.validator_set.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validator_set(&mut self, v: super::validator::ValidatorSet) {
        self.validator_set = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_set(&mut self) -> &mut super::validator::ValidatorSet {
        if self.validator_set.is_none() {
            self.validator_set.set_default();
        }
        self.validator_set.as_mut().unwrap()
    }

    // Take field
    pub fn take_validator_set(&mut self) -> super::validator::ValidatorSet {
        self.validator_set.take().unwrap_or_else(|| super::validator::ValidatorSet::new())
    }
}

impl ::protobuf::Message for LightBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.signed_header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validator_set {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signed_header)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validator_set)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.signed_header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.validator_set.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.signed_header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.validator_set.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LightBlock {
        LightBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignedHeader>>(
                "signed_header",
                |m: &LightBlock| { &m.signed_header },
                |m: &mut LightBlock| { &mut m.signed_header },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::validator::ValidatorSet>>(
                "validator_set",
                |m: &LightBlock| { &m.validator_set },
                |m: &mut LightBlock| { &mut m.validator_set },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LightBlock>(
                "LightBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LightBlock {
        static instance: ::protobuf::rt::LazyV2<LightBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LightBlock::new)
    }
}

impl ::protobuf::Clear for LightBlock {
    fn clear(&mut self) {
        self.signed_header.clear();
        self.validator_set.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LightBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LightBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockMeta {
    // message fields
    pub block_id: ::protobuf::SingularPtrField<BlockID>,
    pub block_size: i64,
    pub header: ::protobuf::SingularPtrField<Header>,
    pub num_txs: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockMeta {
    fn default() -> &'a BlockMeta {
        <BlockMeta as ::protobuf::Message>::default_instance()
    }
}

impl BlockMeta {
    pub fn new() -> BlockMeta {
        ::std::default::Default::default()
    }

    // .tendermint.types.BlockID block_id = 1;


    pub fn get_block_id(&self) -> &BlockID {
        self.block_id.as_ref().unwrap_or_else(|| <BlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    pub fn has_block_id(&self) -> bool {
        self.block_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: BlockID) {
        self.block_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut BlockID {
        if self.block_id.is_none() {
            self.block_id.set_default();
        }
        self.block_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_block_id(&mut self) -> BlockID {
        self.block_id.take().unwrap_or_else(|| BlockID::new())
    }

    // int64 block_size = 2;


    pub fn get_block_size(&self) -> i64 {
        self.block_size
    }
    pub fn clear_block_size(&mut self) {
        self.block_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_size(&mut self, v: i64) {
        self.block_size = v;
    }

    // .tendermint.types.Header header = 3;


    pub fn get_header(&self) -> &Header {
        self.header.as_ref().unwrap_or_else(|| <Header as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: Header) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut Header {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> Header {
        self.header.take().unwrap_or_else(|| Header::new())
    }

    // int64 num_txs = 4;


    pub fn get_num_txs(&self) -> i64 {
        self.num_txs
    }
    pub fn clear_num_txs(&mut self) {
        self.num_txs = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_txs(&mut self, v: i64) {
        self.num_txs = v;
    }
}

impl ::protobuf::Message for BlockMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.block_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.block_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.num_txs = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.block_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.num_txs != 0 {
            my_size += ::protobuf::rt::value_size(4, self.num_txs, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block_id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.block_size != 0 {
            os.write_int64(2, self.block_size)?;
        }
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.num_txs != 0 {
            os.write_int64(4, self.num_txs)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockMeta {
        BlockMeta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                "block_id",
                |m: &BlockMeta| { &m.block_id },
                |m: &mut BlockMeta| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "block_size",
                |m: &BlockMeta| { &m.block_size },
                |m: &mut BlockMeta| { &mut m.block_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Header>>(
                "header",
                |m: &BlockMeta| { &m.header },
                |m: &mut BlockMeta| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "num_txs",
                |m: &BlockMeta| { &m.num_txs },
                |m: &mut BlockMeta| { &mut m.num_txs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockMeta>(
                "BlockMeta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockMeta {
        static instance: ::protobuf::rt::LazyV2<BlockMeta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockMeta::new)
    }
}

impl ::protobuf::Clear for BlockMeta {
    fn clear(&mut self) {
        self.block_id.clear();
        self.block_size = 0;
        self.header.clear();
        self.num_txs = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxProof {
    // message fields
    pub root_hash: ::std::vec::Vec<u8>,
    pub data: ::std::vec::Vec<u8>,
    pub proof: ::protobuf::SingularPtrField<super::proof::Proof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxProof {
    fn default() -> &'a TxProof {
        <TxProof as ::protobuf::Message>::default_instance()
    }
}

impl TxProof {
    pub fn new() -> TxProof {
        ::std::default::Default::default()
    }

    // bytes root_hash = 1;


    pub fn get_root_hash(&self) -> &[u8] {
        &self.root_hash
    }
    pub fn clear_root_hash(&mut self) {
        self.root_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_root_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.root_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.root_hash
    }

    // Take field
    pub fn take_root_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.root_hash, ::std::vec::Vec::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // .tendermint.crypto.Proof proof = 3;


    pub fn get_proof(&self) -> &super::proof::Proof {
        self.proof.as_ref().unwrap_or_else(|| <super::proof::Proof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    pub fn has_proof(&self) -> bool {
        self.proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: super::proof::Proof) {
        self.proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut super::proof::Proof {
        if self.proof.is_none() {
            self.proof.set_default();
        }
        self.proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof(&mut self) -> super::proof::Proof {
        self.proof.take().unwrap_or_else(|| super::proof::Proof::new())
    }
}

impl ::protobuf::Message for TxProof {
    fn is_initialized(&self) -> bool {
        for v in &self.proof {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.root_hash)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proof)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.root_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.root_hash);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        if let Some(ref v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.root_hash.is_empty() {
            os.write_bytes(1, &self.root_hash)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        if let Some(ref v) = self.proof.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxProof {
        TxProof::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "root_hash",
                |m: &TxProof| { &m.root_hash },
                |m: &mut TxProof| { &mut m.root_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &TxProof| { &m.data },
                |m: &mut TxProof| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proof::Proof>>(
                "proof",
                |m: &TxProof| { &m.proof },
                |m: &mut TxProof| { &mut m.proof },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TxProof>(
                "TxProof",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TxProof {
        static instance: ::protobuf::rt::LazyV2<TxProof> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TxProof::new)
    }
}

impl ::protobuf::Clear for TxProof {
    fn clear(&mut self) {
        self.root_hash.clear();
        self.data.clear();
        self.proof.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxProof {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BlockIDFlag {
    BLOCK_ID_FLAG_UNKNOWN = 0,
    BLOCK_ID_FLAG_ABSENT = 1,
    BLOCK_ID_FLAG_COMMIT = 2,
    BLOCK_ID_FLAG_NIL = 3,
}

impl ::protobuf::ProtobufEnum for BlockIDFlag {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BlockIDFlag> {
        match value {
            0 => ::std::option::Option::Some(BlockIDFlag::BLOCK_ID_FLAG_UNKNOWN),
            1 => ::std::option::Option::Some(BlockIDFlag::BLOCK_ID_FLAG_ABSENT),
            2 => ::std::option::Option::Some(BlockIDFlag::BLOCK_ID_FLAG_COMMIT),
            3 => ::std::option::Option::Some(BlockIDFlag::BLOCK_ID_FLAG_NIL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BlockIDFlag] = &[
            BlockIDFlag::BLOCK_ID_FLAG_UNKNOWN,
            BlockIDFlag::BLOCK_ID_FLAG_ABSENT,
            BlockIDFlag::BLOCK_ID_FLAG_COMMIT,
            BlockIDFlag::BLOCK_ID_FLAG_NIL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BlockIDFlag>("BlockIDFlag", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BlockIDFlag {
}

impl ::std::default::Default for BlockIDFlag {
    fn default() -> Self {
        BlockIDFlag::BLOCK_ID_FLAG_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockIDFlag {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SignedMsgType {
    SIGNED_MSG_TYPE_UNKNOWN = 0,
    SIGNED_MSG_TYPE_PREVOTE = 1,
    SIGNED_MSG_TYPE_PRECOMMIT = 2,
    SIGNED_MSG_TYPE_PROPOSAL = 32,
}

impl ::protobuf::ProtobufEnum for SignedMsgType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SignedMsgType> {
        match value {
            0 => ::std::option::Option::Some(SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN),
            1 => ::std::option::Option::Some(SignedMsgType::SIGNED_MSG_TYPE_PREVOTE),
            2 => ::std::option::Option::Some(SignedMsgType::SIGNED_MSG_TYPE_PRECOMMIT),
            32 => ::std::option::Option::Some(SignedMsgType::SIGNED_MSG_TYPE_PROPOSAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SignedMsgType] = &[
            SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN,
            SignedMsgType::SIGNED_MSG_TYPE_PREVOTE,
            SignedMsgType::SIGNED_MSG_TYPE_PRECOMMIT,
            SignedMsgType::SIGNED_MSG_TYPE_PROPOSAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SignedMsgType>("SignedMsgType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SignedMsgType {
}

impl ::std::default::Default for SignedMsgType {
    fn default() -> Self {
        SignedMsgType::SIGNED_MSG_TYPE_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedMsgType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ctendermint/types/types.proto\x12\x10tendermint.types\x1a\x14gogopr\
    oto/gogo.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dtendermint/\
    crypto/proof.proto\x1a\x1etendermint/version/types.proto\x1a\x20tendermi\
    nt/types/validator.proto\"9\n\rPartSetHeader\x12\x14\n\x05total\x18\x01\
    \x20\x01(\rR\x05total\x12\x12\n\x04hash\x18\x02\x20\x01(\x0cR\x04hash\"h\
    \n\x04Part\x12\x14\n\x05index\x18\x01\x20\x01(\rR\x05index\x12\x14\n\x05\
    bytes\x18\x02\x20\x01(\x0cR\x05bytes\x124\n\x05proof\x18\x03\x20\x01(\
    \x0b2\x18.tendermint.crypto.ProofR\x05proofB\x04\xc8\xde\x1f\0\"l\n\x07B\
    lockID\x12\x12\n\x04hash\x18\x01\x20\x01(\x0cR\x04hash\x12M\n\x0fpart_se\
    t_header\x18\x02\x20\x01(\x0b2\x1f.tendermint.types.PartSetHeaderR\rpart\
    SetHeaderB\x04\xc8\xde\x1f\0\"\xe6\x04\n\x06Header\x12=\n\x07version\x18\
    \x01\x20\x01(\x0b2\x1d.tendermint.version.ConsensusR\x07versionB\x04\xc8\
    \xde\x1f\0\x12&\n\x08chain_id\x18\x02\x20\x01(\tR\x07chainIdB\x0b\xe2\
    \xde\x1f\x07ChainID\x12\x16\n\x06height\x18\x03\x20\x01(\x03R\x06height\
    \x128\n\x04time\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x04\
    timeB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x01\x12C\n\rlast_block_id\x18\x05\
    \x20\x01(\x0b2\x19.tendermint.types.BlockIDR\x0blastBlockIdB\x04\xc8\xde\
    \x1f\0\x12(\n\x10last_commit_hash\x18\x06\x20\x01(\x0cR\x0elastCommitHas\
    h\x12\x1b\n\tdata_hash\x18\x07\x20\x01(\x0cR\x08dataHash\x12'\n\x0fvalid\
    ators_hash\x18\x08\x20\x01(\x0cR\x0evalidatorsHash\x120\n\x14next_valida\
    tors_hash\x18\t\x20\x01(\x0cR\x12nextValidatorsHash\x12%\n\x0econsensus_\
    hash\x18\n\x20\x01(\x0cR\rconsensusHash\x12\x19\n\x08app_hash\x18\x0b\
    \x20\x01(\x0cR\x07appHash\x12*\n\x11last_results_hash\x18\x0c\x20\x01(\
    \x0cR\x0flastResultsHash\x12#\n\revidence_hash\x18\r\x20\x01(\x0cR\x0cev\
    idenceHash\x12)\n\x10proposer_address\x18\x0e\x20\x01(\x0cR\x0fproposerA\
    ddress\"\x18\n\x04Data\x12\x10\n\x03txs\x18\x01\x20\x03(\x0cR\x03txs\"\
    \xe8\x02\n\x04Vote\x123\n\x04type\x18\x01\x20\x01(\x0e2\x1f.tendermint.t\
    ypes.SignedMsgTypeR\x04type\x12\x16\n\x06height\x18\x02\x20\x01(\x03R\
    \x06height\x12\x14\n\x05round\x18\x03\x20\x01(\x05R\x05round\x12E\n\x08b\
    lock_id\x18\x04\x20\x01(\x0b2\x19.tendermint.types.BlockIDR\x07blockIdB\
    \x0f\xc8\xde\x1f\0\xe2\xde\x1f\x07BlockID\x12B\n\ttimestamp\x18\x05\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\ttimestampB\x08\xc8\xde\x1f\0\
    \x90\xdf\x1f\x01\x12+\n\x11validator_address\x18\x06\x20\x01(\x0cR\x10va\
    lidatorAddress\x12'\n\x0fvalidator_index\x18\x07\x20\x01(\x05R\x0evalida\
    torIndex\x12\x1c\n\tsignature\x18\x08\x20\x01(\x0cR\tsignature\"\xc0\x01\
    \n\x06Commit\x12\x16\n\x06height\x18\x01\x20\x01(\x03R\x06height\x12\x14\
    \n\x05round\x18\x02\x20\x01(\x05R\x05round\x12E\n\x08block_id\x18\x03\
    \x20\x01(\x0b2\x19.tendermint.types.BlockIDR\x07blockIdB\x0f\xc8\xde\x1f\
    \0\xe2\xde\x1f\x07BlockID\x12A\n\nsignatures\x18\x04\x20\x03(\x0b2\x1b.t\
    endermint.types.CommitSigR\nsignaturesB\x04\xc8\xde\x1f\0\"\xdd\x01\n\tC\
    ommitSig\x12A\n\rblock_id_flag\x18\x01\x20\x01(\x0e2\x1d.tendermint.type\
    s.BlockIDFlagR\x0bblockIdFlag\x12+\n\x11validator_address\x18\x02\x20\
    \x01(\x0cR\x10validatorAddress\x12B\n\ttimestamp\x18\x03\x20\x01(\x0b2\
    \x1a.google.protobuf.TimestampR\ttimestampB\x08\xc8\xde\x1f\0\x90\xdf\
    \x1f\x01\x12\x1c\n\tsignature\x18\x04\x20\x01(\x0cR\tsignature\"\xb3\x02\
    \n\x08Proposal\x123\n\x04type\x18\x01\x20\x01(\x0e2\x1f.tendermint.types\
    .SignedMsgTypeR\x04type\x12\x16\n\x06height\x18\x02\x20\x01(\x03R\x06hei\
    ght\x12\x14\n\x05round\x18\x03\x20\x01(\x05R\x05round\x12\x1b\n\tpol_rou\
    nd\x18\x04\x20\x01(\x05R\x08polRound\x12E\n\x08block_id\x18\x05\x20\x01(\
    \x0b2\x19.tendermint.types.BlockIDR\x07blockIdB\x0f\xc8\xde\x1f\0\xe2\
    \xde\x1f\x07BlockID\x12B\n\ttimestamp\x18\x06\x20\x01(\x0b2\x1a.google.p\
    rotobuf.TimestampR\ttimestampB\x08\xc8\xde\x1f\0\x90\xdf\x1f\x01\x12\x1c\
    \n\tsignature\x18\x07\x20\x01(\x0cR\tsignature\"r\n\x0cSignedHeader\x120\
    \n\x06header\x18\x01\x20\x01(\x0b2\x18.tendermint.types.HeaderR\x06heade\
    r\x120\n\x06commit\x18\x02\x20\x01(\x0b2\x18.tendermint.types.CommitR\
    \x06commit\"\x96\x01\n\nLightBlock\x12C\n\rsigned_header\x18\x01\x20\x01\
    (\x0b2\x1e.tendermint.types.SignedHeaderR\x0csignedHeader\x12C\n\rvalida\
    tor_set\x18\x02\x20\x01(\x0b2\x1e.tendermint.types.ValidatorSetR\x0cvali\
    datorSet\"\xc2\x01\n\tBlockMeta\x12E\n\x08block_id\x18\x01\x20\x01(\x0b2\
    \x19.tendermint.types.BlockIDR\x07blockIdB\x0f\xc8\xde\x1f\0\xe2\xde\x1f\
    \x07BlockID\x12\x1d\n\nblock_size\x18\x02\x20\x01(\x03R\tblockSize\x126\
    \n\x06header\x18\x03\x20\x01(\x0b2\x18.tendermint.types.HeaderR\x06heade\
    rB\x04\xc8\xde\x1f\0\x12\x17\n\x07num_txs\x18\x04\x20\x01(\x03R\x06numTx\
    s\"j\n\x07TxProof\x12\x1b\n\troot_hash\x18\x01\x20\x01(\x0cR\x08rootHash\
    \x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\x12.\n\x05proof\x18\x03\
    \x20\x01(\x0b2\x18.tendermint.crypto.ProofR\x05proof*\xd7\x01\n\x0bBlock\
    IDFlag\x121\n\x15BLOCK_ID_FLAG_UNKNOWN\x10\0\x1a\x16\x8a\x9d\x20\x12Bloc\
    kIDFlagUnknown\x12/\n\x14BLOCK_ID_FLAG_ABSENT\x10\x01\x1a\x15\x8a\x9d\
    \x20\x11BlockIDFlagAbsent\x12/\n\x14BLOCK_ID_FLAG_COMMIT\x10\x02\x1a\x15\
    \x8a\x9d\x20\x11BlockIDFlagCommit\x12)\n\x11BLOCK_ID_FLAG_NIL\x10\x03\
    \x1a\x12\x8a\x9d\x20\x0eBlockIDFlagNil\x1a\x08\x88\xa3\x1e\0\xa8\xa4\x1e\
    \x01*\xd7\x01\n\rSignedMsgType\x12,\n\x17SIGNED_MSG_TYPE_UNKNOWN\x10\0\
    \x1a\x0f\x8a\x9d\x20\x0bUnknownType\x12,\n\x17SIGNED_MSG_TYPE_PREVOTE\
    \x10\x01\x1a\x0f\x8a\x9d\x20\x0bPrevoteType\x120\n\x19SIGNED_MSG_TYPE_PR\
    ECOMMIT\x10\x02\x1a\x11\x8a\x9d\x20\rPrecommitType\x12.\n\x18SIGNED_MSG_\
    TYPE_PROPOSAL\x10\x20\x1a\x10\x8a\x9d\x20\x0cProposalType\x1a\x08\x88\
    \xa3\x1e\0\xa8\xa4\x1e\x01B9Z7github.com/tendermint/tendermint/proto/ten\
    dermint/typesb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
